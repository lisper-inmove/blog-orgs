#+TITLE: TCP
#+DATE: 2024-02-23 19:32:14
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Transmission Control Protocol, is a fundamental protocol within the Internet Protocol Suite, which is used for data transmission across network devices. It enables reliable, ordered, and error-checked delivery of a stream of bytes between applications running on hosts communicating via an IP network
#+KEYWORDS: Three-Way Handshaking, Four-Way Goodbye
#+CATEGORIES: NetworkProgramming

* RFC 9293
https://datatracker.ietf.org/doc/html/rfc9293

#+begin_src shell
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |          Source Port          |       Destination Port        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                        Sequence Number                        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                    Acknowledgment Number                      |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Data |       |C|E|U|A|P|R|S|F|                               |
     | Offset| Rsrvd |W|C|R|C|S|S|Y|I|            Window             |
     |       |       |R|E|G|K|H|T|N|N|                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |           Checksum            |         Urgent Pointer        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                           [Options]                           |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               :
     :                             Data                              :
     :                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+end_src

1. Source Port(16 bits): 源端口号
2. Destination Port(16 bits): 目地端口号
3. Sequence Number(32 bits): 该次消息的序列号
4. Acknowledgment Number(32 bits): 发送方希望下次收到消息时的Sequence Number
5. Offset(4 bits): 数据字段的的偏移量。0 ~ 15。表示头部占用了多少个 32bits。比如Data Offset 为10时，表示头占用了 10 * 32bits，也就是 40个字节。那么从第41个字节开始就是Data了。
6. Rsrvd(4 bits): 保留字段
7. 控制字段(8 bits): https://www.ietf.org/rfc/rfc793.txt 793协议只有后6个标志位
  1. CWR: 用于TCP拥塞控制。当发送端接收到了ECE回显指示，并减小了拥塞窗口大小时，它会设置CWR标志。
  2. ECE: 与ECN (Explicit Congestion Notification，显式拥塞通知) 有关，用于指示网络拥塞的情况。
  3. URG: 紧急指针，此时 Urgent Pointer的位置是有效的，用于指示报文段中的紧急数据的结束位置。
  4. ACK: 确认序号有效。除了初始的SYN段外，TCP报文的ACK标志都是设置的。
  5. PSH: 接收方应尽快将这个报文交给应用层
  6. RST: 用于复位导致出错的连接，或者拒绝一个错误的报文段。
  7. SYN: 同步序号。用来发起一个连接
  8. FIN: 发端完成发送任务
8. window(16 bits): 字段指定了接收方当前可用于接收数据的缓冲区大小。这意味着发送方不能发送超过这个窗口大小的数据
  1. 该窗口是动态变化的。一开始很小，然后慢慢增大，主要用于解决网络拥塞的问题。
  2. 当接收方的缓冲区被填满时，它会通告一个窗口大小为0的窗口。这阻止发送方发送更多的数据，直到接收方再次通告一个非零窗口大小。在这种情况下，发送方会进行 **零窗口探测** ，周期性地发送小的探测段以检查窗口是否再次打开
  3. 由于Window字段只有16位，因此最大可表示的窗口大小为65535字节。为了克服这个限制，TCP定义了一个窗口缩放（Window Scale）选项，允许发送方和接收方在握手阶段协商一个窗口大小的缩放因子，从而允许更大的窗口大小
9. checksum(16 bits): 根据数据内容计算出的简单校验值，用于检测数据在传输过程中是否发生错误。发送方，对发送的数据计算一个较验和，接收方做同样的操作。只要两者相同，那么数据便是正确的。
10. Urgent Pointer(16 bits): 它表示从当前段的序列号开始，到紧急数据结束的偏移量。
11. Options(32 bits): 用于设置一些额外的参数
  1. MSS(最大段大小): 通信中，自身能处理的最大段数据。比如，一方说最大能处理 1600bytes，另一方说最大能处理1400bytes，那么这个值就被设置成1400。这样可以减少在中间网络设备上进行分片和重新组装的过程，提高了数据传输的效率。这个值一般在三次握手过程中双方协商完成。
  2. 窗口缩放选项: Window只是16bits，最大也就 65535个字节，如果想要更大的窗口，则可以设置窗口缩放选项，以更改窗口大小，提高传输性能。
  3. 时间戳选项: 这个选项可以携带两个时间戳。在交换数据的过程中，客户端服务端都会把消息发送时的时间戳放到其中一个里面。下一次收到消息时，再用自身当前时间和上次放的时间对比，就能知道上次发消息到此次收消息一共用了多少时间。
  4. 选择性确认: 用于接收方告诉发送方，自己已经收到了哪些非连续的数据段。这样发送方就可以只重新发送这些丢失的段。从而提高传输效率。

* 三次握手

#+ATTR_HTML: :width 50% :align center :image t
[[https://inmove-blog.oss-cn-hangzhou.aliyuncs.com/images/ThreeTimesShakeHand.png]]

1. S作为服务开放端口待客户端连接，此时为 *LISTEN* 状态
2. 第一次握手: C作为客户端 发送  *SYN置1, seq(Sequence Number)=x* 发起连接，自身进入 *SYN_SENT* 状态
3. 第二次握手: S收到C的消息之后，发送 *SYN置1, ACK置1, seq=y, Ack(Acknowledgment)=x+1* 自身进入 *SYN_RECV* 状态
4. 第三次握手: C收到S的消息之后，比对 Ack之后，发送 *ACK置1, Ack=y+1* 自向进入 *ESTABLISHED* 状态
5. S收到消息之后，自身进入 *ESTABLISHED* 状态。至此三次握手完成。

下面是三次握手的主要作用:
1. 三次握手最主要的作用是同步双方的初始序列号。以防止已失效的连接请求报文突然又传到了服务器。
2. 另外一个重要的作用是确认对方有收发消息的能力。假设此处为 CW(Client Write), CR(Client Read), SW(Server Write), SR(Server Read)
   - 第一次握手
     1. C: 无法确认任何能力
     2. S: 收到消息之后 确认了 CW, SR
   - 第二次握手
     1. C: 确认了 CW, CR, SW, SR。通过比对 Ack 和 上一次发送的 seq，如果能对得上，说明收到的消息是 S 针对自己上一次的消息的回复。
     2. S: 无
   - 第三次握手
     1. C: 无
     2. S: 确认了 CR, SW。同样，通过比较 Ack 和 上一次发送的 seq，只要对得上，S便知道C是在回自己上一次发送的消息
3. 协商参数，如窗口大小，最大段大小等

* 四次挥手

#+ATTR_HTML: :width 50% :align center :image t
[[https://inmove-blog.oss-cn-hangzhou.aliyuncs.com/images/FourTimesWaveHand.png]]

1. 主动方，会在某一个包中将FIN置1，有可能是一个单独的包，也有可能和一个数据包一起发送。
2. 被动方，会回ACK的消息，然后发起一个FIN的消息。他们有可能单独发，也有可能会一起发过去，比如被动方在准备好可以发FIN之后，发现这个ACK还没有发出去了，便会让他们一起发送。这样的话。发起方就会直接进行TIME_WAIT状态了。
   另外有一种情，被动方先发送了FIN，此时会进入 CLOSING 状态。
3. 主动方为被动方的FIN发ACK的消息，并进入 TIME_WAIT 的状态，等待2 * MSL 秒之后，进行CLOSED状态。

* MSL

*报文在网络中的最大生存时间。*

为什么关闭发起方进入 TIME_WAIT 之后会等待 2 * MLS 的时间:
  发起方(上面的C)发送最后一个包之后，进入TIME_WAIT状态，这个包需要最多MLS到达S，否则就失效了，而S在收到这个包之前，以为C没有收到上一个FIN包，而重新发送，这个时候可能刚好过去了MLS的时间。
  于是C又收到一个新的FIN包，这个新的FIN包可能在网络上经过了MLS的时间，这个时候因为还在2MLS之内，所以C还是再回一个Ack的消息。
  它的主要作用还是为了确认连接的正确关闭。以便释放资源。
 其实这也不能完全解决新的连接会收到旧的连接的包的问题。主要还是使用 **序列号** 和 **确认序号** 来解决这个问题的。

* 半连接队列与半连接队列

半连接队列又称SYN队列。全连接队列又称accept队列。
当服务端收到客户端发起的SYN请求后，内核会把该连接存储到半连接队列，并向客户端响应SYN+ACK，接着客户返回ACK，服务端收到第三次握手的ACK后，内核会把连接从半连接队列移除，然后创建新的完全的连接，并将其添加到全连接队列。
我们编写的socket.accept就是从accept队列中获取一个socket。

洪水攻击，伪造大量的ip，不断的发起SYN，因为是假的ip，所以不可能收到客户端的ACK，半连接队列就一直处于满的状态。解决办法 [[file:~/source-code/blog-v2/posts/Linux/KernelOptomize.org::*For Web][net.ipv4.tcp_syncookies = 1]]

* RTT E-RTT 与 RTO

RTT 又叫 Sample RTT: 每发送一个分组，TCP都会进行RTT采样，这个采样并不会每一个数据包都采样，同一时刻发送的数据包中，只会针对一个数据包采样
E-RTT(Estimated RTT): 平滑RTT。为了应对网络条件的变化。E-RTT = (1−α)⋅E-RTT + α⋅Sample RTT
  1. α 是一个介于 0 和 1 之间的常数，用于控制平滑程度。
  2. Sample RTT 是最近一次测量的 RTT 值。
  3. 等式右边的E-RTT 指上一个 E-RTT

RTO 是 TCP 用来决定何时应该重传未被确认的数据包的一个时间间隔。如果发送了一个数据包，但在 RTO 时间内未收到确认，TCP 会认为该数据包可能已丢失，并将其重新发送。
RTTVAR=(1−β)⋅RTTVAR+β⋅∣Sample-RTT - E-RTT∣   # E-RTT 的方差
RTO=E-RTT + K⋅RTTVAR                         # RTO 的计算
1. α 和 β 是常数，通常分别取值为0.125和0.25。
2. K 是一个常数，通常取值为4
* 拥塞控制

TCP(传输控制协议)拥塞控制是TCP协议中的一个核心功能，它的目的是为了避免过多的数据同时被发送到网络中，从而导致网络拥塞。当网络出现拥塞时，数据包的丢失率会增加，这会导致TCP重新传输丢失的数据包，从而进一步加剧网络拥塞。为了解决这个问题，TCP引入了拥塞控制机制。

TCP拥塞控制主要基于四个算法：

1. *慢启动(Slow Start)*:
   当一个TCP连接刚建立时，它不知道网络的拥塞情况，因此会从一个很小的拥塞窗口(cwnd)开始发送数据。
   每当收到一个确认（ACK），拥塞窗口会加倍，这导致数据发送速率呈指数增长。
   当cwnd达到一个阈值（ssthresh）或发生丢包时，TCP会进入拥塞避免阶段。
2. *拥塞避免(Congestion Avoidance)*:
   在这个阶段，cwnd的增长会变得更加缓慢，每经过一个往返时间(RTT)，cwnd只增加1。
   如果发生丢包，ssthresh会被设置为当前cwnd的一半，并且cwnd会被重置为1，然后TCP重新进入慢启动阶段。
3. *快重传(Fast Retransmit)*:
   如果一个发送方连续收到三个重复的ACK，它会假设最早的未确认的数据包已经丢失，并立即重新发送那个数据包，而不是等待超时。
4. *快恢复(Fast Recovery)*:
   在快重传之后，TCP不会立即进入慢启动阶段，而是将ssthresh和cwnd都设置为当前cwnd的一半，然后进入拥塞避免阶段。

* 滑动窗口 与 拥塞窗口

滑动窗口是TCP流量控制的一种机制。它的主要目的是确保发送方不会溢出接收方的缓冲区。
发送窗口：发送方的窗口大小决定了它在等待接收方的确认之前可以发送多少数据。
接收窗口：接收方通过TCP头部的窗口大小字段告诉发送方它的缓冲区还有多少空间，从而控制发送方的发送速率。
当数据被确认时，窗口会"滑动"，从而允许发送方发送更多的数据。

拥塞窗口是TCP拥塞控制的一种机制。它的主要目的是避免网络拥塞。
拥塞窗口的大小是基于网络的拥塞情况动态调整的。它限制了在任何给定的时间内，发送方可以发送到网络中的未确认的数据量。
TCP使用几种算法（如慢启动、拥塞避免、快重传和快恢复）来动态调整拥塞窗口的大小，以响应网络的拥塞情况。
拥塞窗口的大小始终不大于滑动窗口的大小。

* Nagle算法

Nagle算法是TCP协议中用于改善网络效率的一个算法。它的主要目的是减少小数据包在网络中的数量，从而减少网络拥塞和提高带宽利用率。

如果应用程序一次只发送一个字节的数据，而不是等待足够的数据可以发送一个完整的数据包，那么网络上就会有大量的小数据包。这种情况是非常低效的，因为每个数据包都有固定的头部开销。Nagle算法通过累积这些小数据块来解决这个问题。
如果TCP连接上有未确认的数据，则新的小数据块会被缓存，而不是立即发送。这意味着如果应用程序连续发送多个小数据块，它们可能会被组合成一个较大的数据包进行发送。
一旦所有之前的数据都被确认，或者累积的数据达到了最大段大小，数据就会被发送出去。
1. 如果包长度达到MSS，则允许发送
2. 如果该包含有FIN，则允许发送
3. 设置了TCP_NODELAY选项，则允许发送
4. 未设置TCP_CORK选项时，若所有发出去的小数据包(包长度小于MSS)均被确认，则允许发送
5. 上述条件都未满足，但发生了超时(一般为200ms)，则立即发送。

对于某些应用，如Telnet，每个键盘击键都会产生一个小数据包，这些数据包需要立即发送，以实现实时交互。为了处理这种情况，TCP实现通常提供一个"快速发送"的选项，该选项可以禁用Nagle算法。

* 延迟确认

TCP的延迟确认是一种优化策略，它允许TCP接收方延迟发送确认消息(ACK)的时间。在延迟的这一段时间内，可能还有会新的包到达，只需要确认最大的一个ack就行了。表示小于这个ack的所有包都收到了。
并且这个ack可以在接收方发送数据时带上，而不用单独发送一个包。
