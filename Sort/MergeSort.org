#+TITLE: Merge Sort
#+DATE: 2023-09-27 21:48:50
#+DISPLAY: nil
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Merge Sort
#+CATEGORIES: Sort

* MergeSort

Split array to two parts. Sort each part then merge then.
Total time complexity is O(n log n), space complexity is O(n)

#+begin_src python
  def mergeSort(arr):
      def merge(left, right):
          merged = []
          left_idx, right_idx = 0, 0

          # When every array has element, put smaller to merged array
          while left_idx < len(left) and right_idx < len(right):
              if left[left_idx] < right[right_idx]:
                  merged.append(left[left_idx])
                  left_idx += 1
              else:
                  merged.append(right[right_idx])
                  right_idx += 1

          # Left array has more elements
          while left_idx < len(left):
              merged.append(left[left_idx])
              left_idx += 1

          # Right array has more elements
          while right_idx < len(right):
              merged.append(right[right_idx])
              right_idx += 1

          return merged

      if len(arr) <= 1:
          return arr

      # split array
      mid = len(arr) // 2
      left_half = arr[:mid]
      right_half = arr[mid:]

      left_half = mergeSort(left_half)
      right_half = mergeSort(right_half)

      return merge(left_half, right_half)
#+end_src
