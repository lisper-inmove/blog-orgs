#+TITLE: 轮廓
#+DATE: 2025-06-11 20:31:26
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+CATEGORIES: OpenCV

* 查找轮廓
#+begin_src cpp
  void findContours(InputArray image, OutputArrayOfArrays contours, OutputArray hierarchy, int mode, int method, Point offset=Point());
#+end_src
1. contours是一个二维数组。用于输出轮廓集。有多少个contour就有多少个轮廓。每个contour由很多个Point组成
2. hierarchy是轮廓的拓扑信息。有几个contour就有几个hierarchy。每个hierarchy一共有４个元素，分别表示该轮廓的同级 上一轮廓，下一轮廓，子轮廓，父轮廓 的索引
3. mode 取值如下
   1. CV_RETR_EXTERNAL: 只提取最外层的轮廓
   2. CV_RETR_LIST: 提取所有轮廓，但是不建立等级关系。hierarchy的最后两个值为-1
   3. CV_RETR_CCOMP: 提取所有轮廓，将其组织为两层结构。
   4. CV_RETR_TREE: 提取所有轮廓，构建成一个嵌套式的轮廓存储。
4. method取值如下
   1. CV_CHAIN_APPROX_NONE: 保存物体边界上的所有点
   2. CV_CHAIN_APPROX_SIMLPE: 只保存拐点信息
5. offset，在所有轮廓点上加上这个偏移量。
6. image都是单通道图像矩阵，可以是灰度图，更多是二值图，一般是经过Canny，拉普拉斯等边缘检测算子处理过的二值图。

* 画轮廓
#+begin_src cpp
  void rdawContours(InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar &color, int thickness=1, int lineType=LINE_8, InputArray hierarchy=noArray, int maxLevel=INT_MAX, Point offset=Point());
#+end_src
1. coutours，由findContours填充的contours参数
2. contourIdx，默认为-1，画所有轮廓，如果不为-1，则只画该索引的轮廓
3. hierarchy: 由findContours填充的hierarchy参数
4. maxLevel: 只画小于等于该等级的轮廓。

* 例子
#+begin_src cpp
  #include <iostream>
  #include <opencv4/opencv2/core/base.hpp>
  #include <opencv4/opencv2/imgcodecs.hpp>
  #include <vector>
  #include <opencv4/opencv2/core/types.hpp>
  #include "opencv2/core/mat.hpp"
  #include "opencv2/core.hpp"
  #include "opencv2/highgui.hpp"
  #include "opencv2/imgproc.hpp"
  using namespace std;
  using namespace cv;

  int main()
  {
      Mat image = imread("/home/inmove/Desktop/template.png", IMREAD_GRAYSCALE);
      Mat binary;

      // threshold(image, binary, 200, 255, THRESH_BINARY);

      GaussianBlur(image, binary, Size(3, 3), 0);
      Canny(image, binary, 100, 250);

      vector<vector<Point>> contours;
      vector<Vec4i> hierarchy;
      findContours(binary, contours, RETR_TREE, CHAIN_APPROX_SIMPLE, Point());

      cout << contours.size() << " -- " << hierarchy.size() << endl;

      // 打印 contours
      cout << "Contours:" << endl;
      for (size_t i = 0; i < contours.size(); i++) {
          cout << "Contour " << i << " has " << contours[i].size() << " points:" << endl;
          for (size_t j = 0; j < contours[i].size(); j++) {
              cout << "  Point " << j << ": (" << contours[i][j].x << ", " << contours[i][j].y << ")"
                   << endl;
          }
      }

      // 打印 hierarchy
      cout << "\nHierarchy:" << endl;
      for (size_t i = 0; i < hierarchy.size(); i++) {
          cout << "Contour " << i << ": [Next=" << hierarchy[i][0] << ", Previous=" << hierarchy[i][1]
               << ", First_Child=" << hierarchy[i][2] << ", Parent=" << hierarchy[i][3] << "]"
               << endl;
      }

      cvtColor(binary, binary, COLOR_GRAY2BGR);
      // drawContours(binary, contours, 0, Scalar(0, 0, 255));
      // drawContours(binary, contours, 1, Scalar(0, 255, 0));
      // drawContours(binary, contours, 2, Scalar(255, 0, 0));
      line(binary, Point(387, 108), Point(651, 115), Scalar(0, 0, 255));
      line(binary, Point(649, 269), Point(648, 273), Scalar(0, 255, 0));

      imshow("src", image);
      imshow("result", binary);

      waitKey(0);
      destroyAllWindows();

      return 0;
  }

#+end_src
