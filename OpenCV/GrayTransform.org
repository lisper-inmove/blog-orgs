#+TITLE: 灰度变换
#+DATE: 2025-06-12 23:50:54
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+CATEGORIES: OpenCV

* 线性变换

Michelon 对比度
#+attr_formula:
#+begin_src latex
  \[
  C = \frac{I_{\text{max}} - I_{\text{min}}}{I_{\text{max}} + I_{\text{min}}}
  \]
#+end_src

图像对比度越高，图像中被照物体的轮廓就越分明可见，图像也更清晰。

线性的灰度变换是将原图像的灰度动态范围按线性关系扩展到指定范围或整个动态范围。比如，原先灰度值为[a, b]，变换之后为[c, d]
线性就是二元一次方程，y=kx+b

1. k > 1时，输出图像的对比度将增大
2. k < 1时，则减少
3. k = 1, b != 0时，灰度值上移或下移，图像变得更亮或更暗
4. k = 1, b = 0时，输出图片不变
5. k = -1, b = 255，黑白反向
6. k < 0 且 b > 0时，暗区变亮，亮区变暗

#+begin_src cpp
  #include <iostream>
  #include <opencv4/opencv2/core/saturate.hpp>
  #include <opencv4/opencv2/core/base.hpp>
  #include <opencv4/opencv2/imgcodecs.hpp>
  #include <vector>
  #include <opencv4/opencv2/core/types.hpp>
  #include "opencv2/core/mat.hpp"
  #include "opencv2/core.hpp"
  #include "opencv2/highgui.hpp"
  #include "opencv2/imgproc.hpp"
  using namespace std;
  using namespace cv;

  int main()
  {
      Mat image  = imread("/home/inmove/Desktop/test-images/lakeWater.jpg");
      Mat result = Mat::zeros(image.size(), image.type());
      double k   = 1.2;
      int b      = 50;
      for (int i = 0; i < image.rows; i++) {
          for (int j = 0; j < image.cols; j++) {
              for (int m = 0; m < 3; m++) {
                  result.at<Vec3b>(i, j)[m] =
                      saturate_cast<uchar>(k * (image.at<Vec3b>(i, j)[m]) + b);
              }
          }
      }

      imshow("src", image);
      imshow("result", result);

      waitKey(0);
      destroyAllWindows();

      return 0;
  }
#+end_src

* 分段线性变换
就是不同段的灰度值用不同的线性函数
#+begin_src cpp
  #include <sys/types.h>
  #include <iostream>
  #include <opencv4/opencv2/core/matx.hpp>
  #include <opencv4/opencv2/core/saturate.hpp>
  #include <opencv4/opencv2/core/base.hpp>
  #include <opencv4/opencv2/imgcodecs.hpp>
  #include <vector>
  #include <opencv4/opencv2/core/types.hpp>
  #include "opencv2/core/mat.hpp"
  #include "opencv2/core.hpp"
  #include "opencv2/highgui.hpp"
  #include "opencv2/imgproc.hpp"
  using namespace std;
  using namespace cv;

  void dividedLinearStrength(Mat &input, Mat &output, float inStart, float inEnd, float outStart,
                             float outEnd)
  {
      float k1 = outStart / inStart;
      float k2 = (outEnd - outStart) / (inEnd - inStart);
      float c2 = outStart - k2 * inStart;
      float k3 = (255.0f - outEnd) / (255.0f - inEnd);
      float c3 = 255.0f - k3 * 255.0f;

      vector<unsigned char> lookUpTable(256);
      for (size_t m = 0; m < 256; m++) {
          if (m < inStart) {
              lookUpTable[m] = static_cast<unsigned char>(m * k1);
          }
          else if (m > inEnd) {
              lookUpTable[m] = static_cast<unsigned char>(m * k3 + c3);
          }
          else {
              lookUpTable[m] = static_cast<unsigned char>(m * k2 + c2);
          }
      }
      for (size_t r = 0; r < input.rows; r++) {
          unsigned char *pInput  = input.data + r * input.step;
          unsigned char *pOutput = output.data + r * output.step;
          for (size_t c = 0; c < input.cols; c++) {
              pOutput[c] = lookUpTable[pInput[c]];
          }
      }
  }

  int main()
  {
      Mat image  = imread("/home/inmove/Desktop/test-images/img.jpg", IMREAD_GRAYSCALE);
      Mat result = Mat::zeros(image.size(), image.type());

      dividedLinearStrength(image, result, 72, 200, 5, 240);

      imshow("src", image);
      imshow("result", result);

      waitKey(0);
      destroyAllWindows();

      return 0;
  }

#+end_src
* 对数变换 与 反对数变换

#+attr_formula:
#+begin_src latex
  \[
  y = \log(x)
  \]
#+end_src

#+attr_formula:
#+begin_src latex
  \[
  s = \frac{(v + 1)^r - 1}{v}
  \]
#+end_src


从函数图可以看出来，x越大，其切线的的斜率越小，所以对图片做对数变换的时候，灰度越小，所以像整体对比度会减少。
暗部细节会被增强。

#+begin_src cpp
  #include <math.h>
  #include "opencv2/core/mat.hpp"
  #include "opencv2/core.hpp"
  #include <iostream>
  #include <opencv4/opencv2/core/base.hpp>
  #include <opencv4/opencv2/core/types.hpp>

  #include "opencv2/highgui.hpp"

  using namespace std;
  using namespace cv;

  void logTransform1(Mat &input, Mat &output, float c)
  {
      Mat src = input.clone();
      cv::add(src, Scalar(1.0), src);
      src.convertTo(src, CV_32F);

      // 对数变换 y = c * (log 1 + x)
      cv::log(src, output);
      output = c * output;

      normalize(output, output, 0, 255, NORM_MINMAX);
      convertScaleAbs(output, output);
  }

  void negativeLogTransform(Mat &input, Mat &output, double v)
  {
      // 反对数变换
      // y = ((v + 1) ^ x - 1) / v
      vector<double> value;
      double min = 0.0;
      double max = 0.0;
      for (int r = 0; r < input.rows; r++) {
          uchar *srcRowData = input.ptr<uchar>(r);
          for (int c = 0; c < input.cols; c++) {
              double currentValue = (pow(v + 1, srcRowData[c]) - 1) / v;
              value.push_back(currentValue);
              if (currentValue > max)
                  max = currentValue;
              if (currentValue < min)
                  min = currentValue;
          }
      }

      int index = 0;
      for (int r = 0; r < output.rows; r++) {
          uchar *dstRowData = output.ptr<uchar>(r);
          for (int c = 0; c < output.cols; c++) {
              dstRowData[c] = (uchar)(255 * ((value[index++] - min) * 1.0 / (max - min)));
          }
      }
  }

  int main()
  {
      Mat image  = imread("/home/inmove/Desktop/test-images/gza.jpg", IMREAD_GRAYSCALE);
      Mat result = Mat::zeros(image.size(), image.type());

      // logTransform1(image, result, 1.2);
      negativeLogTransform(image, result, 3);

      imshow("src", image);
      imshow("result", result);

      waitKey(0);
      destroyAllWindows();

      return 0;
  }
#+end_src
* 幂律变换
#+attr_formula:
#+begin_src latex
  \[
  y = c \cdot r^{\gamma}
  \]
#+end_src
γ > 1时，将较窄范围的低灰度值映射为较宽范围的灰度值，同时将较宽范围的高灰度值映射为较窄范围。
γ < 1时，则与之相反

γ < 1时，r越小，切线斜率越大

#+begin_src cpp
  #include <math.h>
  #include "opencv2/core/mat.hpp"
  #include "opencv2/core.hpp"
  #include <cmath>
  #include <iostream>
  #include <opencv4/opencv2/core/base.hpp>
  #include <opencv4/opencv2/core/types.hpp>

  #include "opencv2/highgui.hpp"

  using namespace std;
  using namespace cv;

  void gammaTransform(Mat &input, Mat &output, float gamma, int c)
  {
      int height = input.rows;
      int width  = input.cols;
      for (int i = 0; i < height; i++) {
          for (int j = 0; j < width; j++) {
              int value              = input.at<uchar>(i, j);
              output.at<uchar>(i, j) = pow(value, gamma) * c;
          }
      }
      normalize(output, output, 0, 255, NORM_MINMAX);
  }

  int main()
  {
      Mat image  = imread("/home/inmove/Desktop/test-images/gza.jpg", IMREAD_GRAYSCALE);
      Mat result = Mat::zeros(image.size(), image.type());

      gammaTransform(image, result, 0.3, 1);

      imshow("src", image);
      imshow("result", result);

      waitKey(0);
      destroyAllWindows();

      return 0;
  }

#+end_src
