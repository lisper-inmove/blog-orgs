#+TITLE: OpenCV 4.5 计算机视觉开发 基于VC++
#+DATE: 2025-05-24 15:09:22
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+CATEGORIES: OpenCV

* 数据结构
** Mat
** Scalar
长度为4的数组
** Size
** Point
#+begin_src cpp
  typedef Point_<int> Point2i;
  typedef Piont2i Point;
  typedef Point3_<int> Point3i;
  typedef Point_<float> Point2f;
  typedef Point3_<float> Point3f;
#+end_src

OpenCV中的点分为2D和3D，上面是几个例子。


* 函数
** cvtColor
#+begin_src cpp
  void cvtColor(InputArray src, OutputArray dst, int code, int dstCn=0);
#+end_src

该函数用于颜色空间转换
1. InputArray, OutputArray是接口类，可以是cv::Mat, std::Vector
2. dstCn是dst的图像通道数。默认为0，表示由src和code决定
3. code 表示从什么颜色空间转换成什么颜色空间，常用的有 cv::COLOR_BGR2GRAY, cv::COLOR_GRAY2BGR, cv::COLOR_BGR2HSV, cv::COLOR_HSV2BGR

** 基本图形绘制
*** rectangle
#+begin_src cpp
  void rectangle(InputOutputArray img, Point pt1, Point pt2, const Scalar &color, int thickness = 1, int lineType = LINE_8, int shift = 0);
#+end_src

该函数用于画一个矩形
1. p1, p2 表示左上和右下两个顶点
2. color表示线条颜色或亮度
3. lineType表示线条的类型
4. shift 表示坐标点的小数点的位数
*** circle
#+begin_src cpp
  void circle(InputOutputArray img, Point center, int radius, const Scolar &color, int thickness = 1, int lineType=Line_8, int shift=0);
#+end_src
*** ellipse
#+begin_src cpp
  void ellipse(InputOutputArray img, Point center, Size axes, double angle, double startAngle, double endAngle, const Scalar &color, int thickness=1, lineType=LINE_8, int shift=0);
#+end_src

画椭圆
1. axes: Size(a, b), a: 水平轴长度/2，b: 垂直轴长度/2
2. angle: 椭圆以中心为轴旋转的角度。
3. startAngle/endAngle: 圆弧 起始/终结 角的角度。0, 180表示只画个半圆.
*** line
#+begin_src cpp
  void line(InputOutputArray img, Point pt1, Point pt2, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)
#+end_src

*** fillPoly
#+begin_src cpp
  void fillPoly(Mat &img, const Point **pts, const int *npts, int ncontours, const Scalar &color, int lineType=LINE_8, int shift=0, Point offset=Point());
#+end_src

填充多边形
1. pts: 多边形的点集, pts[i] 是第i个多边形的顶点数组
2. npts: npts[i] 表示第i个多边形有多少个点
3. ncontours: 多边形的个数
4. 偏移量，所有多边形都会加上这个偏移量
** putText
#+begin_src cpp
  void cv::putText(Mat &img, const string &text, Point origin, int fontFace, double fontScale, Scalar color, thickness=1, lineType=8, bottomLeftOrigin=false)
#+end_src
该函数用于在图片上绘制文字
1. origin: 文本起始坐标。文字基线的左下角坐标
2. fontFace: 字体
3. fontScale: 值越大，文字越大
4. bottomLeftOrigin: 图片默认的坐标系的原点为左上角，设置为true时，则为左下角
** copyMakeBorder
#+begin_src cpp
  void copyMakeBorder(InputArray src, OutputArray dst, int top, int bottom, int left, int right, int borderType, const Scalar &value=Scalar);
#+end_src
该函数用于为图片增加边框
1. left/right/top/bottom: 各边添加的像素数
2. borderType:
   1. BORDER_CONSTANT: 用指定的常数填充,使用value
   2. BORDER_REPLICATE: 复制最边缘的像素
   3. BORDER_REFLECT: 和BORDER_REFLECT_101一样，但是会重复边界
   4. BORDER_REFLECT_101: 以最边缘的像素为轴，镜像填充
   5. BORDER_WRAP: 像素从另一边环绕
   6. BORDER_DEFAULT: 默认是BORDER_REFLECT_101

*** BORDER_REFLECT_101
#+begin_src cpp
  #include <iostream>
  #include <opencv2/opencv.hpp>

  using namespace cv;
  using namespace std;

  int main() {
    uchar data[] = {10, 20, 30, 40, 50, 60, 70, 80, 90};
    Mat m(3, 3, CV_8U, data);
    cout << m << endl;
    copyMakeBorder(m, m, 1, 1, 1, 1, BORDER_REFLECT_101);
    cout << m << endl;

    return 0;
  }

#+end_src

输出如下: 以10, 20, 30为轴，用40, 50, 60填充top
#+begin_verse
[ 10,  20,  30;
  40,  50,  60;
  70,  80,  90]

[ 50,  40,  50,  60,  50;
  20,  10,  20,  30,  20;
  50,  40,  50,  60,  50;
  80,  70,  80,  90,  80;
  50,  40,  50,  60,  50]
#+end_verse

*** BORDER_WRAP
#+begin_src cpp
  #include <iostream>
  #include <opencv2/opencv.hpp>

  using namespace cv;
  using namespace std;

  int main() {
    uchar data[] = {10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43};
    Mat m(4, 4, CV_8U, data);
    cout << m << endl;
    copyMakeBorder(m, m, 3, 3, 3, 3, BORDER_WRAP);
    cout << m << endl;

    return 0;
  }
#+end_src

输出如下： 将最远的3行复制平移到top(其它也以此类推)
#+begin_verse
[ 10,  11,  12,  13;
  20,  21,  22,  23;
  30,  31,  32,  33;
  40,  41,  42,  43]

[ 21,  22,  23,  20,  21,  22,  23,  20,  21,  22;
  31,  32,  33,  30,  31,  32,  33,  30,  31,  32;
  41,  42,  43,  40,  41,  42,  43,  40,  41,  42;
  11,  12,  13,  [10,  11,  12,  13],  10,  11,  12;
  21,  22,  23,  [20,  21,  22,  23],  20,  21,  22;
  31,  32,  33,  [30,  31,  32,  33],  30,  31,  32;
  41,  42,  43,  [40,  41,  42,  43],  40,  41,  42;
  11,  12,  13,  10,  11,  12,  13,  10,  11,  12;
  21,  22,  23,  20,  21,  22,  23,  20,  21,  22;
  31,  32,  33,  30,  31,  32,  33,  30,  31,  32]
#+end_verse

** findContours and drawContours
#+begin_src cpp
  #include <iostream>
  #include <opencv2/opencv.hpp>

  using namespace cv;
  using namespace std;

  int main() {
    Mat src = imread("/home/inmove/Desktop/template.png");
    imshow("Source image", src);

    Mat image;
    GaussianBlur(src, image, Size(3, 3), 0);
    // imshow("Gaussian Blur", image);

    Canny(src, image, 100, 250);

    vector<vector<Point>> contours;

    vector<Vec4i> hierarchy;

    findContours(image, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point());
    // findContours(image, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_NONE, Point());

    // 创建一张全黑的点，后面用来保存轮廓
    Mat imageContours = Mat::zeros(image.size(), CV_8UC1);

    // 创建一张全黑的点，后面用来保存拐点
    Mat Contours = Mat::zeros(image.size(), CV_8UC1);
    for (int i = 0; i < contours.size(); i++) {
      for (int j = 0; j < contours[i].size(); j++) {
        Point P = Point(contours[i][j].x, contours[i][j].y);
        // 将拐点描成白色
        Contours.at<uchar>(P) = 255;
      }
      char ch[256];
      drawContours(imageContours, contours, i, Scalar(255), 1, 8, hierarchy);
    }

    imshow("Contours Image", imageContours);
    imshow("Point of Contours", Contours);

    waitKey(0);
    destroyAllWindows();

    return 0;
  }
#+end_src
*** findContours
#+begin_src cpp
  void findContours(InputArray src, OutputArrayOfArrays contours, OutputArray hierarchy, int mode, int method, Point offset=Point());
#+end_src
1. mode:
   1. CV_RETR_EXTERNAL: 只提取外层轮廓
   2. CV_RETR_LIST: 提取所有轮廓，轮廓之间相互独立
   3. CV_RETR_CCOMP: 提取所有轮廓，以两层结构保存轮廓
   4. CV_RETR_TREE: 以一个嵌套的结构保存轮廓
2. method:
   1. CV_CHAIN_APPROX_NONE: 保存物体边界上所有连续的轮廓点到contours向量内
   2. CV_CHAIN_APPROX_SIMPLE: 仅保存轮廓的拐点信息
   3. CV_CHAIN_APPROX_TC89_L1: 用teh-Chinl chain近似算法
   4. CV_CHAIN_APPROX_TC89_KCOS: 用teh-Chinl chain近似算法
3. hierarchy: 一共4个值，都表示索引，含意分别如下，-1表示没有
   1. contours[i]在同一层级结构中的上一条轮廓
   2. 下一条轮廓
   3. 下一层子轮廓
   4. 上一层父轮廓
4. contours: 二维数组，每一个元素由很多点集构成，一个元素就是一个轮廓

*** drawContours
#+begin_src cpp
  void drawContours(InputOutputArray src, InputArrayOfArrays contours, int contourIdx, const Scalar &color, int thickness=1, int lineType=LINE_8, InputArray hierarchy=noArray(), int maxLevel=INT_MAx, Point offset=Point());
#+end_src
