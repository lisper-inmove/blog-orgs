#+TITLE: OpenCV function: matchTemplate
#+DATE: 2025-05-06 20:57:45
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Usage of matchTemplate and its explanation
#+KEYWORDS: OpenCV
#+CATEGORIES: MachineVision

  import cv2
begin_src python
  result = cv2.matchTemplate(image, template, method)
#+end_src

1. image: input image in which to search.
2. template: smaller image you want to find inside the image parameter.
3. method: comparison method.
   1. cv2.TM_CCOEFF: correlation coefficient.
   2. cv2.TM_CCOEFF_NORMED: Normalized CCOEFF
   3. cv2.TM_CCORR: cross correlation
   4. cv2.TM_CCORR_NORMED
   5. cv2.TM_SQDIFF: squared difference
   6. cv2.TM_SQDIFF_NORMED
4. result: a 2D array of comparison scores.

* Signals

The /signals/ are just pixel values from 2D arrays.
OpenCV slides the template over every (x, y) position of the input image.
At each position:
1. extracts a region from the image (same size of the template)
2. the region is the *input signals* for thet position
3. the template is the *reference signals*

For example, the template[0][0] is a signal, it's values range from [0, 255],
0 represent Black,
255 for white
Grayscale values in between
#+begin_src python
  template = np.array([[100, 150],
                       [200, 250]])

  image = np.array([[ 90, 140, 110],
                    [190, 240, 210],
                    [130, 170, 160]])

  """
    when  x = 1, y = 1, then input signals are
       [[240, 210], [170, 160]]
    The template signals always are:
       [[110, 150], [200, 250]]
  """
#+end_src

* What is correlation coefficient
Correlation coefficient is a statistical measure that tells you how *linearly related* two images of values are, ignoring their average brightness.

#+attr_formula:
#+begin_src latex
  \[
  R(x, y) = \sum_{i,j} \left( T(i,j) - \bar{T} \right) \cdot \left( I(x+i, y+j) - \bar{I}_{x,y} \right)
  \]
#+end_src
cv2.TM_CCOEFF: higher sum, more similarity.
1. Value of template[i][j] minus average of template
2. Value of region[i][j] minus average of the region
3. Calculate the two values
4. Sum all the products.

Use cv2.TM_CCOEFF when you want to match the structural pattern of a template against an image region, while ignoring differences in brightness (mean intensity).

#+attr_formula:
#+begin_src latex
  \[
  R(x, y) = \frac{
    \sum_{i,j} \left( T(i,j) - \bar{T} \right) \cdot \left( I(x+i, y+j) - \bar{I}_{x,y} \right)
  }{
    \sqrt{
      \sum_{i,j} \left( T(i,j) - \bar{T} \right)^2 \cdot
      \sum_{i,j} \left( I(x+i, y+j) - \bar{I}_{x,y} \right)^2
    }
  }
  \]
#+end_src

cv2.TM_CCOEFF_NORMED: normalize TM_CCOEFF result to [-1, 1]
  1. 1.0,perfect positive correlation
  2. 0.0,no correlation
  3. -1.0,perfect negative correlation

* What is cross-correlation
#+attr_formula:
#+begin_src latex
  \[
  R(x, y) = \sum_{i,j} T(i,j) \cdot I(x+i, y+j)
  \]
#+end_src
#+attr_formula:
#+begin_src latex
  \[
  R(x, y) = \frac{ \sum_{i,j} T(i,j) \cdot I(x+i, y+j) }
  { \sqrt{ \sum_{i,j} T(i,j)^2 \cdot \sum_{i,j} I(x+i, y+j)^2 } }
  \]
#+end_src
1. Multiply corresponding pixels in the template and image region.
2. Add them all up.
3. Store that sum in a result matrix. The sum reflects how similar the region is to the template - *higher values mean more similarity*

This method is biased towards brightness

* What is squared differencee
#+attr_formula:
#+begin_src latex
  \[
  R(x, y) = \sum_{i,j} \left( T(i,j) - I(x+i, y+j) \right)^2
  \]
#+end_src
#+attr_formula:
#+begin_src latex
  \[
  R(x, y) = \frac{ \sum_{i,j} \left( T(i,j) - I(x+i, y+j) \right)^2 }
  { \sqrt{ \sum_{i,j} T(i,j)^2 \cdot \sum_{i,j} I(x+i, y+j)^2 } }
  \]
#+end_src

How defferent two image regions.
TM_SQDIFF: Sum of Distance of signals, so that lower is better.
TM_SQDIFF_NORMED: Normalized values to range [-1, 1]
    1. 1.0, exact opposite
    2. 0.0: unrelated
    3. -1.0: perfect match

* Formulas
Convert this latex source code to pdf, you can see all the formulas for threes kinds of methods.
#+begin_src latex :results silent :noweb yes
  \documentclass{article}
  \usepackage{amsmath}
  \begin{document}

  \section*{OpenCV Template Matching Formulas}

  \subsection*{1. TM\_SQDIFF (Squared Difference)}
  \[
  R(x, y) = \sum_{i,j} \left( T(i,j) - I(x+i, y+j) \right)^2
  \]

  \subsection*{2. TM\_CCORR (Cross Correlation)}
  \[
  R(x, y) = \sum_{i,j} T(i,j) \cdot I(x+i, y+j)
  \]

  \subsection*{3. TM\_CCOEFF (Correlation Coefficient)}
  \[
  R(x, y) = \sum_{i,j} \left( T(i,j) - \bar{T} \right) \cdot \left( I(x+i, y+j) - \bar{I}_{x,y} \right)
  \]

  \subsection*{4. TM\_SQDIFF\_NORMED (Normalized Squared Difference)}
  \[
  R(x, y) = \frac{ \sum_{i,j} \left( T(i,j) - I(x+i, y+j) \right)^2 }
  { \sqrt{ \sum_{i,j} T(i,j)^2 \cdot \sum_{i,j} I(x+i, y+j)^2 } }
  \]

  \subsection*{5. TM\_CCORR\_NORMED (Normalized Cross Correlation)}
  \[
  R(x, y) = \frac{ \sum_{i,j} T(i,j) \cdot I(x+i, y+j) }
  { \sqrt{ \sum_{i,j} T(i,j)^2 \cdot \sum_{i,j} I(x+i, y+j)^2 } }
  \]

  \subsection*{6. TM\_CCOEFF\_NORMED (Normalized Correlation Coefficient)}
  \[
  R(x, y) = \frac{
  \sum_{i,j} \left( T(i,j) - \bar{T} \right) \cdot \left( I(x+i, y+j) - \bar{I}_{x,y} \right)
  }{
  \sqrt{
  \sum_{i,j} \left( T(i,j) - \bar{T} \right)^2 \cdot
  \sum_{i,j} \left( I(x+i, y+j) - \bar{I}_{x,y} \right)^2
  }
  }
  \]

  \end{document}
#+end_src

* Examples
#+begin_src python
  import cv2

  image = "/home/inmove/Desktop/img20250319121444287104temp.png"
  image = cv2.imread(image)
  template = cv2.imread("/home/inmove/Desktop/template.png")

  image1 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  template1 = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)

  result = cv2.matchTemplate(image1, template1, cv2.TM_CCOEFF_NORMED)
  (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(result)
  start_x, start_y = maxLoc
  end_x = start_x + template.shape[1]
  end_y = start_y + template.shape[0]
  cv2.rectangle(image, (start_x, start_y), (end_x, end_y), (255, 0, 0), 3)
  image = cv2.resize(image, (1024, 1024))
  cv2.imshow("image", image)
  cv2.waitKey()
  cv2.destroyAllWindows()
#+end_src
