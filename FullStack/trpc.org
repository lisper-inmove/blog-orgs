#+DATE: 2024-03-03 00:09:42
#+TITLE: tRPC setup
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: tRPC setup with Next.Js 14 and MongoDB
#+KEYWORDS: tRPC typescript NextJs
#+CATEGORIES: Typescript FullStack

* What's tRPC
[[https://trpc.io/][tRPC Home]]

tRPC stands for TypeScript RPC (Remote Procedure Call), and it's a framework for building efficient and type-safe communication between services or microservices in TypeScript-based projects.
It's particularly popular in Node.js environments.

props:
1. *Type Safety*: Being built on TypeScript, tRPC provides strong typing capabilities, ensuring that your code is type-safe, reducing the likelihood of runtime errors related to type mismatches.
2. *Efficiency*: tRPC aims to optimize communication between services, offering features like batched requests and smart caching to improve performance and reduce network overhead.
3. *Ease of Use*: It comes with a simple and intuitive API, making it easy to get started with and integrate into existing projects.
4. *Flexibility*: tRPC allows you to define your APIs using a variety of transport mechanisms, including HTTP, WebSockets, and more. This flexibility enables you to choose the most suitable option for your project's requirements.
5. *Scalability*: By facilitating efficient communication between services, tRPC can contribute to the scalability of your application architecture, making it easier to manage and scale as your project grows.

cons:
1. *Learning Curve*: While tRPC aims to provide a simple and intuitive API, there might still be a learning curve, especially for developers who are new to TypeScript or RPC concepts.e
2. *Dependency*: Introducing a new framework like tRPC into your project adds another dependency, which could potentially increase complexity and maintenance overhead.
3. *Community and Ecosystem*: Compared to more established frameworks, tRPC might have a smaller community and ecosystem of plugins and extensions, which could limit the available resources and support options.
4. *Integration Challenges*: Depending on your existing infrastructure and tooling, integrating tRPC into your project might require some adjustments and configuration, which could introduce challenges or compatibility issues.

* Key Concepts
| Term           | Description                                                                                                  |
|----------------+--------------------------------------------------------------------------------------------------------------|
| *Procedure*    | API endpoint - can be a query, mutation, or subscription.                                                    |
| *Query*        | A procedure that gets some data.                                                                             |
| *Mutation*     | A procedure that creates, updates, or deletes some data.                                                     |
| *Subscription* | procedure that creates a persistent connection and listens to changes.                                       |
| *Router*       | A collection of procedures (and/or other routers) under a shared namespace.                                  |
| *Context*      | Stuff that every procedure can access. Commonly used for things like session state and database connections. |
| *Middleware*   | A function that can run code before and after a procedure. Can modify context.                               |
| *Validation*   | "Does this input data contain the right stuff?"                                                              |

* install dependences
#+begin_src shell
  npm install mongoose @trpc/client @trpc/server zod @trpc/next @tanstack/react-query@4.18.0 @trpc/react-query superjson
#+end_src

This is my current package.json
#+begin_src json
  {
    "name": "learning_react",
    "version": "0.1.0",
    "private": true,
    "scripts": {
      "dev": "next dev",
      "build": "next build",
      "start": "next start",
      "lint": "next lint"
    },
    "dependencies": {
      "@tanstack/react-query": "^4.18.0",
      "@trpc/client": "^10.45.1",
      "@trpc/next": "^10.45.1",
      "@trpc/react-query": "^10.45.1",
      "@trpc/server": "^10.45.1",
      "clsx": "^2.1.0",
      "framer-motion": "^11.0.6",
      "mongoose": "^8.2.0",
      "next": "14.1.0",
      "react": "^18",
      "react-dom": "^18",
      "superjson": "^2.2.1",
      "tailwind-merge": "^2.2.1",
      "zod": "^3.22.4"
    },
    "devDependencies": {
      "@types/node": "^20",
      "@types/react": "^18",
      "@types/react-dom": "^18",
      "autoprefixer": "^10.0.1",
      "eslint": "^8",
      "eslint-config-next": "14.1.0",
      "postcss": "^8",
      "tailwindcss": "^3.3.0",
      "typescript": "^5"
    }
  }
#+end_src

* mongoose setup
#+NAME: .env
#+begin_src ini
  MONGODB_URI=mongodb://localhost:27018
#+end_src

#+NAME: src/db/mongodb-client.ts
#+begin_src typescript
  import mongoose from "mongoose";
  declare global {
    var mongoose: any;
  }

  const MONGODB_URI = process.env.MONGODB_URI!;

  if (!MONGODB_URI) {
    throw new Error(
      "Please define the MONGODB_URI environment variable inside .env",
    );
  }

  let cached = global.mongoose;

  if (!cached) {
    cached = global.mongoose = { conn: null, promise: null };
  }

  async function dbConnect() {
    if (cached.conn) {
      return cached.conn;
    }
    if (!cached.promise) {
      const opts = {
        bufferCommands: false,
      };
      cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
        return mongoose;
      });
    }
    try {
      cached.conn = await cached.promise;
    } catch (e) {
      cached.promise = null;
      throw e;
    }

    return cached.conn;
  }

  export default dbConnect;

#+end_src

* user-model
#+NAME: src/models/user-model.ts
#+begin_src typescript
  import mongoose from "mongoose";

  export interface User {
    name: string;
    email: string;
    password: string;
  }

  export interface MongoUser extends User, mongoose.Document {}

  export type TUser = User & {
    _id: string;
    createdAt: string;
    updatedAt: string;
  };

  const UserSchema = new mongoose.Schema<User>({
    name: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
    },
    password: {
      type: String,
      required: true,
    },
  });

  export default mongoose.models.User || mongoose.model<User>("User", UserSchema);
#+end_src

* trpc config
[[https://trpc.io/docs/server/context][tRPC Context]]
Your context holds data that all of your tRPC procedures will have access to, and is a great place to put things like database connections or authentication information.
Context can be an object or a function that return an object.
#+NAME: src/trpc-config/context.ts
#+begin_src typescript
  import dbConnect from "@/db/mongodb-client";

  export interface ContextType {
    connect: any;
    version: string;
    request?: Request;
  }

  export const createContext = async (req?: Request) => {
    let connect = await dbConnect();

    return {
      connect,
      version: "123",
      request: req,
    };
  };
#+end_src

#+NAME: src/trpc-config/index.ts
#+begin_src typescript
  import { initTRPC } from "@trpc/server";
  import superjson from "superjson";
  import { ContextType } from "./context";

  const t = initTRPC.context<Promise<ContextType>>().create({
    transformer: superjson,
  });

  export const createCallerFactory = t.createCallerFactory;
  export const router = t.router;
  export const publicProcedure = t.procedure;
#+end_src

#+NAME: src/trpc-config/routers/user-router.ts
#+begin_src typescript
  import { publicProcedure, router } from "..";
  import userModel, { TUser } from "@/models/user-model";
  import { z } from "zod";

  export const userRouter = router({
    createUser: publicProcedure
      .input((v) => {
        const schema = z.object({
          name: z.string(),
          email: z.string().email(),
          password: z.string(),
        });
        const result = schema.safeParse(v);
        if (!result.success) {
          throw result.error;
        }
        return result.data;
      })
      .mutation(async ({ input, ctx }) => {
        let c = await ctx;
        console.log(c.request?.headers);
        const user: TUser = await userModel.create({
          ...input,
        });
        return {
          user,
        };
      }),

    getUser: publicProcedure.query(async (opts) => {
      // opts.ctx.then(({ connect, version }: ContextType) => {
      //   console.log(connect, version);
      // });

      // let connect = (await opts.ctx).connect;
      // console.log(connect);

      const users: TUser[] = await userModel.aggregate([
        {
          $project: {
            name: 1,
            email: 1,
            _id: {
              $toString: "$_id",
            },
          },
        },
      ]);
      return users;
    }),
  });
#+end_src

#+NAME: src/trpc-config/router.ts
#+begin_src typescript
  import { router } from "./index";
  import { userRouter } from "./routers/user-router";

  export const appRouter = router({
    userRouter: userRouter,
  });

  export type AppRouter = typeof appRouter;
#+end_src

#+NAME: src/trpc-config/client.ts
#+begin_src typescript
  import { AppRouter } from "@/trpc-config/router";
  import { createTRPCReact } from "@trpc/react-query";

  // use client
  export const clientTrpc = createTRPCReact<AppRouter>({});
#+end_src

#+NAME: src/trpc-config/server-client.ts
#+begin_src typescript
  import { appRouter } from "@/trpc-config/router";
  import { createCallerFactory } from ".";
  import { createContext } from "./context";
  const createCaller = createCallerFactory(appRouter);
  // use server
  export const serverClientTrpc = createCaller(createContext());
#+end_src

* nextjs trpc router
#+NAME: src/app/api/trpc/[trpc]/route.ts
#+begin_src typescript
  import { createContext } from "@/trpc-config/context";
  import { appRouter } from "@/trpc-config/router";
  import { fetchRequestHandler } from "@trpc/server/adapters/fetch";

  const handler = (req: Request) => {
    return fetchRequestHandler({
      endpoint: "/api/trpc",
      req,
      router: appRouter,
      createContext: async () => await createContext(req),
    });
  };

  export { handler as GET, handler as POST };
#+end_src

* trpc provider

#+begin_src conf
  /** @type {import('next').NextConfig} */
  const nextConfig = {
    reactStrictMode: false,
    basePath: '/learning_react',
  };

  export default nextConfig;
#+end_src

Becase i have set nextConfig.basePath to learning_react, so that here, url must use the learning_react as prefix

#+NAME: src/trpc-config/provider.tsx
#+begin_src typescript
  "use client";

  import React, { ReactNode, useState } from "react";
  import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
  import { httpBatchLink } from "@trpc/client";
  import superjson from "superjson";
  import { clientTrpc } from "./client";

  const url = "http://192.168.3.124:3000/learning_react/api/trpc";

  export const Provider = ({ children }: { children: ReactNode }) => {
    const [queryClient] = useState(
      () =>
        new QueryClient({
          defaultOptions: {
            queries: {
              refetchOnWindowFocus: false,
            },
          },
        }),
    );

    const client = clientTrpc.createClient({
      transformer: superjson,
      links: [
        httpBatchLink({
          url: url,
        }),
      ],
    });

    return (
      <clientTrpc.Provider client={client} queryClient={queryClient}>
        <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
      </clientTrpc.Provider>
    );
  };
#+end_src

#+NAME: src/app/layout.tsx
#+begin_src typescript
  import type { Metadata } from "next";
  import { Inter } from "next/font/google";
  import "./globals.css";
  import { Provider } from "@/trpc-config/provider";

  const inter = Inter({ subsets: ["latin"] });

  export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
  };

  export default function RootLayout({
    children,
  }: Readonly<{
    children: React.ReactNode;
  }>) {
    return (
      <html lang="en">
        <Provider>
          <body className={inter.className}>{children}</body>
        </Provider>
      </html>
    );
  }
#+end_src

* use in client side
#+NAME: src/app/trpc-test/client/page.tsx
#+begin_src typescript
  "use client";

  import { clientTrpc } from "@/trpc-config/client";

  const CreateUser = () => {
    const { data, mutate } = clientTrpc.userRouter.createUser.useMutation();
    const users = clientTrpc.userRouter.getUser.useQuery();
    console.log(users.data);

    return (
      <button
        onClick={() =>
          mutate({ name: "test", email: "test@gmail.com", password: "123456" })
        }
      >
        Create User
      </button>
    );
  };

  export default CreateUser;
#+end_src

* use in server side
#+NAME: src/app/trpc-test/server/page.tsx
#+begin_src typescript
  import { serverClientTrpc } from "@/trpc-config/server-client";

  const Page = async () => {
    const users = await serverClientTrpc.userRouter.getUser();

    return (
      <>
        <div>Hello trpc</div>
        {users.map((user) => (
          <div key={user.email}>
            <p>
              {user.name} -- {user.email}
            </p>
          </div>
        ))}
      </>
    );
  };

  export default Page;
#+end_src
