#+TITLE: Use Hook
#+DATE: 2024-03-07 20:17:19
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Use hook in reactjs
#+KEYWORDS: useState useReducer useContext useRef useMemo useCallback forwardRef useEffect useTransition useLayoutEffect useDeferred
#+CATEGORIES: FullStack ReactJs

* useState

Every =setX= function will cause a page re-render.
The new value will be valid in the next render.
For example every time we call =setCount(count + 1)=, in the current page render, value of count is stay the same, till next render, the count will be the new value.

#+begin_src typescript
  "use client";
  import { Button } from "@/components/ui/button";
  import { MinusCircle, PlusCircle } from "lucide-react";
  import { useState } from "react";

  function initCount() {
    console.log("init count");
    return 0;
  }

  export default function UseStateHooks() {
    // Init with a constant value
    // const [count, setCount] = useState(0);

    // Init with a function
    const [count, setCount] = useState(initCount);

    // Init with an arrow function
    // const [count, setCount] = useState(() => {
    //   console.log("init count");
    //   return 0;
    // });

    // Use an object as state
    const [state, setState] = useState({ count: 1, theme: "blue" });

    function decrease() {
      setCount((prevCount) => {
        console.log(prevCount);
        return count - 1;
      });
    }

    function increase() {
      // setCount(count + 1);
      // setCount(count + 1);
      // Even we call setCount twice, count value only increase one
      // Because Every time, count value is current value.

      setCount((prevCount) => {
        let value = prevCount + 1;
        return value;
      });
    }

    return (
      <div className="flex text-3xl text-center items-center w-[100vw] h-[100vh] justify-center text-gray-300">
        <Button onClick={decrease} className="text-muted-foreground">
          <MinusCircle></MinusCircle>
        </Button>
        <p className="text-gray-700">{count}</p>
        <Button onClick={increase}>
          <PlusCircle></PlusCircle>
        </Button>
      </div>
    );
  }
#+end_src

#+ATTR_HTML: :width 50% :height 100 :align left
#+begin_iframe
[[https://inmove.top/learning_react/hooks/use-state-hook][useState]]
#+end_iframe

* useReducer

useReducer is a plus useState
Mostly useState is used in base types such as int float boolean.
useReducer is used in composite types, so that we can combine all the modify functions together.

#+begin_src typescript
  "use client";
  import { Button } from "@/components/ui/button";
  import { useReducer } from "react";

  interface State {
    id: string;
    name: string;
    count: number;
    jobs: string[];
  }

  interface Action {
    type: "increment" | "decrement" | "add-job" | "remove-job";
    job: string;
  }

  function reducer(state: State, action: Action) {
    switch (action.type) {
      case "increment":
        return { ...state, count: state.count + 1 };
      case "decrement":
        return { ...state, count: state.count - 1 };
      case "add-job":
        state.jobs.push(action.job);
        return { ...state };
      case "remove-job":
        return { ...state, jobs: state.jobs.filter((job) => job != action.job) };
    }
  }

  export default function UseReducerHook() {
    let [state, dispatch] = useReducer(reducer, {
      id: "123",
      name: "inmove",
      count: 1,
      jobs: ["a", "b"],
    });
    return (
      <>
        <div className="flex flex-col gap-5">
          <div className="flex gap-5">
            <div>{state.id}</div>
            <div>{state.name}</div>
            <div>{state.count}</div>
            <div>{state.jobs}</div>
          </div>
          <div className="flex gap-5">
            <Button
              onClick={() => dispatch({ type: "increment", job: "a" })}
              className="mr-4"
            >
              increment
            </Button>
            <Button
              onClick={() => dispatch({ type: "decrement", job: "b" })}
              className="mr-4"
            >
              decrement
            </Button>
            <Button
              onClick={() => dispatch({ type: "add-job", job: "c" })}
              className="mr-4"
            >
              add-job-c
            </Button>
            <Button
              onClick={() => dispatch({ type: "remove-job", job: "c" })}
              className="mr-4"
            >
              remove-job-c
            </Button>
          </div>
        </div>
      </>
    );
  }
#+end_src
#+ATTR_HTML: :width 80% :height 100 :align left
#+begin_iframe
[[https://inmove.top/learning_react/hooks/use-reducer][useReducer]]
#+end_iframe
* useContext

This example, we have four files.
1. user-context.tsx is used to define the context provider.
2. page-a.tsx get user use useContext and display user info.
3. page-b.tsx update user info.
4. page.tsx this is a nextjs page, used for organize this two pages.

#+NAME: user-context.tsx
#+begin_src typescript
  import { createContext, useContext, ReactNode, useState } from "react";

  type User = {
    id: string;
    name: string;
    money: number;
  };

  type UserContextType = {
    user: User;
    setMoney: (money: number) => void;
  };

  const UserContext = createContext<UserContextType | undefined>(undefined);

  export function useUserContext() {
    const context = useContext(UserContext);
    if (context === undefined) {
      throw new Error("User Must not be Undefined ");
    }
    return context;
  }

  export function UserContextProvider({ children }: { children: ReactNode }) {
    // or pass user as parameter
    let [user, setUser] = useState({
      id: "1",
      name: "inmove",
      money: 0,
    });
    function setMoney(money: number) {
      const _money = user.money + money;
      setUser({ ...user, money: _money });
    }
    let contextValue: UserContextType = {
      user: user,
      setMoney: setMoney,
    };
    return (
      <UserContext.Provider value={contextValue}>{children}</UserContext.Provider>
    );
  }

#+end_src

#+NAME: page-a.tsx
#+begin_src typescript
  "use client";
  import { useUserContext } from "./user-context";

  export default function PageA() {
    const { user } = useUserContext();
    return (
      <>
        This is in pageA:
        {user.name} has money: {user.money}
      </>
    );
  }

#+end_src

#+NAME: page-b.tsx
#+begin_src typescript
  "use client";
  import { Button } from "@/components/ui/button";
  import { useUserContext } from "./user-context";
  import { BadgePlus } from "lucide-react";

  export default function PageB() {
    const { user, setMoney } = useUserContext();
    return (
      <>
        this is in pageB:
        <Button
          onClick={() => setMoney(1)}
          className="bg-white w-10 h-10"
          variant={"ghost"}
        >
          <BadgePlus className="h-12 w-12 text-red-600" />
        </Button>
      </>
    );
  }

#+end_src

#+NAME: page.tsx
#+begin_src typescript
  "use client";
  import PageB from "./page-b";
  import PageA from "./page-a";
  import { UserContextProvider } from "./user-context";

  export default function UseContextDemo() {
    return (
      <UserContextProvider>
        <PageA></PageA>
        <br />
        <PageB></PageB>
      </UserContextProvider>
    );
  }
#+end_src

#+ATTR_HTML: :width 80% :height 100 :align left
#+begin_iframe
[[https://inmove.top/learning_react/hooks/use-context-hook][useContext]]
#+end_iframe

* useRef
Everytime we change the value of the input, the inputRef.current.value will be changed, but the page is not re-rendered.
The different from useState is that, new value can be used in current render.
#+begin_src typescript
  "use client";
  import { Button } from "@/components/ui/button";
  import { Input } from "@/components/ui/input";
  import { Label } from "@/components/ui/label";
  import { useRef, useState } from "react";

  export default function UseRefHook() {
    // Value change and re-render the component.
    const [count, setCount] = useState(0);
    // Value change not cause re-render the component
    const refCount = useRef(0);
    // Value init to 0, every re-render.
    const inputRef = useRef<HTMLInputElement | null>(null);

    function decrease() {
      setCount(count + 1);
      refCount.current++;
    }

    function onChange() {
      console.log(inputRef.current?.value);
    }

    return (
      <>
        <Button onClick={decrease}>Add</Button>
        {count} -- {refCount.current} -- {inputRef.current?.value}
        <br />
        <Label htmlFor="text">
          Input Something, it can display in next render
        </Label>
        <Input
          ref={inputRef}
          onChange={onChange}
          type="text"
          placeholder="TypeSomething"
        ></Input>
      </>
    );
  }

#+end_src

* useMemo

If a heavy function will be called every render.
We should wrap it with the useMemo hook.

In this example, only when flag change, the aHeavyFunction will be called.
When i press 'Set Flag' button, the page is freezed, the results of the Plus button cannot be instantly reflected on the page.

The [[https://inmove.top/learning_react/hooks/use-memo-hook][useMemo]] will pending the post page. So i put just the link here.

#+begin_src typescript
  "use client";
  import { Button } from "@/components/ui/button";
  import { useMemo, useRef, useState } from "react";

  export default function UseMemoHook() {
    let [count, setCount] = useState(0);
    let [value, setValue] = useState(0);
    let [flag, setFlag] = useState(false);
    let seed = useRef(0);

    useMemo(() => {
      console.log(flag);
      setValue(aHeavyFunction() + seed.current);
    }, [flag]);
    seed.current += 1;

    return (
      <>
        <div className="flex flex-col gap-5">
          <p>
            {" "}
            {count} --- {value}
          </p>
          <Button onClick={() => setCount(count + 1)}>Plus</Button>
          <Button onClick={() => setFlag(!flag)}>Set Flag</Button>
        </div>
      </>
    );
  }

  function aHeavyFunction() {
    let value = 0;
    let loopCount = 3000000000;
    for (let i = 0; i <= loopCount; i++) {
      value = i;
    }
    return value;
  }
#+end_src
* useCallback
#+NAME: search-component.tsx
#+begin_src typescript
  import { Input } from "@/components/ui/input";
  import { memo } from "react";

  type cb = (text: string) => void;

  interface SearchProps {
    callback: cb;
  }

  function Search({ callback }: SearchProps) {
    console.log("re-rendered", callback);
    return (
      <Input
        onChange={(e) => callback(e.target.value)}
        placeholder="input a name"
      ></Input>
    );
  }

  export default memo(Search);
#+end_src

#+NAME: page.tsx
#+begin_src typescript
  "use client";

  import { useCallback, useState } from "react";
  import { Button } from "@/components/ui/button";
  import SearchComponent from "./search-component";

  function shuffle<T>(array: T[]): T[] {
    for (let i = array.length - 1; i > 0; i--) {
      // Generate random index
      const j = Math.floor(Math.random() * (i + 1));
      // Swap elements at indices i and j
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  const allUsers = ["inmove", "john", "alex", "george", "simon", "james"];
  export default function UseCallbackHook() {
    const [users, setUsers] = useState(allUsers);

    // Every Time users changed, this Component re-rendered, the handleSearch function will be different
    // const handleSearch = (text: string) => {
    //   console.log(users);
    //   const filteredUsers = allUsers.filter((user) => user.includes(text));
    //   setUsers(filteredUsers);
    // };

    // When the dependency changed, the handleSeach will be changed.
    const handleSearch = useCallback(
      (text: string) => {
        console.log(users);
        const filteredUsers = allUsers.filter((user) => user.includes(text));
        setUsers(filteredUsers);
      },
      [users],
    );

    function shuffleUsers() {
      setUsers(shuffle([...users]));
    }

    return (
      <>
        <div className="flex flex-col gap-5">
          <SearchComponent callback={handleSearch} />
          <Button onClick={() => shuffleUsers()}>shuffle</Button>
          <div>
            <ul>
              {users.map((user) => {
                return <li key={user}>{user}</li>;
              })}
            </ul>
          </div>
        </div>
      </>
    );
  }
#+end_src
#+ATTR_HTML: :width 80% :height 300 :align left
#+begin_iframe
[[https://inmove.top/learning_react/hooks/use-callback-hook][useCallback]]
#+end_iframe
* useMemo VS useCalback
*useMemo* is used to /memoize ("remember") the result of a function/. It will only recompute the memoized value when one of its dependencies has changed. This optimization helps to avoid expensive calculations on every render.

*useCallback* is used to /memoize functions/ themselves. This hook will return a memoized version of the callback function that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders.
* forwardRef

forwardRef is used to expose child component to its parent.
For example, ForwardRefDemo is parent of Counter, Counter is parent of Input.
We pass a ref(init to null) to Counter, in Counter we bind it to Input.
Just like "pass address reference" in c programming language.
So that, we can initialize the ref in the child component, and use it in parent component.

#+NAME: page.tsx
#+begin_src typescript
  "use client";

  import { useRef } from "react";
  import Counter from "./child";
  import { Button } from "@/components/ui/button";

  export default function ForwardRefDemo() {
    const ref = useRef<HTMLInputElement | null>(null);
    function getInputValue() {
      console.log(ref.current?.value);
    }
    return (
      <>
        <Counter ref={ref}></Counter>
        <Button onClick={getInputValue}>Get Input Value</Button>
      </>
    );
  }

#+end_src

#+NAME: child.tsx
#+begin_src typescript
  "use client";
  import { Input } from "@/components/ui/input";
  import { Ref, forwardRef, useImperativeHandle } from "react";

  function Counter(props: {}, ref: Ref<HTMLInputElement>) {
    return (
      <>
        <div>
          <Input ref={ref} placeholder="input something" />
        </div>
      </>
    );
  }

  export default forwardRef(Counter);
#+end_src

Press the button, and see console.log
#+ATTR_HTML: :width 80% :height 100 :align left
#+begin_iframe
[[https://inmove.top/learning_react/forward-ref][forward-ref]]
#+end_iframe

** useImperativeHandle

In previous example, we put the ref to an Input.
This example, the ref has no reference component, we use the useImperativeHandle to init the ref.

#+NAME: page.tsx
#+begin_src typescript
  "use client";
  import { useRef } from "react";
  import Counter, { CounterRef } from "./counter";
  import { Button } from "@/components/ui/button";

  export default function UseImperativeHandleHook() {
    const counterRef = useRef<CounterRef | null>(null);
    return (
      <>
        <div className="flex gap-5 items-center">
          <Counter ref={counterRef} />
          <div>
            <Button onClick={() => counterRef.current?.reset()}>Reset</Button>
          </div>
        </div>
      </>
    );
  }

#+end_src

#+NAME: counter.tsx
#+begin_src typescript
  import { Button } from "@/components/ui/button";
  import { forwardRef, Ref, useImperativeHandle, useState } from "react";

  export interface CounterRef {
    reset: () => void;
  }

  function Counter(props: {}, ref: Ref<CounterRef>) {
    let [count, setCount] = useState(1);

    function reset() {
      setCount(0);
    }

    useImperativeHandle(ref, () => {
      return {
        reset: reset,
      };
    });

    return (
      <>
        <div className="flex gap-5 items-center">
          <Button onClick={() => setCount(count + 1)}>Incr</Button>
          <Button onClick={() => setCount(count - 1)}>Decr</Button>
          <p>{count}</p>
        </div>
      </>
    );
  }

  export default forwardRef(Counter);
#+end_src
#+ATTR_HTML: :width 80% :height 100 :align left
#+begin_iframe
[[https://inmove.top/learning_react/hooks/use-imperative-handle-hook][useImperativeHandle]]
#+end_iframe

* useEffect

=useEffect= will be called after the component rendered successfully.

Here are three kinds of usage of useEffect.
1. Empty dependency array: Run only once. Run the useEffect code bloc when the component mounted.
2. No dependency array: Run every render time.
3. Not empty: Run when any variable in the dependency array changed.

The return value is optional, and it must be a function, this function will be called when the component disposed.

#+begin_src typescript
  "use client";
  import { Button } from "@/components/ui/button";
  import { useEffect, useState } from "react";

  export default function UseEffectHook() {
    // useEffect(() => {
    //   // 1. Code that runs here

    //   // 2. Optional return value. It's must be a function
    //   // Return value will be called when the component destroied.
    // }, []);
    // // 3. Dependency array
    // //    1. Empty array. Run only the component mounted.
    // //    2. No Dependency array.
    // //    3. Array that not empty. Called whatever element changed.

    const [count, setCount] = useState(0);
    const [count2, setCount2] = useState(0);

    useEffect(() => {
      console.log("Run Only Once Component Mounted");
      return () => {
        console.log("First useEffect dispose");
      };
    }, []);

    useEffect(() => {
      console.log("Run After Any State Changed");
      return () => {
        console.log("Second useEffect dispose");
      };
    });

    useEffect(() => {
      console.log("Run Only After Count Changed", count);
      return () => {
        console.log("Third useEffect dispose");
      };
    }, [count]);

    function decrease() {
      setCount((prevCount) => {
        return prevCount - 1;
      });
    }

    function increase() {
      setCount((prevCount) => {
        return prevCount + 1;
      });
    }

    function decrease2() {
      setCount2((prevCount) => {
        return prevCount - 1;
      });
    }

    function increase2() {
      setCount2((prevCount) => {
        return prevCount + 1;
      });
    }

    return (
      <>
        <div className="flex flex-col gap-5">
          <div className="flex gap-5">
            <Button onClick={decrease}>Minus</Button>
            <p>{count}</p>
            <Button onClick={increase}>Plus</Button>
          </div>
          <div className="flex gap-5">
            <Button onClick={decrease2}>Minus2</Button>
            {count2}
            <Button onClick={increase2}>Plus2</Button>
          </div>
        </div>
      </>
    );
  }
#+end_src

Observe the console log when press the button.
#+ATTR_HTML: :width 80% :height 200 :align left
#+begin_iframe
[[https://inmove.top/learning_react/hooks/use-effect][useEffect]]
#+end_iframe

* useTransition

Problem useTransition solve:
When select post(a slow action), all tabs are pending,
Without the useTransition, there is no reaction before the post button success.
With useTransition, when we press About or Contact before Posts success, content of Posts will be discard

#+NAME: page.tsx
#+begin_src typescript
  "use client";
  import { useState, useTransition } from "react";
  import AboutTab from "./about-tab";
  import ContactTab from "./contact-tab";
  import PostTab from "./post-tab";
  import { Button } from "@/components/ui/button";

  export default function UseTransitionHook() {
    const [isPending, startTransition] = useTransition();
    const [tab, setTab] = useState("about");

    function selectTab(name: string) {
      // setTab(name);
      startTransition(() => {
        setTab(name);
      });
    }

    if (isPending) {
      console.log("Loading...");
    }

    return (
      <>
        <div className="flex flex-col gap-5">
          <div className="flex gap-5">
            <Button onClick={() => selectTab("about")}>About</Button>
            <Button onClick={() => selectTab("post")}>Post</Button>
            <Button onClick={() => selectTab("contact")}>Contact</Button>
          </div>

          <div className="flex gap-5">
            {!isPending && tab === "about" && <AboutTab />}
            {!isPending && tab === "post" && <PostTab />}
            {!isPending && tab === "contact" && <ContactTab />}
          </div>
        </div>
      </>
    );
  }
#+end_src

#+NAME: about-tab.tsx
#+begin_src typescript
  export default function AboutTab() {
    return <>About Tab</>;
  }

#+end_src

#+NAME: contact-tab.tsx
#+begin_src typescript
  export default function ContactTab() {
    return <>Contact Me: lisper.inmove@gmail.com</>;
  }
#+end_src

#+NAME: post-tab.tsx
#+begin_src typescript
  export default function PostTab() {
    let items = [];
    for (let i = 0; i < 2000; i++) {
      items.push(<SlowPost key={i} index={i} />);
    }
    return <ul>{items}</ul>;
  }

  function SlowPost({ index }: { index: number }) {
    let startTime = performance.now();
    while (performance.now() - startTime < 1) {}

    return <li className="block mb-4">Post #{index + 1}</li>;
  }
#+end_src
#+ATTR_HTML: :width 80% :height 100 :align left
#+begin_iframe
[[https://inmove.top/learning_react/hooks/use-transition-hook][useTransition]]
#+end_iframe

* useLayoutEffect

useLayoutEffect is the synchronize version of useEffect.

When we press the button:
If we use the useEffect hook, 200ms latter we can see that count change first, another 200ms latter the name change.
If we use the useLayoutEffect hook, 400ms latter we can see that name and count change.
Becasue useLayoutEffect will freeze the component, when setName be called, the rendered disrupted, another re-render will start finally refresh name and count

#+begin_src typescript
  "use client";
  import { Button } from "@/components/ui/button";
  import { useEffect, useLayoutEffect, useState } from "react";

  export default function UseLayoutEffectHook() {
    const [count, setCount] = useState(0);
    const [name, setName] = useState("");

    function increase() {
      setCount((prevCount) => {
        return prevCount + 1;
      });
    }

    console.log("before heavy action");

    let now = performance.now();
    while (performance.now() - now < 200) {}

    // useEffect(() => {
    //   setName(`inmove ${count}`);
    // }, [count]);

    useLayoutEffect(() => {
      setName(`inmove ${count}`);
    }, [count]);

    console.log("after heavy action");

    return (
      <>
        <div className="flex flex-col gap-5">
          <p>{name}</p>
          <p>{count}</p>
          <Button onClick={increase}>increase</Button>
        </div>
      </>
    );
  }
#+end_src

* useDeferred

You can consider that, the deferredValue is defer calculated by query variable.
If we send query variable to SlowList, every time we tap a char, the SlowList will be rendered.
But when we use deferredValue, only we stop type for some milliseconds, the deferredValue will be set by the newest value of query.

#+begin_src typescript
  "use client";
  import { Input } from "@/components/ui/input";
  import { memo, useDeferredValue, useEffect, useState } from "react";

  export default function UseDeferredHook() {
    const [query, setQuery] = useState("");
    // because of object are different in every re-render
    // so always use useDeferredValue on basic types, like boolean, number, or string
    // if you want to use an object, make sure the object is a global object.
    const deferredValue = useDeferredValue(query);

    useEffect(() => {
      console.log("Query", query);
      console.log("Deferred Query", deferredValue);
      console.log("--------- end ----------------");
    }, [query, deferredValue]);

    return (
      <>
        <Input
          onChange={(e) => setQuery(e.target.value)}
          placeholder="input something"
        />
        {/*     <SlowList text={query} /> */}
        <SlowList text={deferredValue} />
      </>
    );
  }

  const SlowList = memo(({ text }: { text: string }) => {
    const items = [];
    for (let i = 0; i < 200; i++) {
      items.push(<SlowItem key={i} value={text} />);
    }
    return <ul>{items}</ul>;
  });

  function SlowItem({ value }: { value: string }) {
    let startTime = performance.now();
    while (performance.now() - startTime < 1) {}

    return <li className="block mb-4">Text: {value}</li>;
  }

  SlowList.displayName = "SlowList";

#+end_src
#+ATTR_HTML: :width 80% :height 100 :align left
#+begin_iframe
[[https://inmove.top/learning_react/hooks/use-deferred-hook][useDeferred]]
#+end_iframe
