#+TITLE: Start from createRoot
#+DATE: 2024-03-09 23:31:51
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: First glance of ReactJs source code
#+KEYWORDS: ElementTree FiberTree
#+CATEGORIES: FullStack ReactJs

* Hello World HTML
Your can download those three js files from [[https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html][download this HTML page]].
#+NAME: app.html
#+begin_src html
  <!doctype html>
  <html>
    <head>
      <meta charset="UTF-8" />
      <title>Hello World</title>
      <script src="react/react.development.js"></script>
      <script src="react/react-dom.development.js"></script>
      <script src="react/babel.min.js"></script>
    </head>
    <body>
      <div id="root"></div>
      <script src="scripts/app.js" type="text/jsx"></script>
    </body>
  </html>

#+end_src

* Element-Tree and Fiber-Tree
There are two createElement functions, one is in react-dom.development.js another is in react.development.js.
React.createElement is call the react.development.js one.
The first console.log print the Element-Tree.
Watch the second console.log, we can see that the fiber-tree has only the root node
The last console.log, we can find that fiber-tree is filled.

When we can add =console.log("createElement...")= in the React.createElement function, we can find that both CreateElement-way and JSX-way the "createElement..." are printed in the console.

So our conclusion is that: createElement create the Element-Tree, render is a function to create Fiber-Tree using the Element-Tree.

CreateElement-way
#+NAME: scripts/app.js
#+begin_src javascript
  const rootNode = document.getElementById("root");
  const root = ReactDOM.createRoot(rootNode);

  function App() {
    return React.createElement(
      "section",
      null,
      React.createElement(
        "section",
        null,
        React.createElement("p", null, "First"),
      ),
      React.createElement(
        "section",
        null,
        React.createElement("p", null, "Second"),
      ),
    );
  }

  console.log(App());
  console.log(root);
  root.render(React.createElement(App));
  console.log(root);
#+end_src

JSX-way
#+NAME: scripts/app.js
#+begin_src javascript
  const rootNode = document.getElementById("root");
  const root = ReactDOM.createRoot(rootNode);

  root.render(React.createElement(App));

  function App() {
    const [value1, setValue1] = React.useState(0);
    const [value2, setValue2] = React.useState(0);

    console.log(rootNode);
    console.log(root);

    return (
      <>
        <section>
          <article>
            <h1>This is the title</h1>
            <p>I have something to say</p>
          </article>
        </section>
        <section>
          <p>Current value1 is: {value1}</p>
          <button
            onClick={() => setValue1(value1 + 1)}
            styles={{
              border: "1px solid blue",
              backgroundColor: "blue",
            }}
          >
            Click me 1
          </button>
        </section>
        <section>
          <p>Current value2 is: {value2}</p>
          <button
            onClick={() => setValue2(value2 + 1)}
            styles={{
              border: "1px solid blue",
              backgroundColor: "blue",
            }}
          >
            Click me 2
          </button>
        </section>
      </>
    );
  }

#+end_src

* createRoot function

Here is the initial works.
In the createContainer function a /FiberRootNode/ is created and its current pointed to /FiberNode/, this is the *fiber tree*.

#+begin_src javascript
  function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
  }

  function createRoot(container, options) {
      // More Codes
      var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root.current, container);
      var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
      listenToAllSupportedEvents(rootContainerElement);
      return new ReactDOMRoot(root);
  }

  function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate = false;
      var initialChildren = null;
      return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
#+end_src
