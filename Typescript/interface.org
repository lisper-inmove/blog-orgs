#+TITLE: Usage of Interface
#+DATE: 2024-12-22 11:08:37
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Interface
#+CATEGORIES: Typescript

* Interface
#+begin_src javascript
  // 1. 用interface定义对象结构
  interface Person {
      name: string;
      age: number;
      salary?: number; // 属性可选
      work: (name: string) => string; // work是一个函数，接受一个string做为参数，返回一个string
  }

  // 2. 如果只有函数类型的话，也可以如下定义
  // TypeScript 不允许在接口中同时声明对象的属性和方法的签名
  interface Greet {
    (name: string): string;
  }
  const greet: Greet = (name) => `Hello, ${name}!`;

  const john: Person = {
      name: "John",
      age: 30,
      work: (name: string) => `Hello, ${name}!`,
  };

  // 3. interface可以被其它interface扩展
  interface Teacher extends Person {
      job: string;
  }

  // 4. interface 可以被类实现
  class Niu implements Teacher {
      name: string;
      age: number;
      salary?: number;
      job: string;
      constructor(name: string, age: number, job: string, salary?: number) {
          this.name = name;
          this.age = age;
          this.salary = salary;
          this.job = job;
      }
      work(name: string): string {
          return `Teacher ${this.name} is working on ${name}`;
      }
  }
  const niu: Niu = new Niu("inmove", 35, "haha", 10000);


  // 5. 定义一个key-value的类。接口可以有多个动态属性，这些属性的类型必须是已知的
  interface StringDictionary {
    [key: string]: string;
  }

  const dict: StringDictionary = {
    name: "John",
    age: "30"
  };

  // 6. 用type定义交叉类型
  interface Person {
    name: string;
  }

  interface Employee {
    jobTitle: string;
  }

  type Worker = Person & Employee;

  const worker: Worker = {
    name: "John",
    jobTitle: "Developer"
  };
#+end_src

* Interface VS Type VS Class
| 特性               | interface                | class                                   | type                               |
|--------------------+--------------------------+-----------------------------------------+------------------------------------|
| 用途               | 定义对象的结构或类的接口 | 定义类的构造函数，方法和属性            | 定义类型，包括联合类型，交叉类型等 |
| 是否生成Javascript | 否                       | 是                                      | 否                                 |
| 能否实例化         | 否                       | 使用new                                 | 否                                 |
| 继承/扩展          | 通过extends继承其它接口  | 用extends继承其它类，implements实现接口 | 通过交叉类型实现扩展(&)            |
| 合并声明           | 同名接口合并             | 不支持类的声明合并                      | 不支持同名type合并                 |
