#+TITLE: Transform
#+DATE: 2024-02-22 06:43:01
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Transforms allow you to modify an element's appearance and position without affecting the layout of other elements around it. This capability enables you to rotate, scale, move, or skew elements.
#+KEYWORDS: Transform
#+CATEGORIES: CSS

* Key Concepts
1. Coordinate System: CSS transforms operate within a coordinate system where the origin (0, 0) is at the center of the element being transformed.
2. Transform Origin: The transform-origin property allows you to change the point around which a transformation is applied. By default, this is the center of the element, but it can be set to any point within or outside the element, affecting how rotations, scaling, and other transformations are perceived.

* 2D Transform Functions
1. /rotate/: Rotate an element clockwise or counterclockwise by a special angle. =rotate(45deg)=
2. /scale/: Scales an element up or down in size. =scale(2, 3)= doubles the width, triples the height.
3. /translate/: Move an element. =translate(50px, 20px)=
4. /skew/: Skew an element by a certain angle along the x-aixs or y-axis.

Rotate and translate is very special, because they will change modify the coordinate.
If combine rotate or translate with other functions, you should be very careful.

c5 and c6 are combined rotate with translate, but there are some difference between the results.
Open the console and press the flex button of the second line. You can see the difference between c5 and c6.
#+ATTR_HTML: :width 80% :height 250 :align left
#+begin_iframe
[[https://inmove.top/learning_react/css/transform/2d-transform][2d-transform]]
#+end_iframe

#+begin_src typescript
  import "./style.css";

  export default function TranslateDemo() {
    return (
      <>
        <div className="m-4 flex flex-col gap-10">
          <div className="flex gap-20">
            <div className="c c1 relative w-8 h-8 bg-red-500">c1</div>
            <div className="c c2 relative w-8 h-8 bg-blue-500">c2</div>
            <div className="c c3 relative w-8 h-8 bg-green-500">c3</div>
            <div className="c c4 relative w-8 h-8 bg-cyan-700">c4</div>
          </div>
          <div className="flex gap-20">
            <div className="c c5 relative w-8 h-8 bg-red-500">c5</div>
            <div className="c c6 relative w-8 h-8 bg-blue-500">c6</div>
            <div className="c c7 relative w-8 h-8 bg-green-500">c7</div>
            <div className="c c8 relative w-8 h-8 bg-cyan-700">c8</div>
            <div className="c c9 relative w-8 h-8 bg-slate-500">c9</div>
          </div>
        </div>
      </>
    );
  }
#+end_src
#+begin_src css
  .c {
    border-right: 1px solid black;
    text-align: center;
  }

  .c1 {
    transform: rotate(45deg);
  }

  .c2 {
    transform: translate(50%, 50%);
  }

  .c3 {
    transform: scale(1.5);
  }

  .c4 {
    /*
      transform: skew(ax);
      transform: skew(ax, ay);
      skew(3)
      skew(15deg)
      skew(0.1turn)
      skew(.312rad)
    ,*/
    transform: skew(45deg);
  }

  .c5 {
    transform: rotate(45deg) translate(50%, 50%);
  }

  .c6 {
    transform: translate(50%, 50%) rotate(45deg);
  }

  .c7 {
    transform: skew(45deg) rotate(45deg);
  }

  .c8 {
    transform: rotate(45deg) skew(45deg);
  }

  .c9 {
    transform: rotate(45deg) scale(1.5);
  }

#+end_src

* 3D Transform Functions

The coordinate has three directions. x, y and z. Also the orginal point is at the center of the object.
*Perspective(视距)* this property define the distane between your eye and the object. The greater the distance, the less noticeable the change of the z axis..

1. rotate3d(x, y, z, angle): Here is a straight line strike throught (0, 0, 0) and (x, y, z), this line is the rotate axis.
2. translate3d(x, y, z)
3. scale3d(x, y, z)

#+ATTR_HTML: :width 80% :height 100 :align left
#+begin_iframe
[[https://inmove.top/learning_react/css/transform/3d-transform][3d-transform]]
#+end_iframe

#+begin_src typescript
  import "./style.css";

  export default function TranslateDemo() {
    return (
      <>
        <div className="m-4 flex flex-col gap-10">
          <div className="flex gap-20">
            <div className="c c1 relative w-8 h-8 bg-red-500">c1</div>
            <div className="c c2 relative w-8 h-8 bg-blue-500">c2</div>
            <div className="c c3 relative w-8 h-8 bg-green-500">c3</div>
            <div className="c c4 relative w-8 h-8 bg-cyan-700">c4</div>
          </div>
        </div>
      </>
    );
  }
#+end_src
#+begin_src css
  .c {
    border-right: 1px solid black;
    text-align: center;
  }

  .c1 {
    transform: perspective(500px) rotate3d(1, 10, 3, 45deg);
  }

  .c2 {
    transform: perspective(300px) translate3d(0, 0, 100px);
  }

  .c3 {
    transform: perspective(400px) scale3d(1.1, 1.3, 1.5);
  }

#+end_src

** An Example of 3d-cube
#+ATTR_HTML: :width 80% :height 300 :align left
#+begin_iframe
[[https://inmove.top/learning_react/css/transform/3d-cube][3d-cube]]
#+end_iframe

#+NAME: 3d-cube.tsx
#+begin_src typescript
  import "./style.css";

  export default function TransformDemoPage() {
    return (
      <>
        <div className="flex items-center h-[50vh] w-[50vw] justify-center">
          <div className="cube">
            <div className="side bg-red-500 left-side"></div>
            <div className="side bg-green-500 right-side"></div>
            <div className="side bg-blue-500 top-side"></div>
            <div className="side bg-gray-500 bottom-side"></div>
            <div className="side bg-orange-500 front-side"></div>
            <div className="side bg-cyan-500 back-side"></div>
          </div>
        </div>
      </>
    );
  }
#+end_src

#+NAME: style.css
#+begin_src css
  .cube {
    transform-style: preserve-3d;
    position: relative;
    width: 100px;
    height: 100px;
    perspective: 500px;
    animation: rotate-cube 20s infinite linear;
  }

  .side {
    position: absolute;
    width: 100px;
    height: 100px;
  }

  .front-side {
    transform: translateZ(50px);
  }

  .back-side {
    transform: translateZ(-50px);
  }

  .right-side {
    transform: translateX(50px) rotateY(90deg);
  }

  .left-side {
    transform: translateX(-50px) rotateY(-90deg);
  }

  .top-side {
    transform: translateY(-50px) rotateX(90deg);
  }

  .bottom-side {
    transform: translateY(50px) rotateX(-90deg);
  }

  @keyframes rotate-cube {
    0% {
      transform: rotateX(45deg) rotateY(45deg);
    }

    25% {
      transform: rotateX(-45deg) rotateY(45deg);
    }

    50% {
      transform: rotateX(-45deg) rotateY(-45deg);
    }

    70% {
      transform: rotateX(45deg) rotateY(-45deg);
    }

    50% {
      transform: rotateX(45deg) rotateY(45deg);
    }
  }
#+end_src
