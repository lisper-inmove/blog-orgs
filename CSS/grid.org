#+TITLE: Grid Layout
#+DATE: 2024-02-21 09:20:26
#+DISPLAY: nil
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: A powerful layout system available in CSS that allows for the two-dimensional arrangement of elements on a web page
#+KEYWORDS: Grid Layout
#+CATEGORIES: CSS
#+CARDIMAGE: https://inmove-blog.oss-cn-hangzhou.aliyuncs.com/images/css-grid.png

* An Image

This is an image get from Chrome DevTools.
Properties like *justify-content align-content align-items* can also apply to grid layout.

#+CAPTION: Grid Layout
#+ATTR_HTML: :justifyContent start :image t
[[https://inmove-blog.oss-cn-hangzhou.aliyuncs.com/images/grid-layout.png][Grid Layout Image]]

* Two Methods to set Grid Columns and Rows

#+NAME: grid-template.css
#+begin_src css
  .child {
      margin: "5px";
      border: "1px solid black";

      /* think that our grid is 4x4
       thus we have 5x5 border for our grid, the number of grid border is based on 1.
       -1 means last border */
      /**
       ,* column x row = 4 x 4
       ,* border = 5 x 5(1~5)
       ,*       1 2 3 4
       ,*      +-------+
       ,* 1    | | | | |
       ,*      +-------+
       ,* 2    | | | | |
       ,*      +-------+
       ,* 3    | | | | |
       ,*      +-------+
       ,* 4    | | | | |
       ,*      +-------+
       ,* */
      /* a box has four border
      // columnStart: left-border
      // columnEnd: right-border
      // rowStart: top-border
      // rowEnd: bottom-border
      // in general, we can only set a pair of start-end
      // gridColumnStart: 2,
      // gridColumnEnd: 4,
      // gridRowStart: 2,
      // gridRowEnd: 4, */

      /* take two columns */
      gridColumn: "span 2",
  };


  .container{
      display: "grid";
      /* grid-row-gap and grid-column-gap */
      /* gap: "1rem"; */
      border: "3px solid #FFFF00",
      /* number, percentage, fr */
      /* grid-template-columns: "1fr 2fr 1fr", */
      /* grid-template-columns: "repeat(3, 1fr)", // 3 is column count */
      /* grid-template-columns: "repeat(auto-fit, minmax(100px, 1fr))", */

      grid-template-columns: "100px 100px 250px 1fr",
      grid-template-rows: "100px 100px 250px 100px",
      /* if we have 8 children. If among them, 6, consume all grid templates */
      /* The remains will controlled by the grid-auto-rows */
      grid-auto-rows: "200px",
  };
#+end_src

#+NAME: grid-areas.css
#+begin_src css
  .child{
      width: "100px";
      height: "100px";
      margin: "5px";
      border: "1px solid black";
      grid-area: "g";
    };

  .container {
      display: "grid";
      border: "3px solid #FFFF00";
      grid-template-areas: "'a b c' 'd d e' 'f g g'";
  };
#+end_src
