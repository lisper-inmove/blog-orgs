#+TITLE: Animation
#+DATE: 2024-02-22 00:23:34
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Animations enable you to animate transitions from one CSS style configuration to another.
#+KEYWORDS: keyframes
#+CATEGORIES: CSS

* An Example
#+begin_src css
  @keyframes fadeInWithColor {
      from {
          capacity: 0;
          background-color: red;
      }

      50% {
          background-color: yellow;
      }

      to {
          capacity: 1;
      }
  }

  .container {
      animation-name: fadeIn;
      animation-duration: 3s;
      animation-timing-function: ease-in-out;
      animation-delay: 2s;
      animation-iteration-count: infinite;
      animation-direction: alternate;
      animation-fill-mode: forwards;

      /* this is a shorthand for above propeties */
      animation: fadeIn 3s ease-in-out 2s infinite alternate forwards;

      animation-play-state: paused; /* running */
  }
#+end_src

** animation-fill-mode
Defines the styles applied to the element when the animation is not playing(before it starts, after it ends, or both).
Its values can be *forwards* *backwards* *none* *both*
1. forwards: The target will retain the computed styles set by the last keyframe encountered during execution.
2. backwards: If delay set, the target will remain the *firtframe* style before delay end.
3. none: The animation will not apply any styles to the target before of after it is executing.
4. both: You can think that both forwards and backwards are configured.

** animation-direction
This property defines how to apply the animation.
1. normal: This is the default value. Apply frame from first to last.
2. reverse: From last to first
3. alternate and alternate-reverse: This two configurations must be collaborate with another property. *animation-iteration-count*

** animation-iteration-count
This value defines how many times the animation runned.
If its value can be *infinite* or a double number.
For example, 0.5 means just run animation-duration / 2 seconds. 2 means run animation-duration * 2 seconds(that is 2 times).
If animation-direction is normal or reverse and count is bigger than 1 or infinite. Every time the animation will /jump/ to first frame(or last frame).
If animation-direction is alternate or alternate-reverse, when the animation start next round, it will reverse the last round.

* An Color Change Demo
The div's background color is red, 2 seconds after, the animation starts. The div's background color is green in the end.
#+begin_src css
  @keyframes colorChange {
    from {
      background-color: red;
    }

    80% {
      background-color: yellow;
    }

    to {
      background-color: green;
    }
  }

  .colorChange2S {
    animation: colorChange 2s ease-out;
    animation-fill-mode: both;
    animation-direction: alternate;
    animation-iteration-count: 2;
    animation-delay: 2s;
  }
#+end_src

CSS Animation controlled by typescript.
#+begin_src typescript
  "use client";

  interface Properties {
    name: string;
    duration: string;
    timingFunction: string;
    delay: string;
    iterationCount: string;
    direction: string;
    fillMode: string;
    state: string;
  }

  const setAnimation = (elementId: string, properties: Properties): void => {
    const element = document.getElementById(elementId);
    if (!element) return; // Exit if element not found

    const {
      name,
      duration,
      timingFunction,
      delay,
      iterationCount,
      direction,
      fillMode,
      state,
    } = properties;

    if (name) element.style.animationName = name;
    if (duration) element.style.animationDuration = duration;
    if (timingFunction) element.style.animationTimingFunction = timingFunction;
    if (delay) element.style.animationDelay = delay;
    if (iterationCount) element.style.animationIterationCount = iterationCount;
    if (direction) element.style.animationDirection = direction;
    if (fillMode) element.style.animationFillMode = fillMode;
    if (state) element.style.animationPlayState = state;
  };

  function clearAnimation(elementId: string) {
    const element = document.getElementById(elementId);
    if (!element) return; // Exit if element not found

    // Reset animation-related styles
    element.style.animationName = "";
    element.style.animationDuration = "";
    element.style.animationTimingFunction = "";
    element.style.animationDelay = "";
    element.style.animationIterationCount = "";
    element.style.animationDirection = "";
    element.style.animationFillMode = "";
    element.style.animationPlayState = "";
  }

  export default function AnimationDemoPage() {
    function startAnimation() {
      const element = document.getElementById("animation-test");
      if (!element) return; // Exit if element not found
      element?.addEventListener("animationstart", function () {
        console.log("Animation started");
      });

      element?.addEventListener("animationiteration", function () {
        console.log("Animation iteration");
      });

      element?.addEventListener("animationend", function () {
        // clearAnimation("animation-test");
        console.log("Animation end");
      });

      setAnimation("animation-test", {
        name: "colorChange",
        duration: "2s",
        timingFunction: "ease-in-out",
        delay: "0s",
        iterationCount: "2",
        direction: "alternate",
        fillMode: "both",
        state: "paused",
      });
    }

    return (
      <>
        <div
          className="flex h-[100vh] w-[100vw] justify-center items-center"
          id="animation-test"
        >
          <button onClick={() => startAnimation()} className="text-2xl">
            Start Animation
          </button>
        </div>
      </>
    );
  }

#+end_src

#+ATTR_HTML: :height 200 :align start
#+begin_iframe
[[https://inmove.top/demonstration/animation][Animation Change BackgroundColor]]
#+end_iframe
