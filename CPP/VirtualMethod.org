#+TITLE: 虚函数
#+DATE: 2025-05-30 21:52:41
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+CATEGORIES: CPP

* 虚函数

使用virtual修饰的函数为虚函数

#+NAME: brass.h
#+begin_src cpp
  #ifndef __BRASS_H__
  #define __BRASS_H__

  #include <string>

  class Brass {
     private:
      std::string fullName;
      long accNum;
      double balance;

     public:
      Brass(const std::string &s = "Nullbody", long an = -1, double bal = 0.0);
      void Deposit(double amt);
      virtual void Withdraw(double amt);
      double Balance() const;
      virtual void ViewAcct() const;
      virtual ~Brass();
  };

  class BrassPlus : public Brass {
     private:
      double maxLoan;
      double rate;
      double owesBank;

     public:
      BrassPlus(const std::string &s = "Nullbody", long an = -1, double bal = 0.0, double ml = 500,
                double r = 0.11125);
      BrassPlus(const Brass &ba, double ml = 500, double r = 0.11125);
      virtual void ViewAcct() const;
      virtual void Withdraw(double amt);
      void ResetMax(double m) { maxLoan = m; };
      void ResetRate(double r) { rate = r; };
      void ResetOwes() { owesBank = 0; };
  };

  #endif

#+end_src

第一种方式会切片，所以调用的是 Brass的Withdraw
其余3种方式都可以调用 BrassPlus的Withdraw
Balance不是虚函数，所以 b1_ref和b2_ref调用的都是Brass的
ViewAcct是虚函数，所以b1_ref调用的是Brass的，b2_ref调用的是BrassPlus的
#+NAME: main.cpp
#+begin_src cpp
  #include <iostream>

  #include "include/brass.h"

  using namespace std;

  int main()
  {
      Brass common = Brass("inmove", 1, 0.0);
      common.Deposit(1000.0);
      common.ViewAcct();

      // 1
      Brass plus = BrassPlus(common);
      cout << "######## Plus 1 ##########" << endl;
      plus.Withdraw(1005);

      // 2
      BrassPlus plus2 = BrassPlus(common);
      cout << "######## Plus 2 ##########" << endl;
      plus2.Withdraw(1005);

      // 3
      Brass &ref = plus2;
      cout << "######## Plus 3 ##########" << endl;
      ref.Withdraw(1005);

      // 4
      Brass *plus3 = new BrassPlus(common);
      cout << "######## Plus 4 ##########" << endl;
      plus3->Withdraw(1005);

      Brass dom("Dominic Banker", 11224, 4183.45);
      BrassPlus dot("Dorothy Banker", 12118, 2592.00);
      Brass &b1_ref = dom;
      Brass &b2_ref = dot;
      b1_ref.Balance();
      b2_ref.Balance();
      b1_ref.ViewAcct();
      b2_ref.ViewAcct();

      Brass *clients[2];
      for (int i = 0; i < 2; i++) {
          if (i == 0) {
              clients[i] = new Brass("abc", 0.0, 0.0);
          }
          else {
              clients[i] = new BrassPlus("def", 1.0, 1.0);
          }
      }
      for (int i = 0; i < 2; i++) {
          clients[i]->ViewAcct();
      }

      return 0;
  }
#+end_src

如果在子类中要重新定义基类的方法，通常应将基类方法声明为虚的。基类的析构函数一般要定义成虚的，这样才保证析构函数按顺序执行。
