#+TITLE: Print Binary Tree
#+DATE: 2023-10-04 00:50:38
#+DISPLAY: nil
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Print binary tree in terminal in a intuitive way.
#+KEYWORDS: Print Binary Tree in terminal
#+CATEGORIES: DataStructure

* Source Code
#+begin_src python
  class Bcolors:

      HEADER = '\033[95m'
      OKBLUE = '\033[94m'
      OKGREEN = '\033[92m'
      WARNING = '\033[93m'
      FAIL = '\033[91m'
      ENDC = '\033[0m'
      BOLD = '\033[1m'
      UNDERLINE = '\033[4m'

      BLACK_FONT_C = "\033[30m"
      RED_FONT_C = "\033[31m"
      GREEN_FONT_C = "\033[32m"
      YELLOW_FONT_C = "\033[33m"
      DARK_BLUE_FONT_C = "\033[34m"
      PINK_FONT_C = "\033[35m"
      LIGHT_BLUE_FONT_C = "\033[36m"
      LIGHT_GREY_FONT_C = "\033[90m"
      ORIGIN_FONT_C = "\033[91m"

      @classmethod
      def color_value(cls, color, value):
          return color + str(value) + cls.ENDC

      @classmethod
      def red_value(cls, value):
          return cls.color_value(cls.RED_FONT_C, value)

      @classmethod
      def green_value(cls, value):
          return cls.color_value(cls.GREEN_FONT_C, value)


  class DisplayTree:

      def __init__(self, tree):
          self.tree = tree
          self._under_score = "_"
          self._back_slash = "\\"
          self._slash = "/"
          self._space = " "

      def display(self):
          """
          refer to
          https://stackoverflow.com/questions/34012886/print-binary-tree-level-by-level-in-python
          """
          if self.tree.root is None:
              return
          lines, *_ = self._display_aux(self.tree.root)
          for line in lines:
              print(line)

      def __get_node_color_key(self, node):
          if hasattr(node, "color_key"):
              return str(node.color_key)
          return str(node.key)

      def __set_node_color_key(self, node, color):
          if hasattr(node, "color_key"):
              node.color_key = color

      def __get_node_length(self, node):
          if hasattr(node, "length"):
              return node.length
          return len(str(node.key))

      def _display_aux(self, node):
          """
          Params:
              node: start node
          Return Value:
              [line]: content to print
              width: length of content
              height: node height
              middle: how many position for child nodes
          """
          if node is None:
              return
          if node.right is None and node.left is None:
              line = self.__get_node_color_key(node)
              width = self.__get_node_length(node)
              height = 1
              middle = width // 2
              return [line], width, height, middle

          self.__set_node_color_key(node, None)

          # Only left child.
          if node.right is None:
              lines, n, p, x = self._display_aux(node.left)
              s = self.__get_node_color_key(node)
              u = self.__get_node_length(node)
              first_line = (x + 1) * self._space + (n - x - 1) * self._under_score + s
              second_line = x * self._space + self._slash + (n - x - 1 + u) * self._space
              shifted_lines = [line + u * self._space for line in lines]
              return [first_line, second_line] + shifted_lines, n + u, p + 2, n + u // 2

          # Only right child.
          if node.left is None:
              lines, n, p, x = self._display_aux(node.right)
              s = self.__get_node_color_key(node)
              u = self.__get_node_length(node)
              first_line = s + x * self._under_score + (n - x) * self._space
              second_line = (u + x) * self._space + self._back_slash + (n - x - 1) * self._space
              shifted_lines = [u * self._space + line for line in lines]
              return [first_line, second_line] + shifted_lines, n + u, p + 2, u // 2

          # Two children.
          left, n, p, x = self._display_aux(node.left)
          right, m, q, y = self._display_aux(node.right)
          s = self.__get_node_color_key(node)
          u = self.__get_node_length(node)
          first_line = (x + 1) * self._space + (n - x - 1) * self._under_score + s + y * self._under_score + (m - y) * self._space
          second_line = x * self._space + self._slash + (n - x - 1 + u + y) * self._space + self._back_slash + (m - y - 1) * self._space
          if p < q:
              left += [n * self._space] * (q - p)
          elif q < p:
              right += [m * self._space] * (p - q)
          zipped_lines = zip(left, right)
          lines = [first_line, second_line] + [a + u * self._space + b for a, b in zipped_lines]
          return lines, n + m + u, max(p, q) + 2, n + u // 2
#+end_src
#+begin_src shell
                                      ______________________________141_________________________________
                                     /                                                                  \
              ______________________82___________                                   ___________________172____________
             /                                   \                                 /                                  \
        ____26___________                   ____99_____                      _____148____________               _____189_____
       /                 \                 /           \                    /                    \             /             \
     _11__          ____62_____          _88__       _122_____            _146__           _____165__        _175__        _190_____
    /     \        /           \        /     \     /         \          /      \         /          \      /      \      /         \
  -999  -999     _57__       _64__    -999  -999  -999      _129__     -999   -999      _158__     -999   -999   -999   -999      _193__
                /     \     /     \                        /      \                    /      \                                  /      \
              -999  -999  -999  -999                     -999   -999                 -999   -999                               -999   -999
                               __________________________________________124________________________________________
                              /                                                                                     \
             ________________53_______________________                                          ___________________177_____
            /                                         \                                        /                           \
       ____16_____                         __________92____________               ____________143_____                   _181_____
      /           \                       /                        \             /                    \                 /         \
     _4__       _32_____             ____77_____             _____113__        _132_____            _151_____         -999      _186__
    /    \     /        \           /           \           /          \      /         \          /         \                 /      \
  -999 -999  -999     _34__       _70__       _78__       _105__     -999   -999      _142__     -999      _171__            -999   -999
                     /     \     /     \     /     \     /      \                    /      \             /      \
                   -999  -999  -999  -999  -999  -999  -999   -999                 -999   -999          -999   -999

#+end_src
