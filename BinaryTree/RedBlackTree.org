#+TITLE: Red Black Tree
#+SUBTITLE: A Red-Black Tree is a type of self-balancing binary search tree, a data structure used in computer science to organize pieces of comparable data, such as numbers. It is an enhanced version of a binary search tree
#+DATE: 2023-09-28 00:15:14
#+DISPLAY: nil
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Red Black Tree, Binary Search Tree
#+CATEGORIES: DataStructure


* Definition

A red-black tree is a type of self-balancing binary search tree, in which each node has a color attribute: red or black. The main characteristics of a red-black tree are:

1. Each node is either red or black.
2. The root node is black.
3. Every leaf node (NIL or null node) is black.
4. If a node is red, then both its children are black.
5. For each node, all simple paths from the node to its descendant leaves contain the same number of black nodes.

* Source Code
#+begin_src python
  # -*- coding: utf-8 -*-

  import random
  from enum import Enum

  from display_bynary_tree import DisplayTree
  from display_bynary_tree import Bcolors

  MINIMUM = -999

  class Color(Enum):
      RED = 1
      BLACK = 2

  class RBNode:

      def __init__(self):
          self.left = None
          self.right = None
          self.parent = None
          self._key = MINIMUM
          self.color = Color.RED
          self.insert_number = 0

      @property
      def key(self):
          return self._key

      @key.setter
      def key(self, key):
          self._key = key

      @property
      def color_key(self):
          if self.color == Color.RED:
              color_key = Bcolors.red_value(self._key)
          else:
              color_key = Bcolors.green_value(self._key)
          return color_key

      @color_key.setter
      def color_key(self, color):
          pass

      @property
      def grandparent(self):
          if self.parent is None:
              return None
          return self.parent.parent


  class RBTree:

      root = None

      def __init__(self):
          self.NIL = RBNode()
          self.NIL.color = Color.BLACK

      def minimum(self, node):
          while node.left is not self.NIL:
              node = node.left
          return node

      def maximum(self, node):
          while node.right is not self.NIL:
              node = node.right
          return node

      def insert(self, key):
          node = self.create_node(key)
          if self.root is None:
              self.root = node
          else:
              tmp = self.root
              while True:
                  if tmp.key < node.key:
                      if tmp.right == self.NIL:
                          tmp.right = node
                          node.parent = tmp
                          break
                      tmp = tmp.right
                  else:
                      if tmp.left == self.NIL:
                          tmp.left = node
                          node.parent = tmp
                          break
                      tmp = tmp.left
          self.insert_fixup(node)

      def insert_fixup(self, node):
          """

          1. n: which means node
          2. p: the parent node of n
          3. u: the uncle node of n
          4. g: the grandparent node of n

          The node to be inserted must be red because this can only potentially violate rules 2 and 4. After the new node is inserted, if it violates the properties of the red-black tree, rotations or recoloring adjustments are needed to continue satisfying the 5 properties. For the insertion of a new node, there are several scenarios:
          a). If inserted at the root node, simply changing the node color to black is sufficient (violates rule 2).
          b). If p is black, nothing needs to be done.
          c). If p is red, violating rule 4:

          1. If u is red, then set both u and p to black, set g to red, and adjust g from step a).
          2. If u is black or NIL (meaning it does not exist):
            1). If n is a right child and p is a left child:
              1. Perform a left rotation on p (switching the parent-child relationship of n and p).
              2. Set p.color to BLACK and g.color to RED.
              3. Perform a right rotation on g (switching the parent-child relationship of p and g).
            2). If n is a left child and p is a right child:
              1. Perform a right rotation on p (switching the parent-child relationship of n and p).
              2. Set p.color to BLACK and g.color to RED.
              3. Perform a left rotation on p.
            3). If n is a left child and p is a left child:
              1. Set p.color to BLACK and g.color to RED.
              2. Perform a right rotation on g.
            4). If n is a right child and p is a right child:
              1. Set p.color to BLACK and g.color to RED.
              2. Perform a left rotation on g.
          """

          # if p is red, g must be black
          while node.parent != self.NIL and node.parent.color == Color.RED:

              if node.grandparent.left.color == Color.RED and \
                 node.grandparent.right.color == Color.RED:
                  # u is red
                  node.grandparent.left.color = Color.BLACK
                  node.grandparent.right.color = Color.BLACK
                  node.grandparent.color = Color.RED
                  node = node.grandparent
                  continue

              if node.parent == node.grandparent.left:
                  # L-R and L-L
                  if node == node.parent.right:
                      node = node.parent
                      self.left_rotate(node)
                  node.parent.color = Color.BLACK
                  node.grandparent.color = Color.RED
                  self.right_rotate(node.grandparent)
              else:
                  # R-L and R-R
                  if node == node.parent.left:
                      node = node.parent
                      self.right_rotate(node)
                  node.parent.color = Color.BLACK
                  node.grandparent.color = Color.RED
                  self.left_rotate(node.grandparent)
          self.root.color = Color.BLACK

      def __transplant(self, u, v):
          """ put v to u, drift away u
          """
          if u.parent == self.NIL:
              self.root = v
          else:
              if u == u.parent.left:
                  u.parent.left = v
              else:
                  u.parent.right = v
          v.parent = u.parent

      def delete_fixup(self, orig_color, node):
          """

          Case 1: The node being deleted is red.
          Solution: Directly delete it, as this does not violate the properties of a red-black tree.

          Case 2: The node being deleted is black, and one of its red children becomes the replacement node.
          Solution: Directly delete and replace it with its red child, then recolor the replacement node to black.

          Case 3: The node being deleted is black, and its children are also black.
          This is the most complex case because it produces a "double black" node at that position after deletion. The following adjustments are needed:

            a. Case 3.1: The sibling node is red (in this case, the parent node and the sibling's children are black).
              Solution: Perform a left or right rotation on the parent node and swap the colors of the parent node and the sibling node. This transforms the original problem into Case 3.2 or 3.3.
            b. Case 3.2: The sibling node is black, and both of its children are black.
              Solution: Recolor the sibling node red and move the "double black" up to the parent node.
            c. Case 3.3: The sibling node is black, its child farthest from the "double black" node is red, and the child closest to the "double black" node is black.
              Solution: Perform a left or right rotation on the sibling node and swap the colors of the sibling node and its red child. This transforms the original problem into Case 3.4.
            d. Case 3.4: The sibling node is black, and the child closest to the "double black" node is red.
              Solution: Perform a left or right rotation on the parent node, recolor the sibling node to the color of the parent node, and recolor the parent node and the sibling node's red child to black.
          """

          if orig_color == Color.RED:
              return

          while node != self.root and node.color == Color.BLACK:
              # if node is black and is not root
              if node == node.parent.left:
                  w = node.parent.right
                  # Case 1
                  if w.color == Color.RED:
                      w.color = Color.BLACK
                      node.parent.color = Color.RED
                      self.left_rotate(node.parent)
                      w = node.parent.right
                  # Case 2
                  if w.left.color == Color.BLACK and w.right.color == Color.BLACK:
                      w.color = Color.RED
                      node = node.parent
                  else:
                      # Case 3
                      if w.right.color == Color.BLACK:
                          w.left.color = Color.BLACK
                          w.color = Color.RED
                          self.right_rotate(w)
                          w = node.parent.right
                      # Case 4
                      w.color = node.parent.color
                      node.parent.color = Color.BLACK
                      w.right.color = Color.BLACK
                      self.left_rotate(node.parent)
                      node = self.root
              else:
                  w = node.parent.left
                  if w.color == Color.RED:
                      w.color = Color.BLACK
                      node.parent.color = Color.RED
                      self.right_rotate(node.parent)
                      w = node.parent.left
                  if w.right.color == Color.BLACK and w.left.color == Color.BLACK:
                      w.color = Color.RED
                      node = node.parent
                  else:
                      if w.left.color == Color.BLACK:
                          w.right.color = Color.BLACK
                          w.color = Color.RED
                          self.left_rotate(w)
                          w = node.parent.left
                      w.color = node.parent.color
                      node.parent.color = Color.BLACK
                      w.left.color = Color.BLACK
                      self.right_rotate(node.parent)
                      node = self.root
          node.color = Color.BLACK

      def delete(self, key):
          node = self.search(key)
          if node is None:
              return
          orig_color = node.color

          if node.left == self.NIL:
              # node which to be deleted has only a right node
              x = node.right
              self.__transplant(node, node.right)
          elif node.right == self.NIL:
              # node which to be deleted has only a left node
              x = node.left
              self.__transplant(node, node.left)
          else:
              # successor or precursor of node which to be deleted
              # successor must have no left child
              successor = self.minimum(node.right)
              orig_color = successor.color
              x = successor.right
              if successor.parent == node:
                  x.parent = successor
              else:
                  # if successor is not node's child
                  # replace successor with successor's right child(successor can't have left child), then successor is drift away
                  self.__transplant(successor, successor.right)
                  successor.right = node.right
                  successor.right.parent = successor
              self.__transplant(node, successor)
              successor.left = node.left
              successor.left.parent = successor
              successor.color = node.color

          self.delete_fixup(orig_color, x)

      def left_rotate(self, node):
          # rotate node and its right child
          #    node               x
          #    /  \              / \
          #   a    x   =====>  node c
          #       / \          /  \
          #      b   c        a    b

          x = node.right
          b = x.left

          x.left = node
          node.right = b
          if b != self.NIL:
              b.parent = node
          x.parent = node.parent
          if x.parent != self.NIL:
              if node.parent.left == node:
                  node.parent.left = x
              else:
                  node.parent.right = x
          else:
              self.root = x
          node.parent = x

      def right_rotate(self, node):
          # node and its left chld
          #     node              x
          #     /  \             / \
          #    x    a =======>  b  node
          #   / \                  /  \
          #  b   c                c    a

          x = node.left
          c = x.right

          x.right = node
          node.left = c
          if c != self.NIL:
              c.parent = node
          x.parent = node.parent
          if x.parent != self.NIL:
              if node.parent.left == node:
                  node.parent.left = x
              else:
                  node.parent.right = x
          else:
              self.root = x
          node.parent = x

      def create_node(self, key):
          node = RBNode()
          node.key = key
          node.parent = self.NIL
          node.left = self.NIL
          node.right = self.NIL
          return node

      def search(self, key):
          tmp = self.root
          while True:
              if tmp.key == key:
                  return tmp
              if tmp.key < key:
                  tmp = tmp.right
              else:
                  tmp = tmp.left
              if tmp == self.NIL:
                  return None
          return None

      def black_height(self, node):
          if node == self.NIL:
              return 0
          height = 0
          if node.color == Color.BLACK:
              height = 1
          left_height = self.black_height(node.left) + height
          right_height = self.black_height(node.right) + height
          if left_height != right_height:
              raise Exception(f"{node} {left_height} != {right_height}")
          return left_height

      def has_red_child(self, node):
          if node == self.NIL:
              return
          if node.color == Color.RED:
              if node.left.color == Color.RED:
                  raise Exception(f"{node} {node.left}")
              if node.right.color == Color.RED:
                  raise Exception(f"{node} {node.right}")
          self.has_red_child(node.left)
          self.has_red_child(node.right)

      def is_real_red_black_tree(self):
          if self.root.color != Color.BLACK:
              raise Exception("Root is not Black")
          self.black_height(self.root)
          self.has_red_child(self.root)


  class Tester:

      def __init__(self, tree):
          self.tree = tree
          self._key_max = 200

      def init_by_random(self, count):
          for i in range(0, count):
              key = random.randint(1, self._key_max)
              self.tree.insert(key)

      def delete_by_random(self, count):
          for i in range(0, count):
              key = random.randint(1, self._key_max)
              self.tree.delete(key)


  if __name__ == '__main__':

      for i in range(0, 100):
          tree = RBTree()
          displayer = DisplayTree(tree)
          tester = Tester(tree=tree)

          tester.init_by_random(count=20)
          displayer.display()
          tester.tree.is_real_red_black_tree()

          tester.delete_by_random(5)
          displayer.display()
          tester.tree.is_real_red_black_tree()
#+end_src
