#+TITLE: Traverse Binary Tree
#+DATE: 2023-10-04 00:51:41
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: preorder inorder postorder level-order morris
#+CATEGORIES: DataStructure

* morris
#+begin_src python
  from collections import deque

  def morrisIn(root):
      result = []
      n1, n2 = root, None
      while n1 is not None:

          # because is pre order, so deal left node first
          if n1.left is not None:
              # successor of current node
              n2 = n1.left
              while n2.right and n2.right != n1:
                  n2 = n2.right

              # if successor is None, point to current node
              if n2.right is None:
                  n2.right = n1
                  # deal left node tree
                  n1 = n1.left
                  continue
              else:
                  # if successor is not None, must point to current node
                  n2.right = None
          # deal current node
          result.append(str(n1.key))
          # deal right node tree
          # n1 point to current node when deal most right node of left node!!!
          #       A
          #      /!\
          #     B ! C
          #    / \!
          #   D   E
          # E point to Aã€‚when n1 point to E, n1 = n1.right, and it will make n1 point to A
          n1 = n1.right
      return ",".join(result)

  def morrisPre(root):
      result = []
      n1, n2 = root, None
      while n1 is not None:
          if n1.left is not None:
              n2 = n1.left
              while n2.right and n2.right != n1:
                  n2 = n2.right
              if n2.right is None:
                  n2.right = n1
                  # deal current node before deal left child
                  result.append(str(n1.key))
                  n1 = n1.left
                  continue
              else:
                  n2.right = None
          else:
              # no left child, deal current node
              result.append(str(n1.key))
          # deal right child
          n1 = n1.right
      return ",".join(result)

  def morrisPost(root):

      """
      order is left-right-middle
      that is: Do right boundary traverse of every node's left child

                       A
                      / \
                     B   C
                    / \
                   D   E
      post order is: D E B C A
      """

      def reverseEdge(node):
          pre, next = None, None
          while node is not None:
              next = node.right
              node.right = pre
              pre = node
              node = next
          return pre

      def collect(node):
          tail = reverseEdge(node)
          cur = tail
          while cur is not None:
              result.append(str(cur.key))
              cur = cur.right
          reverseEdge(tail)

      result = []
      n1, n2 = root, None
      while n1 is not None:
          if n1.left is not None:
              n2 = n1.left
              while n2.right and n2.right != n1:
                  n2 = n2.right
              if n2.right is None:
                  n2.right = n1
                  n1 = n1.left
                  continue
              else:
                  n2.right = None
                  collect(n1.left)
          n1 = n1.right
      collect(root)
      return ",".join(result)

  def printReverse(fromNode, toNode, result):
      """
      Print the nodes from fromNode to toNode in reverse order
      """
      reverseNodes = []
      while fromNode != toNode:
          reverseNodes.append(fromNode)
          fromNode = fromNode.right
      reverseNodes.append(toNode)
      while reverseNodes:
          result.append(str(reverseNodes.pop().key))

  def morrisPost(root, cls):
      dummy = cls(0)
      dummy.left = root
      current = dummy

      result = []
      while current is not None:
          if current.left is None:
              current = current.right
          else:
              pre = current.left
              while pre.right is not None and pre.right != current:
                  pre = pre.right

              if pre.right is None:
                  pre.right = current
                  current = current.left
              else:
                  printReverse(current.left, pre, result)
                  pre.right = None
                  current = current.right
      return ",".join(result)
#+end_src

* inorder
#+begin_src python
  def inorder(root):
      """inorder recursive"""
      result = []

      def process(root):
          if root is None:
              return
          process(root.left)
          result.append(str(root.key))
          process(root.right)
      process(root)
      return ",".join(result)

  def inorderStack(root):
      if root is None:
          return
      result = []
      stack = []
      while root or stack:
          while root:
              stack.append(root)
              root = root.left
          root = stack.pop()
          result.append(str(root.key))
          root = root.right
      return ",".join(result)
#+end_src

* preorder
#+begin_src python
  def preorder(root):

      result = []

      def process(root):
          if root is None:
              return
          result.append(str(root.key))
          process(root.left)
          process(root.right)
      process(root)
      return ",".join(result)

  def preorderStack(root):
      if root is None:
          return
      result = []
      stack = [root]
      while stack:
          node = stack.pop()
          result.append(str(node.key))
          if node.right:
              stack.append(node.right)
          if node.left:
              stack.append(node.left)
      return ",".join(result)
#+end_src

* postorder
#+begin_src python
  def postorder(root):

      result = []

      def process(root):
          if root is None:
              return
          process(root.left)
          process(root.right)
          result.append(str(root.key))

      process(root)

      return ",".join(result)

  def postorderStack(root):
      if root is None:
          return []
      stack1, stack2 = [root], []
      result = []
      while stack1:
          node = stack1.pop()
          stack2.append(node)
          if node.left:
              stack1.append(node.left)
          if node.right:
              stack1.append(node.right)
      while stack2:
          result.append(str(stack2.pop().key))
      return ",".join(result)
#+end_src

* level order
#+begin_src python
  def levelorderTwoStack(root):
      result = []
      stack = []
      stack.append(root)

      while stack:
          tmpStack = []
          while stack:
              tmpStack.append(stack.pop())
          while tmpStack:
              node = tmpStack.pop()
              if node.left:
                  stack.append(node.left)
              if node.right:
                  stack.append(node.right)
              result.append(str(node.key))
      return ",".join(result)

  def levelorderQueue(root):
      queue = deque([root])
      result = []
      while queue:
          node = queue.popleft()
          result.append(str(node.key))
          if node.left:
              queue.append(node.left)
          if node.right:
              queue.append(node.right)
      return ",".join(result)

  def levelorderBottom(root, guard):
      if not root:
          return []
      queue = deque()
      result = []
      queue.append(root)
      while queue:
          queue.append(guard)
          result.append([])
          while queue:
              node = queue.popleft()
              if node == guard:
                  break
              result[-1].append(node.key)
              if node.left:
                  queue.append(node.left)
              if node.right:
                  queue.append(node.right)
      result = list(reversed(result))
      return result
#+end_src
