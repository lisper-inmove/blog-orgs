#+TITLE: Binary Serach Tree
#+DATE: 2023-09-28 00:13:27
#+DISPLAY: nil
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Binary Search Tree
#+CATEGORIES: DataStructure

* Binary Search Tree

The main properties of a binary search tree are:

1. The value of each node's left child must be less than its own value, and the value of the right child must be greater than its own value.
2. Every subtree is a binary search tree.

It has some disadvantages:

1. In certain scenarios, it can degenerate into a structure similar to a LinkedList. (When the data is inserted in order)
2. It does not support random access: Unlike arrays, BSTs do not support O(1) time complexity for random access. To access the kth smallest element, it requires O(log n) or worse time.

#+begin_src python
  from display_bynary_tree import DisplayTree
  from traversal_binary_tree import inorder, inorderStack
  from traversal_binary_tree import preorder, preorderStack
  from traversal_binary_tree import postorder, postorderStack
  from traversal_binary_tree import levelorderQueue, levelorderTwoStack, levelorderBottom
  from traversal_binary_tree import morrisIn, morrisPre, morrisPost


  class Node:

      def __init__(self, key):
          self.key = key
          self.left = None
          self.right = None

      def __str__(self):
          return f"{self.key}"


  class BinarySearchTree:

      def __init__(self):
          self.root = None

      def insert(self, key):
          if self.root is None:
              self.root = Node(key)
          else:
              self.__insertRecursive(self.root, key)

      def __insertRecursive(self, root, key):
          if root is None:
              return Node(key)
          if root.key > key:
              root.left = self.__insertRecursive(root.left, key)
          else:
              root.right = self.__insertRecursive(root.right, key)
          return root

      def search(self, key):
          result = self.__searchRecursive(self.root, key)
          if result:
              return result
          return None

      def delete(self, key):
          return self.__deleteRecursive(self.root, key)

      def __deleteRecursive(self, root, key):
          if root is None:
              return root
          if key < root.key:
              root.left = self.__deleteRecursive(root.left, key)
          elif key > root.key:
              root.right = self.__deleteRecursive(root.right, key)
          else:
              # find node to be delete

              # no left child
              if root.left is None:
                  return root.right

              # no right child
              if root.right is None:
                  return root.left

              # both left and right child exists
              # 1. biggest node in left child tree(precursor)
              # 2. smallest node in right child tree(successor)
              root.key = self.minNode(root.right).key
              root.right = self.__deleteRecursive(root.right, root.key)
          return root

      def minNode(self, root):
          if root.left is None:
              return root
          current = root
          while current:
              current = current.left
          return current

      def maxNode(self, root):
          if root.right is None:
              return root
          current = root
          while current:
              current = current.right
          return current

      def __searchRecursive(self, root, key):
          if root is None:
              return None
          if root.key == key:
              return root
          if root.key > key:
              return self.__searchRecursive(root.left, key)
          else:
              return self.__searchRecursive(root.right, key)

      def display(self):
          displayer = DisplayTree(self)
          displayer.display()


  def test():
      import random

      tree = BinarySearchTree()

      keyNumber = random.randint(10, 20)

      keys = []
      for i in range(0, keyNumber):
          keys.append(random.randint(10, 100))
      for v in keys:
          tree.insert(v)
      tree.display()

      in0 = inorder(tree.root)
      in1 = inorderStack(tree.root)
      in2 = morrisIn(tree.root)

      pre0 = preorder(tree.root)
      pre1 = preorderStack(tree.root)
      pre2 = morrisPre(tree.root)

      post0 = postorder(tree.root)
      post1 = postorderStack(tree.root)
      post2 = morrisPost(tree.root)

      print(f"inorder: {in0}")
      print(f"preorder: {pre0}")
      print(f"postorder: {post0}")
      print(f"Stack inorder: {in1}")
      print(f"Stack preorder: {pre1}")
      print(f"Stack postorder: {post1}")
      print(f"morris inorder: {in2}")
      print(f"morris preorder: {pre2}")
      print(f"morris postorder: {post2}")
      print(f"inorder equal: {in0 == in1 == in2}")
      print(f"preorder equal: {pre0 == pre1 == pre2}")
      print(f"postorder equal: {post0 == post1 == post2}")


      print(f"find element 5: {tree.search(5)}")
      print(f"find element 20: {tree.search(20)}")

      tree.delete(39)
      print(f"remove element (39) inorder: {inorder(tree.root)}")


  if __name__ == '__main__':
      test()
#+end_src
