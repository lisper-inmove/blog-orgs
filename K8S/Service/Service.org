#+TITLE: Service
#+DATE: 2023-09-28 15:46:41
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Kubernetes Service
#+CATEGORIES: Kubernetes

* 什么是Service

创建Service，可以为一组具有相同功能的容器应用提供统一的入口地址，并且将请求负载分发到后端的各个容器应用。

Service提供了稳定的网络访问地址，通过Service，可以通过DNS域名的格式来访问服务。Service还提供了负载均衡功能。

自动服务注册: 当你通过YAML文件或命令行创建一个Service时，Kubernetes API Server会接收到这个请求。Kubernetes的内部DNS服务(如CoreDNS)会自动更新，以包含新Service的信息。

Pod可以通过FQDN(例如，my-service.default.svc.cluster.local -> (SERVICENAME.CLUSTERNAME.svc.cluster.local))或环境变量来发现这个Service。如果是同一个名称空间的Pod，可以通过SERVIECNAME直接访问该Service。

Pod启动时，Kubernetes会自动为每个可用Service设置一组环境变量。这些变量包括Service的名称和地址，使得在Pod内部的应用程序可以使用这些环境变量进行服务发现。例如，对于名为my-service的Service，Pod内部会有如下环境变量：__MY_SERVICE_SERVICE_HOST__ __MY_SERVICE_SERVICE_PORT__

* An Example
#+begin_src yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: advanced-web-service
    namespace: custom-namespace

    # 属于Service的标签
    labels:
      app: advanced-web-app
      environment: production

    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
  spec:

    # pod选择器，同时满足所有条件的pod被选中
    selector:
      app: advanced-web-app
      version: v1

    ports:
      - name: http-port
        protocol: TCP
        port: 80
        targetPort: 8080
      - name: https-port
        protocol: TCP
        port: 443
        targetPort: 8443
    type: LoadBalancer

    # 举个例子。有节点NodeA，NodeB，NodeC都有一个支付服务。当一个外部请求到达A的时候。如果是Cluster，该请求会被路由到B，C，再由K8S内部负载均衡算法决定由谁去处理。这样便保证了服务的高可用。
    # 但是缺点是它牺牲了一些性能。而如果是Local的话，就直接在A上找一个健康的来处理，如果A上面没有这类的服务，或者没有健康的服务，请求也不会路由到其它结点。因此，Local多通过外部负载均衡来达到高可用以及低延迟。
    # - externalTrafficPolicy: Cluster/Local
    #   1. Cluster是默认值。它的作用主要是保证高可用。
    #   2. Local。它的作用主要是保证低延迟。
    externalTrafficPolicy: Local

    # 用于控制流量如何在多个 Pod 之间分配。当设置了会话亲和性（Session Affinity），来自同一客户端的请求将始终被路由到同一个 Pod。
    # 1. None: 默认，不保持会话。
    # 2. ClientIP: 基于客户端IP地址。
    # 3. sessionAffinityConfig.clientIP.timeoutSeconds: 这是一个滑动窗口值，只要新的请求到达，就会重新开始计时。
    # 4. 会话亲和性可能会影响负载均衡，因为来自同一客户端的所有请求都会被路由到同一个 Pod。
    # 5. 不是所有类型的 Service 都支持会话亲和性。例如，ExternalName 类型的 Service 不支持。
    # 基于客户端的会话亲和性。同一个ip的用户请求被路由到同一个pod
    sessionAffinity: ClientIP

    sessionAffinityConfig:
      clientIP:
        # 客户端IP的会话亲和性超时时间。对于同一个ip的请求，连续请求时间只要不超过100秒，就会路由到同一个Pod
        timeoutSeconds: 100
    这个字段用于设置访问Service的IP。通常情况下是其中一个节点的IP地址。
    比如上面的例子，可以通过 192.168.0.100:80 访问该Service。

    # 除了集群节点自身的 IP 地址之外，externalIPs 字段也可以设置为与集群节点网络接口直接相连的其他网络设备的IP地址。以下是两种可能的场景(没有实际测试过):
    # 1. 路由器场景：假设您有一个路由器，它连接了您的 Kubernetes 集群和外部网络。这个路由器有一个 IP 地址，比如 192.168.0.1，您可以将这个 IP 地址设置为 Service 的 externalIP。但是，您还需要在路由器上进行相应的配置，以确保到这个 IP 地址的流量被正确地转发到集群中的某个节点。
    # 2. 负载均衡器场景：如果您有一个硬件或软件负载均衡器，它位于您的 Kubernetes 集群和外部网络之间，您也可以使用它的 IP 地址作为 externalIP。同样，您需要在负载均衡器上进行配置，以确保流量被正确地转发到集群。
    externalIPs:
      - 192.168.0.100

    # loadBalancerIp是外部负载均衡器的ip地址。通常我们直接使用这个ip在外部进行访问该Service。
    # loadBalancerSourceRanges则限制了访问者的IP地址范围。如果不设置则表示不限制。
    loadBalancerIP: 10.0.0.200
    loadBalancerSourceRanges:
      - "10.0.0.0/24"
#+end_src
* Headless Service
就是给Pod设置一个DNS。访问这个DNS就直接访问了这个唯一的Pod。如下配置，可以通过
<pod-name>.<service-name>.<namespace>.svc.cluster.local 来直接访问Pod。
#+begin_src yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: my-headless-service
  spec:
    clusterIP: None  # 关键点：设置为None使其成为Headless Service
    selector:
      app: my-app
    ports:
      - protocol: TCP
        port: 80
        targetPort: 8080
#+end_src
