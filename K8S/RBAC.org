#+TITLE: RBAC
#+DATE: 2023-09-28 15:17:26
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Kubernetes
#+CATEGORIES: Kubernetes

* 关键概念
K8S中的RBAC有几个重要的概念:
1. 用户: 也就是执行操作的人所使用的身份
2. 角色: 角色主要是分配权限用的。角色必须属性某个名称空间
3. 集群角色: 集群角色和角色不同之处在于它不用属性名称空间
4. 角色绑定; 将用户与角色绑定在一起。
5. 集群角色绑定: 将用户与集群角色绑定。

总的来说就是，角色被赋与权限，用户被绑定到某个角色之后便拥有了这个角色被赋与的权限了。

* 创建角色
#+begin_src yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: Role                     # ClusterRole 为集群角色
  metadata:
    namespace: test
    name: pod-reader
  rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
#+end_src
1. apiGroups: 指定了哪些API组中的资源受到这个规则的影响。
   1. "": 核心组，通常像 pods, services等
   2. apps: 像 deployments 这样的应用
   3. batch: 像jobs,cronjobs等
   4. rbac.authorization.k8s.io: RBAC资源自身

2. resources: 指定了哪些类型的资源对象受到这个规则的影响。这些资源类型通常是你可以用 kubectl命令行工具操作的对象
  1. pods
  2. services
  3. nodes
  4. configmaps
  5. 等等

3. verbs: 指定了哪些操作是被允许的
  1. get: 获取单个资源的详细信息。
  2. list: 列出多个资源。
  3. create: 创建新资源。
  4. delete: 删除资源。
  5. update: 更新现有资源。
  6. patch: 部分更新资源。
  7. watch: 订阅资源更改。
* 创建角色绑定
#+begin_src yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding               # ClusterRoleBinding 为集群角色绑定
  metadata:
    name: read-pods  # 名称，唯一标识这个 RoleBinding
    namespace: default
  subjects:
  - kind: User  # 主体类型，可以是 User、Group 或 ServiceAccount
    name: "john"  # 主体名称，这里是用户名，这个用户现在还可以不存在
    apiGroup: rbac.authorization.k8s.io  # API 组，通常对于用户和组，这会是 rbac.authorization.k8s.io
  roleRef:
    kind: Role  # 角色类型，可以是Role或者ClusterRole
    name: pod-reader  # 角色名称，这里引用了一个名为 pod-reader 的 Role
    apiGroup: rbac.authorization.k8s.io  # API 组，对于 RBAC 资源，这通常会是 rbac.authorization.k8s.io
#+end_src
1. subjects: 定义了哪些用户或者用户组。可以是User，Group，ServiceAcount
2. roleRef: 定义了角色。可以是Role或者ClusterRole。如果是ClusterRole，那么它的权限便被限制在了这个名称空间中(实际ClusterRole的权限是集群范围内的)。
* 创建用户
将以下三段代码保存在同一个目录下之后再执行 =/bin/bash create.sh= 输入用户名和组名之后便会创建用户了。

这里创建的用户以及用户组就是上面的RoleBiding/ClusterRoleBinding中的subjects配置的name字段
** auth.sh
#+begin_src shell
  USERNAME=USERNAME_PLACEHOLDER
  GROUPNAME=GROUPNAME_PLACEHOLDER
  REQUEST_PLACEHOLDER=MY-CSR
  K8S_CA_CRT=/etc/kubernetes/pki/ca.crt
  # SERVER=https://192.168.3.130:6443
  SERVER=SERVER_PLACEHOLDER
  echo $SERVER

  # 创建私钥和证书签名
  openssl genpkey -algorithm RSA -out ${USERNAME}.key
  openssl req -new -key ${USERNAME}.key -out ${USERNAME}.csr -subj "/CN=${USERNAME}/O=${GROUPNAME_PLACEHOLDER}"

  # 将模板复制到该用户目录下
  cp template-csr.yaml ${USERNAME}-csr.yaml

  # 替换模板中的关键信息，并应用该yaml文件
  cat ${USERNAME}.csr | base64 | tr -d '\n' | xargs -i sed -i s/${REQUEST_PLACEHOLDER}/{}/g ${USERNAME}-csr.yaml
  sed -i s/USERNAME/${USERNAME}/g ${USERNAME}-csr.yaml
  kubectl apply -f ${USERNAME}-csr.yaml

  # 批准该CSR
  kubectl certificate approve ${USERNAME}

  # 获取已签署的证书
  kubectl get csr ${USERNAME} -o jsonpath='{.status.certificate}' | base64 --decode > ${USERNAME}.crt

  # 设置集群信息
  kubectl config set-cluster kubernetes --server=${SERVER} --certificate-authority=${K8S_CA_CRT} --kubeconfig=${USERNAME}-kubeconfig.yaml

  # 设置用户凭据
  kubectl config set-credentials ${USERNAME} --client-certificate=${USERNAME}.crt --client-key=${USERNAME}.key --kubeconfig=${USERNAME}-kubeconfig.yaml

  # 设置上下文
  kubectl config set-context ${USERNAME}-context --cluster=kubernetes --user=${USERNAME} --kubeconfig=${USERNAME}-kubeconfig.yaml

  # 使用新的上下文
  kubectl config use-context ${USERNAME}-context --kubeconfig=${USERNAME}-kubeconfig.yaml

  # 验证当前用户是否能获取pods
  kubectl auth can-i get pods

  # 验证指定用户是否能获取pods
  kubectl auth can-i get pods --as=${USERNAME}

  # 测试生成的 kubeconfig.yaml 是否有用
  kubectl get pods --kubeconfig=${USERNAME}-kubeconfig.yaml

  # 验证生成的证书和私钥是否一致
  openssl x509 -noout -modulus -in $USERNAME.crt | openssl sha256
  openssl rsa -noout -modulus -in $USERNAME.key | openssl sha256

  # 确保用户不能执行其它操作
  # kubectl run nginx --image=nginx --kubeconfig=${USERNAME}-kubeconfig.yaml

  cp ${USERNAME}-kubeconfig.yaml config
#+end_src
** create.sh
#+begin_src shell
  read -p "输入用户名: " USERNAME
  read -p "输入组名: " GROUPNAME

  mkdir $USERNAME

  cp auth.sh template-csr.yaml $USERNAME
  SERVER=`kubectl cluster-info | grep "Kubernetes control plane" | awk '{print $NF}' | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g'`
  sed -i "s|USERNAME_PLACEHOLDER|${USERNAME}|g" $USERNAME/auth.sh
  sed -i "s|GROUPNAME_PLACEHOLDER|${GROUPNAME}|g" $USERNAME/auth.sh
  sed -i "s|SERVER_PLACEHOLDER|${SERVER}|g" $USERNAME/auth.sh

  cd $USERNAME && /bin/bash auth.sh
#+end_src
** template-csr.yaml
#+begin_src yaml
  apiVersion: certificates.k8s.io/v1
  kind: CertificateSigningRequest
  metadata:
    name: USERNAME
  spec:
    request: MY-CSR
    signerName: kubernetes.io/kube-apiserver-client
    usages:
    - digital signature
    - key encipherment
    - client auth
#+end_src
* 创建ServiceAccount
用户主要是人操作用的，比如我们要查看Pod信息，创建Pod等，得要有一定权限才能执行这些动作。

而SA则主要是Pod用的，相当于如果一个Pod要访问某些资源，他也得要被分配某些Role/ClusterRole才能访问

#+begin_src yaml
  # 保存在sa.yaml，然后 ka sa.yaml
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: my-service-account
    namespace: default  # 可选，默认是当前名称空间 ServiceAccount
#+end_src

#+begin_src shell
  k create sa my-service-account
#+end_src
