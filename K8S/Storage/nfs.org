#+TITLE: 在Kubernetes中安装NFS
#+DATE: 2023-09-28 15:46:01
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Kubernetes NFS
#+CATEGORIES: Kubernetes

* 使用yaml文件安装NFS
#+begin_src yaml
  # 创建provisioner
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: nfs-provisioner
    labels:
      app: nfs-provisioner
    namespace: nfs
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: nfs-provisioner
    template:
      metadata:
        labels:
          app: nfs-provisioner
      spec:
        serviceAccountName: nfs-provisioner
        containers:
          - name: nfs-provisioner
            image: misterli/k8s.gcr.io_sig-storage_nfs-subdir-external-provisioner:v4.0.2
            volumeMounts:
              - name: nfs-root
                mountPath: /persistentvolumes
            env:
              - name: PROVISIONER_NAME
                value: k8s-sigs.io/nfs-subdir-external-provisioner
              - name: NFS_SERVER
                value: 192.168.3.124
              - name: NFS_PATH
                value: /mnt/share
        volumes:
          - name: nfs-root
            nfs:
              server: 192.168.3.124
              path: /mnt/share
  ---
  # 创建ServiceAccount
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: nfs-provisioner
    # replace with namespace where provisioner is deployed
    namespace: nfs
  ---
  kind: ClusterRole
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: nfs-provisioner-runner
  rules:
    - apiGroups: [""]
      resources: ["nodes"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["persistentvolumes"]
      verbs: ["get", "list", "watch", "create", "delete"]
    - apiGroups: [""]
      resources: ["persistentvolumeclaims"]
      verbs: ["get", "list", "watch", "update"]
    - apiGroups: ["storage.k8s.io"]
      resources: ["storageclasses"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["create", "update", "patch"]
  ---
  kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: run-nfs-provisioner
  subjects:
    - kind: ServiceAccount
      name: nfs-provisioner
      # replace with namespace where provisioner is deployed
      namespace: nfs
  roleRef:
    kind: ClusterRole
    name: nfs-provisioner-runner
    apiGroup: rbac.authorization.k8s.io
  ---
  kind: Role
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: leader-locking-nfs-provisioner
    # replace with namespace where provisioner is deployed
    namespace: nfs
  rules:
    - apiGroups: [""]
      resources: ["endpoints"]
      verbs: ["get", "list", "watch", "create", "update", "patch"]
  ---
  kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: leader-locking-nfs-provisioner
    # replace with namespace where provisioner is deployed
    namespace: nfs
  subjects:
    - kind: ServiceAccount
      name: nfs-provisioner
      # replace with namespace where provisioner is deployed
      namespace: nfs
  roleRef:
    kind: Role
    name: leader-locking-nfs-provisioner
    apiGroup: rbac.authorization.k8s.io
  ---
  # 创建StorageClass
  apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    name: managed-nfs-storage

  # 等于 provisioner.PROVISIONER_NAME
  provisioner: k8s-sigs.io/nfs-subdir-external-provisioner
  reclaimPolicy: Delete
  allowVolumeExpansion: true
  parameters:
    pathPattern: "${.PVC.namespace}-${.PVC.name}"
    onDelete: delete
#+end_src
* 使用helm安装NFS
** 下载并解压
#+begin_src shell
  helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
  helm pull nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
#+end_src
** 修改values.yaml
#+begin_src yaml
  replicaCount: 1
  strategyType: Recreate

  image:
    repository: misterli/k8s.gcr.io_sig-storage_nfs-subdir-external-provisioner
    tag: v4.0.2
    pullPolicy: IfNotPresent
  imagePullSecrets: []

  nfs:
    server: 192.168.3.124
    path: /mnt/share
    mountOptions:
    volumeName: nfs-subdir-external-provisioner-root
    # Reclaim policy for the main nfs volume
    reclaimPolicy: Retain

  # For creating the StorageClass automatically:
  storageClass:
    create: true

    # Set a provisioner name. If unset, a name will be generated.
    provisionerName: k8s-sigs.io/nfs-subdir-external-provisioner

    # Set StorageClass as the default StorageClass
    # Ignored if storageClass.create is false
    defaultClass: false

    # Set a StorageClass name
    # Ignored if storageClass.create is false
    name: managed-nfs-storage

    # Allow volume to be expanded dynamically
    allowVolumeExpansion: true

    # Method used to reclaim an obsoleted volume
    reclaimPolicy: Delete

    # When set to false your PVs will not be archived by the provisioner upon deletion of the PVC.
    archiveOnDelete: true

    # If it exists and has 'delete' value, delete the directory. If it exists and has 'retain' value, save the directory.
    # Overrides archiveOnDelete.
    # Ignored if value not set.
    onDelete:

    # Specifies a template for creating a directory path via PVC metadata's such as labels, annotations, name or namespace.
    # Ignored if value not set.
    pathPattern: ${.PVC.namespace}-${.PVC.name}

    # Set access mode - ReadWriteOnce, ReadOnlyMany or ReadWriteMany
    accessModes: ReadWriteOnce

    # Set volume bindinng mode - Immediate or WaitForFirstConsumer
    volumeBindingMode: Immediate

    # Storage class annotations
    annotations: {}

  leaderElection:
    # When set to false leader election will be disabled
    enabled: true

  ## For RBAC support:
  rbac:
    # Specifies whether RBAC resources should be created
    create: true

  # If true, create & use Pod Security Policy resources
  # https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  podSecurityPolicy:
    enabled: false

  # Deployment pod annotations
  podAnnotations: {}

  ## Set pod priorityClassName
  # priorityClassName: ""

  podSecurityContext: {}

  securityContext: {}

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true

    # Annotations to add to the service account
    annotations: {}

    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Additional labels for any resource created
  labels: {}

  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
#+end_src
