#+TITLE: Pod
#+DATE: 2023-09-28 15:54:33
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Kubernetes Pod
#+CATEGORIES: Kubernetes

* Pod的关键概念
K8S中，最重要的就是Pod。Pod是最小最基本的单元。它的主要作用就是将一组特定功能的容器进行绑定。一般情况下会是一个主容器，以及多个辅助容器。
在同一个Pod中，所有的容器，共享IP地址，端口空间和存储。这使得容器之间通信和共享数据变得更加容易。
Pod中的数据是短暂的，Pod一旦死亡，其中的数据也会消亡。所以需要Volume，PersistentVolume以及StorageClass等资源来使数据持久化。
一般通过 ConfigMap 以及 Secret 来为Pod提供配置
另一个与Pod紧密相关的的是Service，Pod想要对外提供服务，一般都会绑定一个Service。Pod会因为各种原因重启(如节点故障，扩缩容操作等)，它的IP一般都是会变化的。
而Service因为它很简单，它能提供一个DNS，这样无论Pod如何变化，我们只要认准了Service，便一定能正确访问服务。
另外一个使用Service的重要原因是它会为Pod提供负载均衡。
Service使用Endpoints对象来跟踪Pod的IP地址。
** Pod的生命周期
1. Pending: 该Pod已创建,但是是还有一个或者多个Container镜像没有创建
2. Running: Pod以及所有容器已创建,且至少有一个容器处于运行状态,正在启动状态或正在重启状态
3. Succeeded: Pod内所有容器均成功挂靠，且不会再重启
4. Failed: Pod内所有容器均已退出，但是至少有一个为退出失败状态
5. Unknown: 未知原因无法获取Pod的状态，比如网络原因

** Pod的重启策略
1. Always: 当容器失效时,由kubelet自动重启该容器
2. OnFailure: 当容器终止运行且退出码不为0时由kubelet自动重启
3. Never: 无论如何，不重启
* InitContainer
在应用容器启动之前运行，用于完成一些预备工作。
1. 环境初始化：例如，设置配置文件或创建必要的目录和权限。
2. 依赖检查：例如，等待一个数据库或其他服务变得可用。
3. 数据预处理：例如，下载应用程序需要的数据或执行数据库迁移。

主要特点如下:
1. 顺序执行：Init Containers 是按照在 Pod 配置中定义的顺序依次执行的。
2. 失败重试：如果某个 Init Container 失败，Kubernetes 会重启 Pod，直到该 Init Container 成功。
3. 共享存储卷：Init Containers 可以与应用容器共享数据卷。

以下是一个例子:
#+begin_src yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: my-pod
  spec:
    initContainers:
    - name: init-myservice
      image: busybox
      command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
    containers:
    - name: my-container
      image: my-image
#+end_src
* StartupProbe
用于检查应用容器是否已成功启动，特别适用于启动时间长的应用。

startupProbe成功之后livenessProbe和readinessProbe才会开始工作。
startupProbe的存在主要是因为，livenessProbe如果失败了，便会重启容器，而如果容器需要准备一段时间才会响应成功给livenessProbe，那么在它准备好之前，就有可能被livenessProbe重启。为了避免这个问题，引入了startupProbe。

*这里startupProbe和readinessProbe看起来是有点功能重复的，它们最大的不同在于startupProbe只会运行一次，而readinessProbe在整个生命周期中一直存在*

1. 长时间初始化：对于需要较长时间初始化的应用。
2. 一次性健康检查：应用启动后进行一次性的健康检查。
* LivenessProbe
用于检查应用是否还在运行，如果不是，则重新启动应用容器。
1. 检测死锁：例如，一个多线程应用中的死锁。
2. 检测资源不足：例如，应用内存泄漏。
* ReadinessProbe
用于检查应用是否准备好接受流量，如果不是，则从 Service 的负载均衡器中移除。
1. 动态配置：例如，应用需要一些时间来加载大型数据集或配置文件。
2. 依赖服务可用性：例如，应用依赖于外部服务，并需要等待该服务可用。
* 探针检测一共有三种类型
以下是一些关键参数:
1. initialDelaySeconds：容器启动后，等待多少秒再进行首次探测。
2. periodSeconds：执行探测的频率(以秒为单位)。
3. timeoutSeconds：等待探测结果的超时时间。
4. successThreshold：探测被视为成功之前需要连续成功的最小次数。
5. failureThreshold：探测被视为失败之前允许失败的次数。
** HTTP
#+begin_src yaml
  readinessProbe:
    httpGet:
      path: /readiness
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
#+end_src
** TCP
#+begin_src yaml
  readinessProbe:
    tcpSocket:
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
#+end_src
** Exec
#+begin_src yaml
  readinessProbe:
    exec:
      command:
      - cat
      - /tmp/ready
    initialDelaySeconds: 5
    periodSeconds: 5
#+end_src

** 一个使用readinessProbe的例子
#+begin_src yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: nginx-deployment-example
  spec:
    replicas: 3  # 定义Pod的数量
    selector:
      matchLabels:  # 与template.metadata.labels对应
        app: nginx
        environment: test
    minReadySeconds: 10 # ready 10秒钟才能对外声明自已是ready的
    strategy:  # Pod升级与回滚的策略
      type: RollingUpdate # 默认策略
      rollingUpdate:
        maxUnavailable: 1 # rollout时最多有多少个Pod不可用
        maxSurge: 1 # rollout时最多比replicas参数多几个Pod

    template:
      metadata:
        labels:
          app: nginx
          environment: test
        annotations:
          kubernetes.io/change-cause: to 1.19 # rollout history 的 CHANGE CAUSE 列
      spec:
        containers:
        - name: nginx
          image: nginx:1.19
          ports:
          - containerPort: 80
          command:
          - /bin/sh
          - -c
          - |
            touch /usr/share/nginx/html/ready
            echo "You have been servedd by Pod with IP address: $(hostname -i)" > /usr/share/nginx/html/index.html
            nginx -g "daemon off;"
          readinessProbe:
            httpGet:
              path: /ready
              port: 80
            initialDelaySeconds: 5  # 容器启动5秒后才开始探测
            periodSeconds: 2  # 每2秒进行一次探测
            timeoutSeconds: 10 # 如果10秒没有返回则视为失败
            successThreshold: 1 # 只要成功一次则视为成功
            failureThreshold: 2 # 失败2次则视为失败
#+end_src
* 优先级
当Node结点资源不足时，K8S会根据优先级来释放资源，尽量保证优先级高的Pod能获得更多的资源
** 定义优先级
#+begin_src yaml
  apiVersion: scheduling.k8s.io/v1
  kind: PriorityClass
  metadata:
    name: high-priority
  value: 10000  # 值越大，优先级越高
  globalDefault: false
  description: "Priority"
#+end_src

** 设置优先级
#+begin_src yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: nginx
    labels:
      env: test
  spec:
    containers:
      - name: nginx
        image: nginx
        imagePullPolicy: IfNotPresent
    priorityClassName: high-priority
#+end_src
* 使用NodeSelector定向调度
以下是一个简单的例子。只要Node有 disktype=ssd
的例子，Pod就有可能被调度到该Node。如果所有Node都没有这个标签，那么Pod将无法被调度。
#+begin_src yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: ssd-pod
  spec:
    containers:
    - name: nginx
      image: nginx
    nodeSelector:
      disktype: ssd
#+end_src
* Traint 与 Toleration
为结点打taint
#+begin_src shell
  k taint nodes NODE-NAME KEY=VALUE:EFFECT
#+end_src
#+begin_src yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: gpu-pod
  spec:
    containers:
    - name: gpu-container
      image: my-gpu-image
    tolerations:                    # gpu-pod能够容忍key为gpu，value为true的traint，并且effect为NoSchedule
    - key: "gpu"                    # 与KEY匹配
      operator: "Equal"             # Equal Exists
      value: "true"                 # 与VALUE匹配
      effect: "NoSchedule"          # 与EFFECT匹配
#+end_src
在Pod上设置tolerations的时候设置effect的主要作用是，它决定了Pod对taint的容忍程度，如果不添加这个字段，Pod有可能被调度到意想不到的结点上。

其中Effect有有三个值:
1. NoSchedule: Pod不会被调度到此结点
2. PreferNoSchedule: 尽量避免Pod调度到此结点
3. NoExecute: 已经在此结点运行的Pod会被驱逐，新的Pod不会被调度到此结点

operator有以下两种值:
1. Equal: Key，Value和Effect一定完全匹配
2. Exists: Key和Effect必须完全匹配
* 亲和性
亲和性分为两类，**nodeAffinity** **podAffinity**

其中nodeAffinity用于设置Pod对Node的选择偏好。
podAffinity也是对Node的选择偏好，不同的是podAffinity更多的关注点在于Node已经存在的Pod。

1. RequiredDuringSchedulingIgnoredDuringExecution: 必须满足指定的规则才会把Pod调度到Node上。当多个matchExpressions同时存在时，则满足所有的matchExpressions才算满足了nodeSelectorTerm。
2. PreferedDuringSchedulingIgnoredDuringExecution: 强调优先满足指定规则，调度器会尝试调度Pod到Node上。多个优先级规则可以设置权重。当多个matchExpressions同时存在时，则某个结点满足得越多，被调度到该结点上的可能性越高。当然这里还会有些例外情况，比如结点资源不足等。
3. 而IgnoredDuringExecution的意思是：如果一个Pod已经在某个结点上运行了，当这个Pod的标签发生了改变，不再满足要求了，这个时候Pod不会被重新调度。
4. operator有以下几种值:

  | 值           | 含意                      |
  |--------------|---------------------------|
  | In           | key指明的值在某个列表中   |
  | NotIn        | key指明的值不在某个列表中 |
  | Gt           | key指明的值大于某个值     |
  | Lt           | key指明的值小于某个值     |
  | Exists       | key存在                   |
  | DoesNotExist | key不存在                 |

** nodeAffinity 的例子
#+begin_src yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: with-node-affinity
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch # 标签名
                operator: In
                values:
                  - amd64
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: disk-type
                  operator: In # In,NotIn,Exists,DoesNotExist,Gt,Lt
                  values:
                    - ssd
    containers:
      - name: with-node-affinity
        image: nginx
        imagePullPolicy: IfNotPresent
#+end_src
** podAffinity的例子
podAffinity又分为两类 **podAffinity** 与 **podAntiAffinity**。
通俗点说就是 podAffinity定义了更加偏好被调度到某些Node。podAntiAffinity则定义了更加不偏好被调度到某些Node。
#+begin_src yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: pod-flag
    labels:
      security: "S1"
      app: "nginx"
  spec:
    containers:
      - name: nginx
        image: nginx
        imagePullPolicy: IfNotPresent
  ---
  apiVersion: v1
  kind: Pod
  metadata:
    name: pod-affinity
  spec:
    affinity:
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: security
                  operator: In
                  values:
                    - S1
            topologyKey: kubernetes.io/hostname # 如果两个Pod拥有相同的 hostname,那么两个 Pod处于同一结点
    containers:
      - name: with-pod-affinity
        image: redis
        imagePullPolicy: IfNotPresent
  ---
  apiVersion: v1
  kind: Pod
  metadata:
    name: anti-affinity
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - nginx
            topologyKey: kubernetes.io/hostname
    containers:
      - name: anti-affinity
        image: redis
        imagePullPolicy: IfNotPresent
#+end_src
*** topologyKey
1. required的亲和性中 topologyKey不能为空
2. 如果 Admission Controller 包含了 LimitPodHardAntiAffinityTopology，那么required 的亲和性必须为 kubernetes.io/hostname
3. preferred的亲和性中，如果topologyKey为空，那么为默认值 kubernetes.io/hostname failure-domain.beta.kubernetes.io/zone faliure-domain.beta.kubernetes.io/region的组合
4. 如果不是上述情况，可以使用任意合法的topologyKey

> podAffinity/podAntiAffinity是关于Pod与Pod之间的亲和性的
> 这里有一个重点关键字就是 **topologyKey**，必须要理解这个，才能理解 podAffinity。
> 假设有这样的配置，__topologyKey: region__
> 如果两个node，同时有region标签，并且值相同，那么认为它们是在同一个拓扑区域中的，即使它们实际相隔千里

* 静态Pod
在 Kubernetes 中，静态 Pod(Static Pod)是直接由 kubelet 守护进程在某个特定节点上管理的 Pod，而不是由 API Server 和其他控制平面组件管理。静态 Pod 的定义通常存储在磁盘上的某个特定目录中，kubelet 会周期性地检查这个目录，并自动创建或删除相应的 Pod。

这个特定目录由配置文件 **/var/lib/kubelet/config.yaml** 中的 **staticPodPath** 指定。一般为 /etc/kubernetes/manifests。这个目录会被定期扫描，并根据该目录下的yaml文件创建静态Pod。

也可以在启动 kubelete时指定 --manifest-url 来指定一个HTTP的地址，kubelet会根据这个url来定期下载yaml文件来创建静态Pod。
