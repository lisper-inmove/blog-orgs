#+TITLE: Namespace
#+DATE: 2023-09-28 15:07:31
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Kubernetes Namespace
#+CATEGORIES: Kubernetes

* Namespace的作用

Kubernetes（简称 K8s）的 Namespace 是一个用于将集群资源分隔成多个虚拟集群的机制。每个 Namespace 都提供了一个独立的、隔离的环境，使得多个团队或项目可以在同一个物理集群上独立地工作，而不会相互干扰。
以下是关于 Kubernetes Namespace 的一些详细知识点：
1. *目的*: Namespace 主要用于多租户环境，例如大型组织中的多个团队或项目，它们需要在同一个集群上运行应用程序，但希望保持资源的隔离。
2. *默认 Namespace*: 当你首次安装 Kubernetes 时，会有几个默认的 Namespace：
  - *default*: 如果没有明确指定 Namespace，大多数资源默认都会创建在这里。
  - *kube-system*: 由 Kubernetes 系统自身使用，用于存放系统组件。
  - *kube-public*: 这是一个特殊的 Namespace，通常用于存放集群范围内的公共资源。
  - *kube-node-lease*: 用于存放与节点心跳相关的租约对象。
3. *资源隔离*: Namespace 提供了一种将资源（如 Pod、Service 和 Deployment）从其他 Namespace 隔离开来的方法。但需要注意的是，Namespace 本身并不提供网络隔离。要实现网络隔离，通常需要使用网络策略或特定的网络解决方案。
4. *资源配额*: 可以为每个 Namespace 设置资源配额，限制其可以使用的 CPU、内存等资源的数量。
5. *命名限制*: Namespace 的名称必须是唯一的，但资源（如 Pod 或 Service）的名称只需要在其所属的 Namespace 内唯一。
6. *使用*: 当创建、获取或删除集群资源时，可以使用 `--namespace` 或 `-n` 标志来指定 Namespace，例如,  =kubectl get pods -n my-namespace=
7. *删除*: 删除一个 Namespace 会删除该 Namespace 下的所有资源。
8. *限制*: 并非所有的 Kubernetes 资源都受到 Namespace 的限制。有些资源是集群范围的，例如节点（Node）和持久卷（PersistentVolume）。
* 常用的命令
#+begin_src shell
  k create ns NS-NAME
  k delete ns NS-NAME
  k get pods -n NS-NAME
  k config set-context --current --namespace=NS-NAME # 设置默认的namespace，原本默认的是default
  kc namespace NS-NAME # 命名空间的详细信息(这里也会列出资源限制信息)
#+end_src
* 常用的yaml
** 创建Namespace
#+begin_src shell
  apiVersion: v1
  kind: Namespace
  metadata:
    name: <namespace-name>
#+end_src
** 限制某个Namespace的使用资源
#+begin_src shell
  apiVersion: v1
  kind: ResourceQuota
  metadata:
    name: <quota-name>
    namespace: <namespace-name>
  spec:
    hard:
      pods: "10"
      requests.cpu: "4"
      requests.memory: 2Gi
      limits.cpu: "8"
      limits.memory: 4Gi
#+end_src
** 为某个Namespace下的Pod, Container设置限制
#+begin_src shell
  apiVersion: v1
  kind: LimitRange
  metadata:
    name: limitrange-redis
    namespace: redis
  spec:
    limits:
    - type: Pod
      max:
        cpu: "2"
        memory: 1Gi
      min:
        cpu: "100m"
        memory: 100Mi
    - type: Container
      default:
        cpu: "500m"
        memory: 500Mi
      defaultRequest:
        cpu: "200m"
        memory: 200Mi
      max:
        cpu: "1"
        memory: 1Gi
      min:
        cpu: "100m"
        memory: 100Mi
#+end_src
