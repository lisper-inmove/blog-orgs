#+TITLE: Job 与 CronJob
#+DATE: 2023-09-28 15:25:26
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Kubernetes Job CronJob
#+CATEGORIES: Kubernetes

* Job

Job主要用于执行一次性任务。根据配置，它会创建一个或多个Pod来执行任务。

#+begin_src yaml
  apiVersion: batch/v1
  kind: Job
  metadata:
    name: my-job
  spec:
    # 指明需要成功完成的Pod数量
    completions: 10
    # 并行的Pod数量。我们可以只配置parallelism(不配置completions)。
    parallelism: 5
    template:
      spec:
        containers:
        - name: my-container
          image: my-image

          # 1. Never: Pod失败(容器非0退出), 决不重启。但是他会创建一个新的Pod来完成任务，失败的Pod还依然留在集群中，可以用于排查问题。
          # 2. OnFailure: 失败了就重启容器。
        restartPolicy: OnFailure
#+end_src

* CronJob
#+begin_src yaml
  apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: my-cronjob
  spec:
    # 和Linux的cronjob参数一致。用于指定执行时间或周期
    schedule: "*/1 * * * *"
    # 如果由于某种原因错过了任务的执行时间，这个字段指定了可以开始任务的最后期限。
    startingDeadlineSeconds: 100

    # 指定如何处理并发执行的任务。意思是上一次任务还没有做完，下一次执行的时间又到了，这时候要怎么做的策略。
    # 1. Allow: 允许并发
    # 2. Forbid: 禁止并发
    # 3. Replace: 替换旧任务
    concurrencyPolicy: "Forbid"

    # 布尔值，指定是否暂停新的 CronJob 的创建。
    # 1. 当 suspend 设置为 true 时CronJob的调度将被暂停，这意味着即使Cron表达式指定的时间到达，也不会创建新的Job实例。
    # 2. 当 suspend 设置为 false 或未设置时(默认为false)，CronJob 将按照其 schedule 字段中定义的 Cron 表达式正常执行。

    # 以下是这个参数为true的一些场景:
    # 1. 维护或调试: 暂停 CronJob 以进行集群维护或调试时
    # 2. 资源限制: 如果集群资源有限，暂时无法承载额外的 Job 执行，可以暂停一些不紧急的 CronJob。
    # 3. 依赖问题: 如果 CronJob 依赖于其他服务或资源，而这些依赖暂时不可用，可以暂停 CronJob 直到依赖恢复。
    suspend: false

    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: my-container
              image: my-image
            restartPolicy: OnFailure

    # 指定要保留的成功执行的任务的历史记录数。
    successfulJobsHistoryLimit: 3

    # 指定要保留的失败任务的历史记录数。
    failedJobsHistoryLimit: 1

#+end_src
