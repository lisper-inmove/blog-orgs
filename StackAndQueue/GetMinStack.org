#+TITLE: Get minimal value stack O(1)
#+DATE: 2023-09-28 00:35:01
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Implement a datastructure which has a function named getMin, always return the minimal value.
#+KEYWORDS: Stack
#+CATEGORIES: DataStructure

* Solution

Here we define two stacks A and B. Top of A is the newest number, top of B is the minimal number.
Everytime push a new number to A, /peek/ the minimal number from B, compare this two numbes, if new number is *equal or smaller* than the peeked number, push the newest to B.
Everytime pop a number from A, /peek/ the minimal number from B, if they are equal, pop from B also.
/getMin/ just peek from B. So it is O(1)

#+begin_src python :results output
  import random

  class GetMinStack:

      def __init__(self, size):
          self.size = size
          self.dataStack = []
          self.minStack = []

      def push(self, value):
          if self.isFull():
              return float('inf')
          self.dataStack.append(value)
          if len(self.minStack) == 0:
              self.minStack.append(value)
          else:
              lastMin = self.minStack[-1]
              if lastMin >= value:
                  self.minStack.append(value)

      def pop(self):
          if self.isEmpty():
              return float('inf')
          v0 = self.dataStack.pop()
          v1 = self.minStack.pop()
          if v0 != v1:
              self.minStack.append(v1)
          return v0

      def peek(self):
          if self.isEmpty():
              return float('inf')
          return self.dataStack[-1]

      def isEmpty(self):
          if len(self.dataStack) == 0:
              return True
          return False

      def isFull(self):
          if len(self.dataStack) == self.size:
              return True
          return False

      def getMin(self):
          if len(self.minStack) == 0:
              return float('inf')
          return self.minStack[-1]


  if __name__ == '__main__':
      obj = GetMinStack(100)

      for i in range(0, 20):
          obj.push(random.randint(5, 90))
      print(obj.dataStack)
      print(obj.minStack)
      print(obj.getMin())
#+end_src

#+RESULTS:
: [40, 25, 42, 88, 40, 22, 65, 49, 57, 62, 15, 54, 68, 53, 83, 20, 41, 72, 89, 69]
: [40, 25, 22, 15]
: 15
