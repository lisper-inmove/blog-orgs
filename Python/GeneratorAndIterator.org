#+TITLE: Generator And Iterator
#+DATE: 2024-05-02 01:16:40
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Usage and principles of Generator and Iterator.
#+KEYWORDS: Generator Iterator
#+CATEGORIES: Python

* Iterator

__iter__ And __next__

#+begin_src python :results output
  class Fib:

      a = 0
      b = 1

      def __iter__(self):
          return self

      def __next__(self):
          self.a, self.b = self.b, self.a + self.b
          if (self.b >= 100):
              raise StopIteration()
          return self.b


  if __name__ == '__main__':
      obj = Fib()
      for value in obj:
          print(value, end=",")
#+end_src

#+RESULTS:
: 1,2,3,5,8,13,21,34,55,89,

* Generator

Function with *yield* keyword, its return value is a Generator.

[[https://www.inmove.top/blog/Li9wb3N0cy9QeXRob24vQ29yb3V0aW5lLm9yZw#1.2][Section 1.2 How yield work]]

#+begin_src python :results output
  def fib_func():
      a, b = 0, 1
      while True:
          a, b = b, a + b
          if (b >= 100):
              break
          yield b


  g = fib_func()
  for value in g:
      print(value, end=",")
#+end_src

#+RESULTS:
: 1,2,3,5,8,13,21,34,55,89,

* Difference between Generators and Iterators
| Feature     | Iterator                                   | Generator                                       |
| Creation    | Manually implemented class                 | Defined using *yield* in a function             |
| Memory      | Stores all values in memory                | Generates values on demand                      |
| State       | Needs to manage its own state              | State is automatically handled by the generator |
| Reusability | Once exhausted, cannot be reused           | Can be used multiple times.                     |
| Performance | May have more overhead for large sequences | Optimized for large sequences.                  |
