#+TITLE: gRPC
#+DATE: 2023-09-27 23:55:53
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: gRPC (gRPC Remote Procedure Call) is an open-source framework developed by Google for enabling efficient and scalable communication between services. It is designed to work across different languages and platforms
#+KEYWORDS: Python gRPC
#+CATEGORIES: Python

* install dependencies

#+begin_src shell
  python -m pip install grpcio
  python -m pip install grpcio-tools
  python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. xxx.proto
#+end_src

* define Protobuf file

#+NAME: hello.proto
#+begin_src protobuf
  syntax = "proto3";

  service Hello {
    // client send a message, server send back one
    rpc SayHello (HelloRequest) returns (HelloResponse);
    // send one, back array
    rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);
    // send array, back one
    rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);
    // send array, back array
    rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);
  }

  message HelloRequest {
    string greeting = 1;
  }

  message HelloResponse {
    string reply = 1;
  }

#+end_src

* gRPC in Python
** one-one
*** Server
#+begin_src python
  # -*- coding: utf-8 -*-

  import random
  import time
  from datetime import datetime

  from concurrent import futures

  import grpc
  import hello_pb2
  import hello_pb2_grpc

  total = 0

  class Hello(hello_pb2_grpc.HelloServicer):

      def SayHello(self, request, context):
          # 5. Client can call this function
          global total
          total += 1
          print(f">>>> {total} >>> {request} {context} {datetime.now()}")
          time.sleep(random.randint(1, 10) / float(10))
          return hello_pb2.HelloResponse(reply='Hello, %s!' % request.greeting)

  def serve():
      port = '50051'
      # 1. Create server
      server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
      # 2. Add server provider
      hello_pb2_grpc.add_HelloServicer_to_server(Hello(), server)
      # 3. Listen port
      server.add_insecure_port('[::]:' + port)
      # 4. Start server
      server.start()
      print("Server started, listening on " + port)
      server.wait_for_termination()


  if __name__ == '__main__':
      serve()

#+end_src
*** Client
#+begin_src python
  # -*- coding: utf-8 -*-

  import grpc
  import hello_pb2
  import hello_pb2_grpc


  def run():
      print("Will try to greet world ...")
      # 1. Connect to server
      with grpc.insecure_channel('localhost:50051') as channel:
          # 2. Create a stub. Think about you have a class object with a method named SayHello(defined in Server.py)
          stub = hello_pb2_grpc.HelloStub(channel)
          # 3. Call SayHello function from client side
          response = stub.SayHello(hello_pb2.HelloRequest(greeting='inmove'))
      print("Greeter client received: " + response.reply)

  if __name__ == '__main__':
      run()
#+end_src

** one-array
*** Server
#+begin_src python
  # -*- coding: utf-8 -*-

  from concurrent import futures

  import grpc
  from hello_pb2 import HelloResponse
  from hello_pb2_grpc import HelloServicer

  import hello_pb2_grpc

  NUMBER_OF_REPLY = 10

  class Hello(HelloServicer):

      def LotsOfReplies(self, request, context):
          print(f"Serving sayHello request {request} {context}", )
          for i in range(NUMBER_OF_REPLY):
              yield HelloResponse(reply=f"Hello number {i}, {request.greeting}!")

  def serve() -> None:
      server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
      hello_pb2_grpc.add_HelloServicer_to_server(Hello(), server)
      listen_addr = "[::]:50051"
      server.add_insecure_port(listen_addr)
      print("Starting server on %s", listen_addr)
      server.start()
      server.wait_for_termination()

  if __name__ == "__main__":
      serve()

#+end_src
#+begin_src python
  # -*- coding: utf-8 -*-

  import grpc
  from hello_pb2 import HelloRequest

  import hello_pb2_grpc

  def run() -> None:
      with grpc.insecure_channel("localhost:50051") as channel:
          stub = hello_pb2_grpc.HelloStub(channel)

          # Read from an async generator
          for response in stub.LotsOfReplies(
              HelloRequest(greeting="inmove")):
              print("Greeter client received from async generator: " + response.reply)

  if __name__ == "__main__":
      run()

#+end_src
** array-one
*** server
#+begin_src python
  # -*- coding: utf-8 -*-

  from concurrent import futures

  import grpc
  from hello_pb2 import HelloResponse
  from hello_pb2_grpc import HelloServicer

  import hello_pb2_grpc

  NUMBER_OF_REPLY = 10

  class Hello(HelloServicer):

      def LotsOfGreetings(self, request_iterator, context):
          for request in request_iterator:
              print(f"Serving LotsOfGreetings request {request} {context}", )
          return HelloResponse(reply="Hello number inmove!")

  def serve() -> None:
      server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
      hello_pb2_grpc.add_HelloServicer_to_server(Hello(), server)
      listen_addr = "[::]:50051"
      server.add_insecure_port(listen_addr)
      print("Starting server on %s", listen_addr)
      server.start()
      server.wait_for_termination()

  if __name__ == "__main__":
      serve()
#+end_src
*** client
#+begin_src python
  # -*- coding: utf-8 -*-

  import grpc
  from hello_pb2 import HelloRequest

  import hello_pb2_grpc

  def run() -> None:
      with grpc.insecure_channel("localhost:50051") as channel:
          stub = hello_pb2_grpc.HelloStub(channel)

          rs = [
              HelloRequest(greeting="inmove1"),
              HelloRequest(greeting="inmove2"),
          ]

          # Read from an async generator
          response = stub.LotsOfGreetings(iter((rs))) ##### >>>>>> 一定要用 iter这样写 <<<<<<##########
          print("Greeter client received from async generator: " + response.reply)

  if __name__ == "__main__":
      run()
#+end_src
** array-array
*** server
#+begin_src python
  # -*- coding: utf-8 -*-

  from concurrent import futures

  import grpc
  from hello_pb2 import HelloResponse
  from hello_pb2_grpc import HelloServicer

  import hello_pb2_grpc

  class Hello(HelloServicer):

      def BidiHello(self, request_iter, context):
          print(f"Serving BidiHello request {request_iter} {context}", )
          for request in request_iter:
              yield HelloResponse(reply=f"Hello number {request.greeting}!")

  def serve() -> None:
      server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
      hello_pb2_grpc.add_HelloServicer_to_server(Hello(), server)
      listen_addr = "[::]:50051"
      server.add_insecure_port(listen_addr)
      print("Starting server on %s", listen_addr)
      server.start()
      server.wait_for_termination()

  if __name__ == "__main__":
      serve()
#+end_src
*** client
#+begin_src python
  # -*- coding: utf-8 -*-

  import grpc
  from hello_pb2 import HelloRequest

  import hello_pb2_grpc


  def run() -> None:
      with grpc.insecure_channel("localhost:50051") as channel:
          stub = hello_pb2_grpc.HelloStub(channel)

          rs = [
              HelloRequest(greeting="inmove1"),
              HelloRequest(greeting="inmove2"),
          ]

          # Read from an async generator
          for response in stub.BidiHello(iter((rs))): ##### >>>>>> 一定要用 iter这样写 <<<<<<##########
              print("Greeter client received from async generator: " + response.reply)

  if __name__ == "__main__":
      run()
#+end_src
** secure client
#+begin_src python
  # -*- coding: utf-8 -*-

  import grpc
  import proto.grpc_api.grpc_chatgpt_pb2 as grpc_chatgpt_pb
  import proto.grpc_api.grpc_chatgpt_pb2_grpc as grpc_chatgpt_pb_grpc


  def run():

      # if self-signed, root_certificates is needed

      # trusted_certs = ""
      # with open("/home/inmove/pki/ChatGPTClient/cert.pem", "rb") as f:
      #     trusted_certs = f.read()
      # with grpc.secure_channel(self.CHATGPT_CLIENT_HOST, grpc.ssl_channel_credentials(root_certificates=trusted_certs)) as channel:

      with grpc.secure_channel('chat.inmove.top:8443', grpc.ssl_channel_credentials()) as channel:
          stub = grpc_chatgpt_pb_grpc.ChatGPTStub(channel)
          for response in stub.ChatCompletion(grpc_chatgpt_pb.ChatCompletionRequest(
              messages=[
                  grpc_chatgpt_pb.ChatCompletionRequest.ChatCompletionMessage(
                      role="user",
                      content="An solution for leetcode 1001 using Rust"
                  )
              ]
          )):
              print(f"role: {response}")
#+end_src
** coroutine server
#+begin_src python
  # -*- coding: utf-8 -*-


  import asyncio
  import random

  import time
  from datetime import datetime

  import grpc
  import hello_pb2
  import hello_pb2_grpc

  total = 0

  class Hello(hello_pb2_grpc.HelloServicer):

      async def SayHello(self, request, context):
          global total
          total += 1
          print(f">>>> {total} >>> {request} {context} {datetime.now()}")
          time.sleep(random.randint(1, 10) / float(10))
          return hello_pb2.HelloResponse(reply='Hello, %s!' % request.greeting)

  async def serve():
      port = '50051'
      server = grpc.aio.server()
      hello_pb2_grpc.add_HelloServicer_to_server(Hello(), server)
      server.add_insecure_port('[::]:' + port)
      await server.start()
      print("Server started, listening on " + port)
      await server.wait_for_termination()


  if __name__ == '__main__':
      asyncio.run(serve())
#+end_src
* Config Nginx serve grpc
1. http2 on: =listen 8443 ssl http2= before version 1.25
2. =grpc_pass grpc://grpc= if secure_channel, change to =grpc_pass grpcs://grpc=
3. confi nginx: ./configure --with-http_ssl_module --with-http_v2_module

#+begin_src conf
  upstream grpc {
    server 127.0.0.1:50051;
  }

  server {
    server_name domain.name;

    listen 8443 ssl;
    http2 on;
    ssl_certificate /etc/nginx/pki/cert.pem;
    ssl_certificate_key /etc/nginx/pki/key.pem;

    location / {
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        grpc_pass grpc://grpc;
    }
  }
#+end_src
** self-sign
#+begin_src shell
  sudo openssl genpkey -algorithm RSA -out key.pem
  sudo openssl req -new -x509 -key key.pem -out cert.pem -days 3650

  # You are about to be asked to enter information that will be incorporated
  # into your certificate request.
  # What you are about to enter is what is called a Distinguished Name or a DN.
  # There are quite a few fields but you can leave some blank
  # For some fields there will be a default value,
  # If you enter '.', the field will be left blank.
  # -----

  # Some manual pramaters
  # Country Name (2 letter code) [AU]:
  # State or Province Name (full name) [Some-State]:
  # Locality Name (eg, city) []:
  # Organization Name (eg, company) [Internet Widgits Pty Ltd]:
  # Organizational Unit Name (eg, section) []:
  # Common Name (e.g. server FQDN or YOUR name) []:
  # Email Address []:
#+end_src
