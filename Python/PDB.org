#+TITLE: 使用 PDB 调试
#+DATE: 2024-05-03 13:50:33
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: pdb 的常用命令
#+KEYWORDS: pdb
#+CATEGORIES: Python

* pdb 常用命令
1. a: 打印当前函数的参数名和值
2. b: 在指定的 *行号* 或 *函数名* 处设置断点
3. bt: 打印调用栈
4. c: 继续执行直到遇到下一个断点
5. display: 每次表达式改变时，自动打印。undisplay则是从列表中删除。
   如果不带参数，则是显示当前所有的表达式。如果带参数，则表示将这个参数加入到表达式列表中
6. interact: 启动一个交互式解释器
7. j: 跳转到某一行
8. l 或 ll: 列出源码，ll列出得更多
9. p 或 pp: 打印变量
10. rv(retval): 继续执行直到当前函数返回之前
11. s: 进入当前行下一个被调用的函数
12. until [lineno]: 继续执行到某一行(或比它大)，或退出当前循环
13. w: 显示当前位置和调用栈
14. whatis: 显示变量的类型
15. u/d: 调用栈中上下移动。u为进入到上一层, d为进入到下一层
16. source 函数名: 显示一个函数的源代码
17. tbreak: 设置一个临时断点，使用一次后删除
18. disable: 禁用一个或多个断点
19. debug: 启动一个子调试器。用于调试某一个函数。

* display 的例子

进入到pdb中，使用 *display i*
每次i变化时，界面上会自动打印出i的旧值与新值。

#+NAME: pdb-display.py
#+begin_src python :results output
  def test():

      i = 0

      for i in range(0, 5):
          print(f"{i}", end=",")

  if __name__ == '__main__':
      test()
#+end_src

#+RESULTS: pdb-display.py
: 0,1,2,3,4,

* u和d的例子

进入到pdb中之后，使用u可以退回到test函数中，再使用d可以再回到test1

#+begin_src python :results output
  def test1():
      a = 10
      import pdb; pdb.set_trace()
      return a

  def test():
      test1()

  if __name__ == '__main__':
      test()
#+end_src

* debug 的例子
#+begin_src python :results output
  def test1(age):
      age += 1
      return age

  def test2(age):
      test1(33)
      return 39

  def test():
      test1()
      import pdb; pdb.set_trace()
      # 在这里可以使用
      # debug test1(35)
      # 然后使用 s 开始这次debug
      # 最后一使用c来完成这次子调试，然后顺到主调试器
      test2()
      return 90

  if __name__ == '__main__':
      test()
#+end_src
