#+TITLE: 并发编程
#+DATE: 2024-05-02 21:57:31
#+DISPLAY: nil
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: 多线程 多进程编程
#+KEYWORDS: Thread Progress
#+CATEGORIES: Python

* ThreadPoolExecutor

ThreadPoolExecutor(max_workers=None, thread_name_prefix='', initializer=None, initargs=())

max_workers: 最大线程数
initializer: 一个可调用对象
initargs: 调用 initializer 时的参数

#+begin_src python :results output
  from concurrent.futures import ThreadPoolExecutor as Executor, as_completed
  import time

  def do(value):
      print(f"{time.time()} Start {value}")
      time.sleep(2)
      return value

  def wait_on_future():
      f1 = executor.submit(do, 5)
      f2 = executor.submit(do, 3)
      for future in as_completed([f1, f2]):
          print(f"{time.time()} - {future.result()}")


  executor = Executor(max_workers=2)
  wait_on_future()
#+end_src

#+RESULTS:
: 1714660288.8581934 Start 5
: 1714660288.8583086 Start 3
: 1714660290.8588457 - 3
: 1714660290.8588765 - 5

* ProcessPoolExecutor

ProcessPoolExecutor(max_workers=None, mp_context=None, initializer=None, initargs=(), max_tasks_per_child=None)
ProcessPoolExecutor会使用 multiprocessing 模块。
mp_context参数可以是一个 multiprocessing 上下文或是None。
max_tasks_per_child 是指定单个进程在其退出并替换为新工作进程之前可以执行的最大任务数量

#+begin_src python :results output
  from concurrent.futures import ProcessPoolExecutor as Executor, as_completed
  import time

  def do(value):
      print(f"{time.time()} Start {value}")
      time.sleep(2)
      return value

  def wait_on_future():
      f1 = executor.submit(do, 5)
      f2 = executor.submit(do, 3)
      for future in as_completed([f1, f2]):
          print(f"{time.time()} - {future.result()}")


  executor = Executor(max_workers=2)
  wait_on_future()
#+end_src

#+RESULTS:
: 1714660308.8518898 - 3
: 1714660308.852376 - 5
: 1714660306.8501608 Start 3
: 1714660306.8499358 Start 5

* concurrent.futures

FIRST_COMPLETED: 任意可等待对象结束或取消时返回
FIRST_EXCEPTION: 任意可等待对象引发异常而结束时返回
ALL_COMPLETED: 全部结束或取消

#+begin_src python :results output
  import time
  from concurrent.futures import ThreadPoolExecutor
  from concurrent.futures import wait
  from concurrent.futures import FIRST_COMPLETED, ALL_COMPLETED
  from concurrent.futures import as_completed

  def work(worker_number):
      time.sleep(worker_number)
      result = 0
      for i in range(1, 9999999):
          result += i
      print(f"task{worker_number} finished")
      result = f"{worker_number} -> {result}"
      return result


  def run1():
      with ThreadPoolExecutor(5) as t:
          task1 = t.submit(work, 1)
          task2 = t.submit(work, 2)
          task3 = t.submit(work, 3)

          print(f"task1 >>>> {task1.done()}")
          print(f"task2 >>>> {task2.done()}")
          print(f"task3 >>>> {task3.done()}")

          all_tasks = [task1, task2, task3]

          print(wait(all_tasks, return_when=FIRST_COMPLETED, timeout=0.1))

          # as_completed is a generator, return once a time a task complete.
          for future in as_completed(all_tasks):
              result = future.result()
              print(f"main >>>: {result}")

          print(f"task1 >>>> {task1.done()} {task1.result()}")
          print(f"task2 >>>> {task2.done()} {task2.result()}")
          print(f"task3 >>>> {task3.done()} {task3.result()}")

  def run2():
      executor = ThreadPoolExecutor(5)
      i = 1
      for result in executor.map(work, [1, 2, 3]):
          print(f"task{i} >>>> {result}")
          i += 1

  if __name__ == "__main__":
      run1()
      run2()
#+end_src

#+RESULTS:
#+begin_example
task1 >>>> False
task2 >>>> False
task3 >>>> False
DoneAndNotDoneFutures(done=set(), not_done={<Future at 0x7f03a3d54610 state=running>, <Future at 0x7f03a3e39e50 state=running>, <Future at 0x7f03a3d54950 state=running>})
task1 finished
main >>>: 1 -> 49999985000001
task2 finished
main >>>: 2 -> 49999985000001
task3 finished
main >>>: 3 -> 49999985000001
task1 >>>> True 1 -> 49999985000001
task2 >>>> True 2 -> 49999985000001
task3 >>>> True 3 -> 49999985000001
task1 finished
task1 >>>> 1 -> 49999985000001
task2 finished
task2 >>>> 2 -> 49999985000001
task3 finished
task3 >>>> 3 -> 49999985000001
#+end_example
