#+TITLE: Concurrent Programming
#+DATE: 2023-10-02 13:00:12
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Concurrent programming is a form of computing in which several computations are executed during overlapping time periods—concurrently—instead of sequentially
#+KEYWORDS: Thread Process Coroutine
#+CATEGORIES: Python

* Thread && Process

Python provides Multi-Thread and Multi-Process libraries. But for GIL, Multi-Thread only use one CPU
There two class named ThreadPoolExecutor and ProcessPoolExecutor.

#+begin_src python :results output
  import time
  from concurrent.futures import ThreadPoolExecutor
  from concurrent.futures import wait
  from concurrent.futures import FIRST_COMPLETED, ALL_COMPLETED
  from concurrent.futures import as_completed

  def work(worker_number):
      time.sleep(worker_number)
      result = 0
      for i in range(1, 9999999):
          result += i
      print(f"task{worker_number} finished")
      result = f"{worker_number} -> {result}"
      return result


  def run1():
      with ThreadPoolExecutor(5) as t:
          task1 = t.submit(work, 1)
          task2 = t.submit(work, 2)
          task3 = t.submit(work, 3)

          print(f"task1 >>>> {task1.done()}")
          print(f"task2 >>>> {task2.done()}")
          print(f"task3 >>>> {task3.done()}")

          all_tasks = [task1, task2, task3]

          # FIRST_COMPLETED: Wait will return, as long as any task complete.
          # ALL_COMPLETED: Wait for all tasks complete.
          # FIRST_EXCEPTION: Wait will return when any task raise an exception, otherwise it behaves like ALL_COMPLETED
          print(wait(all_tasks, return_when=FIRST_COMPLETED, timeout=0.1))

          # as_completed is a generator, return once a time a task complete.
          for future in as_completed(all_tasks):
              result = future.result()
              print(f"main >>>: {result}")

          print(f"task1 >>>> {task1.done()} {task1.result()}")
          print(f"task2 >>>> {task2.done()} {task2.result()}")
          print(f"task3 >>>> {task3.done()} {task3.result()}")

  def run2():
      executor = ThreadPoolExecutor(5)
      i = 1
      for result in executor.map(work, [1, 2, 3]):
          print(f"task{i} >>>> {result}")
          i += 1

  if __name__ == "__main__":
      run1()
      run2()
#+end_src
* Coroutine
** Code Object && Function Object && Frame
#+begin_verse
Python virtual machine load source code, compile to byte code.
We can get two objects /CodeObject/ and /FunctionObject/
FunctionObject struct has a member called COMMON_FIELDS(func_) generate a member func_code, it points to the CodeObject.
When a function be called, Python interpreter create a Frame. When init the Frame, pass FunctionObject to the Frame, in the Frame there is a f_code point to the CodeObject.

FunctonObject has a member named /co_flags/ one of its bits named *CO_GENERATOR*
If yield keyword exists in the funciton, this bit will be set.
So that When we call a function, just return a generator, the code will not be called.

#+end_verse
*** PyCodeObject
#+begin_src c
  // Include/cpython/code.h

  // To avoid repeating ourselves in deepfreeze.py, all PyCodeObject members are
  // defined in this macro:
  #define _PyCode_DEF(SIZE) {                                                    \
      PyObject_VAR_HEAD                                                          \
                                                                                 \
      /* Note only the following fields are used in hash and/or comparisons      \
       ,*                                                                         \
       ,* - co_name                                                               \
       ,* - co_argcount                                                           \
       ,* - co_posonlyargcount                                                    \
       ,* - co_kwonlyargcount                                                     \
       ,* - co_nlocals                                                            \
       ,* - co_stacksize                                                          \
       ,* - co_flags                                                              \
       ,* - co_firstlineno                                                        \
       ,* - co_consts                                                             \
       ,* - co_names                                                              \
       ,* - co_localsplusnames                                                    \
       ,* This is done to preserve the name and line number for tracebacks        \
       ,* and debuggers; otherwise, constant de-duplication would collapse        \
       ,* identical functions/lambdas defined on different lines.                 \
       ,*/                                                                        \
                                                                                 \
      /* These fields are set with provided values on new code objects. */       \
                                                                                 \
      /* The hottest fields (in the eval loop) are grouped here at the top. */   \
      PyObject *co_consts;           /* list (constants used) */                 \
      PyObject *co_names;            /* list of strings (names used) */          \
      PyObject *co_exceptiontable;   /* Byte string encoding exception handling  \
                                        table */                                 \
      int co_flags;                  /* CO_..., see below */                     \
                                                                                 \
      /* The rest are not so impactful on performance. */                        \
      int co_argcount;              /* #arguments, except *args */               \
      int co_posonlyargcount;       /* #positional only arguments */             \
      int co_kwonlyargcount;        /* #keyword only arguments */                \
      int co_stacksize;             /* #entries needed for evaluation stack */   \
      int co_firstlineno;           /* first source line number */               \
                                                                                 \
      /* redundant values (derived from co_localsplusnames and                   \
         co_localspluskinds) */                                                  \
      int co_nlocalsplus;           /* number of local + cell + free variables */ \
      int co_framesize;             /* Size of frame in words */                 \
      int co_nlocals;               /* number of local variables */              \
      int co_ncellvars;             /* total number of cell variables */         \
      int co_nfreevars;             /* number of free variables */               \
      uint32_t co_version;          /* version number */                         \
                                                                                 \
      PyObject *co_localsplusnames; /* tuple mapping offsets to names */         \
      PyObject *co_localspluskinds; /* Bytes mapping to local kinds (one byte    \
                                       per variable) */                          \
      PyObject *co_filename;        /* unicode (where it was loaded from) */     \
      PyObject *co_name;            /* unicode (name, for reference) */          \
      PyObject *co_qualname;        /* unicode (qualname, for reference) */      \
      PyObject *co_linetable;       /* bytes object that holds location info */  \
      PyObject *co_weakreflist;     /* to support weakrefs to code objects */    \
      _PyExecutorArray *co_executors;      /* executors from optimizer */        \
      _PyCoCached *_co_cached;      /* cached co_* attributes */                 \
      uint64_t _co_instrumentation_version; /* current instrumentation version */  \
      _PyCoMonitoringData *_co_monitoring; /* Monitoring data */                 \
      int _co_firsttraceable;       /* index of first traceable instruction */   \
      /* Scratch space for extra data relating to the code object.               \
         Type is a void* to keep the format private in codeobject.c to force     \
         people to go through the proper APIs. */                                \
      void *co_extra;                                                            \
      char co_code_adaptive[(SIZE)];                                             \
  }

  /* Bytecode object */
  struct PyCodeObject _PyCode_DEF(1);


  /* Masks for co_flags above */
  #define CO_OPTIMIZED    0x0001
  #define CO_NEWLOCALS    0x0002
  #define CO_VARARGS      0x0004
  #define CO_VARKEYWORDS  0x0008
  #define CO_NESTED       0x0010
  #define CO_GENERATOR    0x0020

  /* The CO_COROUTINE flag is set for coroutine functions (defined with
     ``async def`` keywords) */
  #define CO_COROUTINE            0x0080
  #define CO_ITERABLE_COROUTINE   0x0100
  #define CO_ASYNC_GENERATOR      0x0200
#+end_src
*** PyFunctionObject
#+begin_src c
  // Include/cpython/funcobject.h

  #define COMMON_FIELDS(PREFIX) \
      PyObject *PREFIX ## globals; \
      PyObject *PREFIX ## builtins; \
      PyObject *PREFIX ## name; \
      PyObject *PREFIX ## qualname; \
      PyObject *PREFIX ## code;        /* A code object, the __code__ attribute */ \
      PyObject *PREFIX ## defaults;    /* NULL or a tuple */ \
      PyObject *PREFIX ## kwdefaults;  /* NULL or a dict */ \
      PyObject *PREFIX ## closure;     /* NULL or a tuple of cell objects */

  typedef struct {
      COMMON_FIELDS(fc_)
  } PyFrameConstructor;


  typedef struct {
      PyObject_HEAD
      COMMON_FIELDS(func_)        // A func_code point to code_object
      PyObject *func_doc;         /* The __doc__ attribute, can be anything */
      PyObject *func_dict;        /* The __dict__ attribute, a dict or NULL */
      PyObject *func_weakreflist; /* List of weak references */
      PyObject *func_module;      /* The __module__ attribute, can be anything */
      PyObject *func_annotations; /* Annotations, a dict or NULL */
      PyObject *func_typeparams;  /* Tuple of active type variables or NULL */
      vectorcallfunc vectorcall;
      /* Version number for use by specializer.
       ,* Can set to non-zero when we want to specialize.
       ,* Will be set to zero if any of these change:
       ,*     defaults
       ,*     kwdefaults (only if the object changes, not the contents of the dict)
       ,*     code
       ,*     annotations
       ,*     vectorcall function pointer */
      uint32_t func_version;

      /* Invariant:
       ,*     func_closure contains the bindings for func_code->co_freevars, so
       ,*     PyTuple_Size(func_closure) == PyCode_GetNumFree(func_code)
       ,*     (func_closure may be NULL if PyCode_GetNumFree(func_code) == 0).
       ,*/
  } PyFunctionObject;
#+end_src
*** Frame
#+begin_src c
  // Include/internal/pycore_frame.h

  struct _frame {
      PyObject_HEAD
      PyFrameObject *f_back;      /* 上一个执行帧 */
      struct _PyInterpreterFrame *f_frame; /* points to the frame data */
      PyObject *f_trace;          /* 代码的执行情况 */
      int f_lineno;               /* Current line number. Only valid if non-zero */
      char f_trace_lines;         /* Emit per-line trace events? */
      char f_trace_opcodes;       /* Emit per-opcode trace events? */
      char f_fast_as_locals;      /* Have the fast locals of this frame been converted to a dict? */
      /* The frame data, if this frame object owns the frame */
      PyObject *_f_frame_data[1];
  };
#+end_src
** How yield work
#+begin_src python
  import sys

  def test1():
      frame = sys._getframe()
      print(f"Current Frame of generator: {frame}")
      print(f"Previous Frame of generator: {frame} {frame.f_back}")
      yield 1
      yield 2
      return 3

  def test2():
      gen = test1()
      next(gen)
      frame = sys._getframe()
      print(f"Current function CodeObject: {test2.__code__}")
      print(f"Current frame CodeObject: {frame.f_code}")
      print(f"Current function frame: {frame}")
      print(f"Frame of generator: {gen.gi_frame}")
      print(f"CodeObject in generator: {gen.gi_code}")

  test2()

  # Current Frame of generator: <frame at 0x7f9a7a571c00, file '/home/inmove/code/study/python/test.py', line 5, code test1>
  # Previous Frame of generator: <frame at 0x7f9a7a571c00, file '/home/inmove/code/study/python/test.py', line 6, code test1> <frame at 0x7f9a7a630110, file '/home/inmove/code/study/python/test.py', line 13, code test2>
  # Current function CodeObject: <code object test2 at 0x2641150, file "/home/inmove/code/study/python/test.py", line 11>
  # Current frame CodeObject: <code object test2 at 0x2641150, file "/home/inmove/code/study/python/test.py", line 11>
  # Current function frame: <frame at 0x7f9a7a630110, file '/home/inmove/code/study/python/test.py', line 17, code test2>
  # Frame of genartor: <frame at 0x7f9a7a571c00, file '/home/inmove/code/study/python/test.py', line 7, code test1>
  # CodeObject in generator: <code object test1 at 0x7f9a7a600030, file "/home/inmove/code/study/python/test.py", line 3>
#+end_src

First test2 be called.
Create a frame, located in the top of the stack of Python virtual machine.
Then =gen = test1()=, because yield in the test1, so that gen is a generator.
This generator has a member point to a Frame.
Then =next(gen)= put gen.frame to the top of stack, when encounter another yield, the frame poped from stack.

* Simple Coroutine Use yield

#+NAME: server.py
#+begin_src python
  import socket
  from collections import deque
  import selectors

  from base import Base


  class EventLoop:

      WAIT_READ = 0x01
      WAIT_WRITE = 0x02

      def __init__(self):
          self.tasks_to_run = deque([])
          self.sel = selectors.DefaultSelector()

      def create_task(self, coro):
          self.tasks_to_run.append(coro)

      def run(self):
          while True:
              if self.tasks_to_run:
                  task = self.tasks_to_run.popleft()
                  try:
                      op, arg = next(task)
                  except StopIteration:
                      continue

                  if op == self.WAIT_READ:
                      self.sel.register(arg, selectors.EVENT_READ, task)
                  elif op == self.WAIT_WRITE:
                      self.sel.register(arg, selectors.EVENT_WRITE, task)
                  else:

              for key, _ in self.sel.select(timeout=1):
                  task = key.data
                  sock = key.fileobj
                  self.sel.unregister(sock)
                  self.create_task(task)


  class Server(Base):

      def run(self):
          sock = socket.socket()
          sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
          sock.setblocking(False)
          sock.bind((self.host, self.port))
          sock.listen()

          while True:
              yield loop.WAIT_READ, sock
              client_sock, addr = sock.accept()
              client_sock.setblocking(False)
              print(f'Connection from: {addr}')
              loop.create_task(self.handle_client(client_sock))

      def handle_client(self, sock):
          while True:
              yield loop.WAIT_READ, sock
              received_data = sock.recv(4096)
              print(f"Receive Data: {received_data}")
              if not received_data:
                  break
              yield loop.WAIT_WRITE, sock
              sock.sendall(received_data)

          print(f'Client disconnected: {sock.getpeername()}')
          sock.close()


  if __name__ == '__main__':
      loop = EventLoop()
      loop.create_task(Server().run())
      loop.run()
#+end_src

#+NAME: client.py
#+begin_src python
  import asyncio
  import time


  HOST = '127.0.0.1'
  PORT = 55555

  BUFSIZE = 4096


  async def client(name, indent):
      reader, writer = await asyncio.open_connection(host=HOST, port=PORT)
      start = time.time()
      print(f"Client Start: {start}")

      for msg in ['Hello', 'world!',]:
          await asyncio.sleep(1)
          writer.write(msg.encode())
          await writer.drain()
          resp = (await reader.read(BUFSIZE)).decode()
          print(f"Read From Server: {resp}")

      writer.close()
      print(f"Client end: {time.time() - start}")


  async def main():
      clients = [asyncio.create_task(client(i, i)) for i in range(3)]
      await asyncio.wait(clients)


  if __name__ == '__main__':
      asyncio.run(main())
#+end_src
