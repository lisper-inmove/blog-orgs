#+TITLE: Pydantic
#+DATE: 2025-04-19 16:50:56
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Usage of pydantic
#+CATEGORIES: Python

* What is Pydantic

[[https://docs.pydantic.dev/latest/][Official Document]]

Pydantic is a data validation and settings management library.
It provides a simple and powerful way to validate, parse and serialize data, especially when working with APIs and data inputs.

Key features of Pydantic:
1. Data Validation: allows you to define Python classes that represent data structures and automatically validates data against these models.
2. Type Safety: string typing, and they enforce type checks on input data.
3. Automatic Data Parsing: automatically converts incomming data into the appropriate Python types. It can handle complex data types like lists, dictionaries, nested models, and more.
4. Serialization: supports serializing data back into various formats (like JSON).
5. Error Handling: provides detailed, structured error messages, making it easy to debug when the input data doesn't match the expected format.

An example:
#+begin_src python :results output
  from datetime import datetime

  from pydantic import BaseModel, PositiveInt


  class User(BaseModel):
      id: int
      name: str = 'John Doe'
      signup_ts: datetime | None
      tastes: dict[str, PositiveInt]


  external_data = {
      'id': 123,
      'signup_ts': '2019-06-01 12:22',
      'tastes': {
          'wine': 9,
          b'cheese': 7,
          'cabbage': '1',
      },
  }

  user = User(**external_data)

  print(user.id)
  print(user.model_dump())
#+end_src

#+RESULTS:
: 123
: {'id': 123, 'name': 'John Doe', 'signup_ts': datetime.datetime(2019, 6, 1, 12, 22), 'tastes': {'wine': 9, 'cheese': 7, 'cabbage': 1}}

* Models
** Some methods and properties
#+begin_src python :results output
  from pydantic import BaseModel


  class User(BaseModel):
      id: int
      name: str = 'Jane Doe'


  user = User(id=1, name="inmove")
  print(User.model_validate({"id": 1, "age": 34}))
  print(User.model_fields)
  print(User.model_post_init)
  print(user.copy())
#+end_src

#+RESULTS:
: id=1 name='Jane Doe'
: {'id': FieldInfo(annotation=int, required=True), 'name': FieldInfo(annotation=str, required=False, default='Jane Doe')}
: <function BaseModel.model_post_init at 0x7fce3b3fa200>
: id=1 name='inmove'

** Data Conversion
Pydantic cast input data to force it to conform to model field types.
#+begin_src python :results silent :noweb yes
  from pydantic import BaseModel, ValidationError


  class MyModel(BaseModel):
      x: int


  print(MyModel.model_validate({'x': '123'}))  # lax mode
  #> x=123

  try:
      MyModel.model_validate({'x': '123'}, strict=True)  # strict mode
  except ValidationError as exc:
      print(exc)
      """
      1 validation error for MyModel
      x
        Input should be a valid integer [type=int_type, input_value='123', input_type=str]
      """
#+end_src

** Extra Data
#+begin_verse
extra value can be:
1. ignore: providing extra data is ignored(default)
2. forbid: providing extra data is not permitted.
3. allow: providing extra data is allowed, and stored in the __pydantic_extra__ dictionary attribute.
#+end_verse
#+begin_src python :results silent :noweb yes
  from pydantic import BaseModel, ConfigDict


  class Model(BaseModel):
      x: int

      model_config = ConfigDict(extra='allow')


  m = Model(x=1, y='a')
  assert m.model_dump() == {'x': 1, 'y': 'a'}
  assert m.__pydantic_extra__ == {'y': 'a'}
#+end_src

** Nested models
#+begin_src python :results silent :noweb yes
  from pydantic import BaseModel


  class Foo(BaseModel):
      count: int
      size: float | None = None


  class Bar(BaseModel):
      apple: str = 'x'
      banana: str = 'y'


  class Spam(BaseModel):
      foo: Foo
      bars: list[Bar]


  m = Spam(foo={'count': 4}, bars=[{'apple': 'x1'}, {'apple': 'x2'}])
  print(m)
  """
  foo=Foo(count=4, size=None) bars=[Bar(apple='x1', banana='y'), Bar(apple='x2', banana='y')]
  """
  print(m.model_dump())
  """
  {
      'foo': {'count': 4, 'size': None},
      'bars': [{'apple': 'x1', 'banana': 'y'}, {'apple': 'x2', 'banana': 'y'}],
  }
  """
#+end_src

** Rebuilding model schema
#+begin_src python :results file :noweb yes :exports code :file
  from pydantic import BaseModel, PydanticUserError


  class Foo(BaseModel):
      x: 'Bar'


  try:
      Foo.model_json_schema()
  except PydanticUserError as e:
      print(e)
      """
      `Foo` is not fully defined; you should define `Bar`, then call `Foo.model_rebuild()`.

      For further information visit https://errors.pydantic.dev/2/u/class-not-fully-defined
      """


  class Bar(BaseModel):
      pass


  Foo.model_rebuild()
  print(Foo.model_json_schema())
  """
  {
      '$defs': {'Bar': {'properties': {}, 'title': 'Bar', 'type': 'object'}},
      'properties': {'x': {'$ref': '#/$defs/Bar'}},
      'required': ['x'],
      'title': 'Foo',
      'type': 'object',
  }
  """
#+end_src

** Using attributes to parse model
#+begin_src python :results file :noweb yes :exports code :file
  from pydantic import BaseModel, ConfigDict


  class PetCls:
      def __init__(self, *, name: str, species: str):
          self.name = name
          self.species = species


  class PersonCls:
      def __init__(self, *, name: str, age: float = None, pets: list[PetCls]):
          self.name = name
          self.age = age
          self.pets = pets


  class Pet(BaseModel):
      model_config = ConfigDict(from_attributes=True)

      name: str
      species: str


  class Person(BaseModel):
      model_config = ConfigDict(from_attributes=True)

      name: str
      age: float = None
      pets: list[Pet]


  bones = PetCls(name='Bones', species='dog')
  orion = PetCls(name='Orion', species='cat')
  anna = PersonCls(name='Anna', age=20, pets=[bones, orion])
  anna_model = Person.model_validate(anna)
  print(anna_model)
  """
  name='Anna' age=20.0 pets=[Pet(name='Bones', species='dog'), Pet(name='Orion', species='cat')]
  """

#+end_src

** Generic Model
#+begin_src python
  from typing import Generic, TypeVar

  from pydantic import BaseModel

  TypeX = TypeVar('TypeX')


  class BaseClass(BaseModel, Generic[TypeX]):
      X: TypeX


  # to inherit from a generic model and preserve the fact that it is generic, the subclass must also inherit from Generic
  class ChildClass(BaseClass[TypeX], Generic[TypeX]):
      pass


  # Parametrize `TypeX` with `int`:
  print(ChildClass[int](X=1))
  #> X=1
#+end_src

** Dynamic Model
#+begin_src python
  from pydantic import BaseModel, create_model
  from typing import Annotated
  from pydantic import Field, PrivateAttr

  # 1
  DynamicFoobarModel = create_model('DynamicFoobarModel', foo=str, bar=(int, 123))
  # Equivalent to:
  class StaticFoobarModel(BaseModel):
      foo: str
      bar: int = 123


  # 2
  DynamicModel = create_model(
      'DynamicModel',
      foo=(str, Field(alias='FOO')),
      bar=Annotated[str, Field(description='Bar field')],
      _private=(int, PrivateAttr(default=1)),
  )


  # 3
  class FooModel(BaseModel):
      foo: str
      bar: int = 123

  BarModel = create_model(
      'BarModel',
      apple=(str, 'russet'),
      banana=(str, 'yellow'),
      __base__=FooModel,
  )
#+end_src

** Faux immutable
Attempting to change the values of instance attributes will raise errors.
#+begin_src python
  from pydantic import BaseModel, ConfigDict, ValidationError


  class FooBarModel(BaseModel):
      model_config = ConfigDict(frozen=True)

      a: str
      b: dict
#+end_src

** Class Variable
#+begin_src python
  from typing import ClassVar

  from pydantic import BaseModel


  class Model(BaseModel):
      x: ClassVar[int] = 1

      y: int = 2
#+end_src
