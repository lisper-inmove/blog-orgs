#+TITLE: How Metaclass Work
#+DATE: 2021-10-3 17:39:24
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: 元类又称生成类的类，用于创建新的类
#+KEYWORDS: Metaclass
#+CATEGORIES: Python
#+CARDIMAGE: https://inmove-blog.oss-cn-hangzhou.aliyuncs.com/images/PythonMetaclass.png

* 用type来动态的创建一个类
type(name: string, bases: [string], attrs: [string]):
1. name: 新创建的类的名称
3. attrs: 新类的属性
2. bases: 父类

#+begin_src python :results output
  import inspect

  class A:
      a = "A"

  class B:
      b = "B"

  def function_for_C(a):
      return a

  def function_for_C_2(self, b):
      return b

  # C的名称为 C，其父类为A和B，它有一些属性
  # 其中: name为成员变量
  #       function: 为指向 function_for_C的类函数
  #       function2: 为成员函数
  C = type("C", (A, B), {"name": "c", "function": function_for_C, "function2": function_for_C_2})
  print(C.function)
  print(C.function2)
  print(inspect.signature(C.function))
  print(inspect.signature(C.function2))
  c = C()
#+end_src

#+RESULTS:
: <function function_for_C at 0x7f678cca2160>
: <function function_for_C_2 at 0x7f678cd01080>
: (a)
: (self, b)

我们就可以利用type来写一个函数，该函数用于返回一个类，就叫他 createClass吧.
同时他也能作为 metaclass 来在类定义时使用，如下
myA 和 A 都调用了 createClass 函数，并且他们都拥有 __hello__ 这个属性
#+begin_src python :results output :exports code
  def createClass(name, bases, attrs):
      attrs.update({"__hello__": "hello"})
      print(name, bases, attrs)
      return type(name, bases, attrs)

  myA = createClass("myA", (), {})

  class A(metaclass=createClass):
      name = "A"

  myAObject = myA()
  AObject = A()

  print(myAObject)
  print(AObject)
#+end_src

#+RESULTS:
: myA () {'__hello__': 'hello'}
: A () {'__module__': '__main__', '__qualname__': 'A', 'name': 'A', '__hello__': 'hello'}
: <__main__.myA object at 0x7fa8cce09250>
: <__main__.A object at 0x7fa8cce09290>

* 元类的继承
元类也是一个类，它也是可以被继承的。
#+begin_src python :results output
  class Metaclass(type):
      def __new__(cls, name, bases, attrs):
          print(f"Metaclass1: {name} {bases} {attrs}")
          # 等同于如下写法:
          # return type(name, bases, attrs)
          # return type.__new__(cls, name, bases, attrs)
          return super().__new__(cls, name, bases, attrs)

  class Metaclass2(Metaclass):
      def __new__(cls, name, bases, attrs):
          print(f"Metaclass2: {name} {bases} {attrs}")
          return super().__new__(cls, name, bases, attrs)

  class A(metaclass=Metaclass2):
      name = "A"
#+end_src

#+RESULTS:
: Metaclass2: A () {'__module__': '__main__', '__qualname__': 'A', 'name': 'A'}
: Metaclass1: A () {'__module__': '__main__', '__qualname__': 'A', 'name': 'A'}

* 用元类来实现单例模式
** 非线程安全的单例
#+begin_src python :results output
  class Singleton(type):
      _instances = {}
      def __call__(cls, *args, **kargs):
          print("call Singleton __call__")
          if cls not in cls._instances:
              instance = super().__call__(*args, **kargs)
              cls._instances[cls] = instance
          return cls._instances[cls]

  # Foo = Singleton("Foo", (), ())
  class Foo(metaclass=Singleton):
      def __init__(self):
          print("Foo")

  f0 = Foo()
  f1 = Foo()
  print(f0 == f1)
#+end_src

#+RESULTS:
: call Singleton __call__
: Foo
: call Singleton __call__
: True

** 线程安全的单例
#+begin_src python :results output
  from threading import Lock, Thread

  class SingletonMeta(type):
      _instances = {}

      _lock: Lock = Lock()
      def __call__(cls, *args, **kwargs):
          with cls._lock:
              if cls not in cls._instances:
                  instance = super().__call__(*args, **kwargs)
                  cls._instances[cls] = instance
          return cls._instances[cls]

  class Singleton(metaclass=SingletonMeta):
      value: str = None
      def __init__(self, value: str) -> None:
          self.value = value
      def some_business_logic(self):
          pass

  def test_singleton(value: str) -> None:
      singleton = Singleton(value)
      print(singleton.value)

  if __name__ == "__main__":
      process1 = Thread(target=test_singleton, args=("FOO",))
      process2 = Thread(target=test_singleton, args=("BAR",))
      process2.start()
      process1.start()
#+end_src

#+RESULTS:
: BAR
: BAR
