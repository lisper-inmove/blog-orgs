#+TITLE: Dataclasses
#+DATE: 2024-03-01 00:04:32
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: A tool to make it easier to create classes that are primarily used to store data.
#+KEYWORDS: Slot Class
#+CATEGORIES: Python

* Define class
1. You can define a function named =__post_init__=, this function will be called after =__init__=
2. =__eq__= is generate by default. If set /order=True/, =__lt__= =__le__= =__gt__= =__ge__= will be generated.
3. Add attribute dynamically is not allowed.
#+begin_src python :results output
  from dataclasses import dataclass, field

  @dataclass(slots=True)
  class Point:
      x: int
      y: int
      friends: "Point" = None
      metadata: dict = field(default_factory=dict)

      def __post_init__(self):
          print(f"Point({self.x}, {self.y})")


  if __name__ == '__main__':
      p = Point(1, 2, friends=Point(3, 4))
      p.metadata.update({"name": "Point"})
      print(p.metadata)
#+end_src

#+RESULTS:
: Point(3, 4)
: Point(1, 2)
: {'name': 'Point'}

* Normal Class VS dataclass Class

In PersonSlots class, if we add =__dict__= to slots, we can add attribute dynamically.
All in all, dataclass class is more convenient. And it has more constraints.

#+begin_src python :results output
  from dataclasses import dataclass

  class Person:

      def __init__(self, name: str, age: int):
          self.name = name
          self.age = age

      def __str__(self):
          return f"{self.name} {self.age}"


  class PersonSlots:
      __slots__ = "name", "age"
      # __slots__ = "name", "age", "__dict__"

      def __init__(self, name: str, age: int):
          self.name = name
          self.age = age

      def __str__(self):
          return f"{self.name} {self.age}"


  @dataclass(slots=True)
  class PersonSlots2:
      name: str
      age: int = 11

      def __str__(self):
          return f"{self.name} {self.age}"


  if __name__ == '__main__':
      p1 = Person("inmove", 33)
      p2 = PersonSlots("mei", 18)
      p3 = PersonSlots2("andy", 1)
      p4 = PersonSlots2("andy")

      print(p1)
      print(p2)
      print(p3)
      print(p4)

      p1.address = "123"

      # Traceback (most recent call last):
      # File "<stdin>", line 34, in <module>
      # AttributeError: 'PersonSlots' object has no attribute 'address'
      # p2.address = "999"
      # p3.address = "888"
#+end_src

#+RESULTS:
