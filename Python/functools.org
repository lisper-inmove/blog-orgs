#+TITLE: functools
#+DATE: 2025-03-18 22:52:49
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: A higher-order funtions and operations on callable objects, making functions easier and more convenient to use and modify.
#+KEYWORDS: lru_cache partial
#+CATEGORIES: Python

* lru_cache
#+CAPTION: lru_cache
#+begin_src python :noweb yes :results silent
  from functools import lru_cache

  @lru_cache(maxsize=128)
  def fib(n):
      if n < 2:
          return n
      return fib(n - 1) + fib(n - 2)
#+end_src

* partial
#+CAPTION: partial
#+begin_src python :results silent :noweb yes
  from functools import partial

  def multiply(x, y):
      return x * y

  double = partial(multiply, 2)

  print(double(4))  # Output: 8

#+end_src

* partialmethod
#+CAPTION: partialmethod
#+begin_src python :results silent :noweb yes
  from functools import partialmethod

  class Greeter:
      def greet(self, greeting, name):
          print(f"{greeting}, {name}!")

      say_hello = partialmethod(greet, "Hello")
      say_goodbye = partialmethod(greet, "Goodbye")

  greeter = Greeter()
  greeter.say_hello("Alice")    # Hello, Alice!
  greeter.say_goodbye("Bob")    # Goodbye, Bob!

#+end_src

* reduce
#+CAPTION: reduce
#+begin_src python :results silent :noweb yes
  from functools import reduce

  nums = [1, 2, 3, 4]
  result = reduce(lambda x, y: x * y, nums)

  print(result)  # Output: 24
#+end_src

* wraps
#+CAPTION: wraps
#+begin_src python :results silent :noweb yes
  from functools import wraps

  def my_decorator(func):
      @wraps(func)
      def wrapper(*args, **kwargs):
          print("Before call")
          result = func(*args, **kwargs)
          print("After call")
          return result
      return wrapper

  @my_decorator
  def greet(name):
      """Greets a person."""
      print(f"Hello, {name}")

  greet("Alice")
  print(greet.__name__)        # Output: greet
  print(greet.__doc__)         # Output: Greets a person.

#+end_src

* singledispatch
#+CAPTION: singledispatch
#+begin_src python :results silent :noweb yes
  from functools import singledispatch

  @singledispatch
  def fun(arg):
      print(f"Default implementation, arg: {arg}")

  @fun.register
  def _(arg: int):
      print(f"Integer argument: {arg}")

  @fun.register
  def _(arg: str):
      print(f"String argument: {arg}")

  fun(10)      # Integer argument: 10
  fun("hello") # String argument: hello
  fun(3.14)    # Default implementation, arg: 3.14

#+end_src

* cached_property
#+CAPTION: cached_property
#+begin_src python :results silent :noweb yes
  from functools import cached_property

  class Data:
      def __init__(self, value):
          self.value = value

      @cached_property
      def computed(self):
          print("Computing...")
          return self.value * 2

  d = Data(10)
  print(d.computed)  # Output: Computing... 20
  print(d.computed)  # Output: 20 (cached result, no recomputation)

#+end_src

* total_ordering

It's enough to define __eq__ and one of __lt__ __le__ __gt__ __ge__, the decorator fills in the rest automatically.

#+CAPTION: total_ordering
#+begin_src python :results silent :noweb yes
  from functools import total_ordering

  @total_ordering
  class Number:
      def __init__(self, value):
          self.value = value

      def __eq__(self, other):
          return self.value == other.value

      def __lt__(self, other):
          return self.value < other.value

  a = Number(5)
  b = Number(10)

  print(a < b)   # True
  print(a > b)   # False
  print(a <= b)  # True
  print(a >= b)  # False

#+end_src
