#+TITLE: Stm32 HAL Timer
#+DATE: 2025-03-16 18:47:04
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Timer in Stm32 Using HAL Library
#+KEYWORDS: Timer
#+CATEGORIES: Stm32

* 结构体
总控结构体
#+CAPTION: stm32f1xx_hal_tim.h
#+begin_src c :results silent :noweb yes
  typedef struct
  #endif
  {
    // Instance主要是关联的寄存器
    TIM_TypeDef                 *Instance;
    // 基本参数
    TIM_Base_InitTypeDef        Init;
    HAL_TIM_ActiveChannel       Channel;
    // DMA有关的
    DMA_HandleTypeDef           *hdma[7];

    HAL_LockTypeDef             Lock;
    __IO HAL_TIM_StateTypeDef   State;

  #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    void (* Base_MspInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* Base_MspDeInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* IC_MspInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* IC_MspDeInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* OC_MspInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* OC_MspDeInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* PWM_MspInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* PWM_MspDeInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* OnePulse_MspInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* OnePulse_MspDeInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* Encoder_MspInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* Encoder_MspDeInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* HallSensor_MspInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* HallSensor_MspDeInitCallback)(struct __TIM_HandleTypeDef *htim);
    void (* PeriodElapsedCallback)(struct __TIM_HandleTypeDef *htim);
    void (* PeriodElapsedHalfCpltCallback)(struct __TIM_HandleTypeDef *htim);
    void (* TriggerCallback)(struct __TIM_HandleTypeDef *htim);
    void (* TriggerHalfCpltCallback)(struct __TIM_HandleTypeDef *htim);
    void (* IC_CaptureCallback)(struct __TIM_HandleTypeDef *htim);
    void (* IC_CaptureHalfCpltCallback)(struct __TIM_HandleTypeDef *htim);
    void (* OC_DelayElapsedCallback)(struct __TIM_HandleTypeDef *htim);
    void (* PWM_PulseFinishedCallback)(struct __TIM_HandleTypeDef *htim);
    void (* PWM_PulseFinishedHalfCpltCallback)(struct __TIM_HandleTypeDef *htim);
    void (* ErrorCallback)(struct __TIM_HandleTypeDef *htim);
    void (* CommutationCallback)(struct __TIM_HandleTypeDef *htim);
    void (* CommutationHalfCpltCallback)(struct __TIM_HandleTypeDef *htim);
    void (* BreakCallback)(struct __TIM_HandleTypeDef *htim);
  #endif
  } TIM_HandleTypeDef;

  typedef struct
  {
    // 预分频值，决定定时器的分频系统
    // 定时器的频率 = 主频率 / (psc + 1)
    uint32_t Prescaler;
    // 计数模式 向下/向上/中心对齐
    // #define TIM_COUNTERMODE_UP                 0x00000000U
    // #define TIM_COUNTERMODE_DOWN               TIM_CR1_DIR
    // #define TIM_COUNTERMODE_CENTERALIGNED1     TIM_CR1_CMS_0
    // #define TIM_COUNTERMODE_CENTERALIGNED2     TIM_CR1_CMS_1
    // #define TIM_COUNTERMODE_CENTERALIGNED3     TIM_CR1_CMS
    uint32_t CounterMode;
    // 装载值(计时次数)，实际值为 value + 1
    // 设置到TIMx_ARR寄存器里
    uint32_t Period;
    // 时钟分频因子
    // #define TIM_CLOCKDIVISION_DIV1             0x00000000U
    // #define TIM_CLOCKDIVISION_DIV2             TIM_CR1_CKD_0
    // #define TIM_CLOCKDIVISION_DIV4             TIM_CR1_CKD_1
    uint32_t ClockDivision;
    // 重复次数.高级定时器才有
    uint32_t RepetitionCounter;
    // 当 TIMx_ARR 的值被修改时，是否立即更新
    // 如一开始是100,当计时到80时，将其修改为150，
    // 设置为enable时，这个150是在本次生效，否则下次才生效
    // TIM_AUTORELOAD_PRELOAD_DISABLE, TIM_AUTORELOAD_PRELOAD_ENABLE
    uint32_t AutoReloadPreload;
  } TIM_Base_InitTypeDef;

  typedef struct
  {
    __IO uint32_t CR1;             /*!< TIM control register 1,                      Address offset: 0x00 */
    __IO uint32_t CR2;             /*!< TIM control register 2,                      Address offset: 0x04 */
    __IO uint32_t SMCR;            /*!< TIM slave Mode Control register,             Address offset: 0x08 */
    __IO uint32_t DIER;            /*!< TIM DMA/interrupt enable register,           Address offset: 0x0C */
    __IO uint32_t SR;              /*!< TIM status register,                         Address offset: 0x10 */
    __IO uint32_t EGR;             /*!< TIM event generation register,               Address offset: 0x14 */
    __IO uint32_t CCMR1;           /*!< TIM  capture/compare mode register 1,        Address offset: 0x18 */
    __IO uint32_t CCMR2;           /*!< TIM  capture/compare mode register 2,        Address offset: 0x1C */
    __IO uint32_t CCER;            /*!< TIM capture/compare enable register,         Address offset: 0x20 */
    __IO uint32_t CNT;             /*!< TIM counter register,                        Address offset: 0x24 */
    __IO uint32_t PSC;             /*!< TIM prescaler register,                      Address offset: 0x28 */
    __IO uint32_t ARR;             /*!< TIM auto-reload register,                    Address offset: 0x2C */
    __IO uint32_t RCR;             /*!< TIM  repetition counter register,            Address offset: 0x30 */
    __IO uint32_t CCR1;            /*!< TIM capture/compare register 1,              Address offset: 0x34 */
    __IO uint32_t CCR2;            /*!< TIM capture/compare register 2,              Address offset: 0x38 */
    __IO uint32_t CCR3;            /*!< TIM capture/compare register 3,              Address offset: 0x3C */
    __IO uint32_t CCR4;            /*!< TIM capture/compare register 4,              Address offset: 0x40 */
    __IO uint32_t BDTR;            /*!< TIM break and dead-time register,            Address offset: 0x44 */
    __IO uint32_t DCR;             /*!< TIM DMA control register,                    Address offset: 0x48 */
    __IO uint32_t DMAR;            /*!< TIM DMA address for full transfer register,  Address offset: 0x4C */
    __IO uint32_t OR;              /*!< TIM option register,                         Address offset: 0x50 */
  }TIM_TypeDef;

  typedef enum
  {
    HAL_TIM_ACTIVE_CHANNEL_1        = 0x01U,    /*!< The active channel is 1     */
    HAL_TIM_ACTIVE_CHANNEL_2        = 0x02U,    /*!< The active channel is 2     */
    HAL_TIM_ACTIVE_CHANNEL_3        = 0x04U,    /*!< The active channel is 3     */
    HAL_TIM_ACTIVE_CHANNEL_4        = 0x08U,    /*!< The active channel is 4     */
    HAL_TIM_ACTIVE_CHANNEL_CLEARED  = 0x00U     /*!< All active channels cleared */
  } HAL_TIM_ActiveChannel;
#+end_src

* 轮询
#+CAPTION: timer.c
#+begin_src c :results silent :noweb yes
  #include "stm32f1xx_hal.h"
  #include "timer.h"

  TIM_HandleTypeDef timer1;

  void Timer1_Init(uint16_t arr, uint16_t psc, uint8_t rep) {
    timer1.Instance = TIM1;
    timer1.Init.Prescaler = psc;
    timer1.Init.CounterMode = TIM_COUNTERMODE_UP;
    timer1.Init.Period = arr;
    timer1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    timer1.Init.RepetitionCounter = rep;
    timer1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    HAL_TIM_Base_Init(&timer1);
    HAL_TIM_Base_Start(&timer1);
  }

  void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM1) {
      __HAL_RCC_TIM1_CLK_ENABLE();
    }
  }

  void HAL_TIM_BaseMspDeInit(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM1) {
      __HAL_RCC_TIM1_CLK_DISABLE();
    }
  }
#+end_src

#+CAPTION: main.c
#+begin_src c :results silent :noweb yes
  #include "stm32f1xx_hal.h"
  #include "stm32f1xx_hal_tim.h"
  #include "rcc.h"
  #include "uart.h"
  #include "util.h"
  #include "timer.h"

  int main(void) {
    HAL_Init();
    RccClock_Init();
    U1_Init(921600);
    u1_printf("Program start: %d\n", 10);
    // 定时器初始化
    Timer1_Init(3999, 35999, 0);
    uint8_t counter = 0;
    while (1) {
      // 轮询查询标志位是否置1
      if (__HAL_TIM_GET_FLAG(&timer1, TIM_FLAG_UPDATE)) {
        // 清除标志位，避免重复处理
        __HAL_TIM_CLEAR_FLAG(&timer1, TIM_FLAG_UPDATE);
        u1_printf("Timer1 alarmed... %d\n", counter++);
        if (counter >= 3) {
          // 停止计时
          HAL_TIM_Base_Stop(&timer1);
          // 将定时器初始化
          HAL_TIM_Base_DeInit(&timer1);
          u1_printf("Timer1 stopped...");
        }
      }
    }
  }
#+end_src

* 中断
#+CAPTION: main.c
#+begin_src c :results silent :noweb yes
  #include "stm32f1xx_hal.h"
  #include "stm32f1xx_hal_tim.h"
  #include "rcc.h"
  #include "uart.h"
  #include "util.h"
  #include "timer.h"

  int main(void) {
    HAL_Init();
    RccClock_Init();
    U1_Init(921600);
    u1_printf("Program start: %d\n", 10);
    Timer1_Init(3999, 35999, 0);
    while (1) {

    }
  }
#+end_src

#+CAPTION: timer.h
#+begin_src c :results silent :noweb yes
  #ifndef TIMER_H
  #define TIMER_H

  #include "stm32f1xx_hal_tim.h"

  extern TIM_HandleTypeDef timer1;
  void Timer1_Init(uint16_t arr, uint16_t psc, uint8_t rep);

  #endif /* TIMER_H */

#+end_src

#+CAPTION: timer.c
#+begin_src c :results silent :noweb yes
  #include "stm32f1xx_hal.h"
  #include "timer.h"
  #include "util.h"

  TIM_HandleTypeDef timer1;
  uint32_t counter = 0;

  void Timer1_Init(uint16_t arr, uint16_t psc, uint8_t rep) {
    timer1.Instance = TIM1;
    timer1.Init.Prescaler = psc;
    timer1.Init.CounterMode = TIM_COUNTERMODE_UP;
    timer1.Init.Period = arr;
    timer1.Init.RepetitionCounter = rep;
    timer1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    HAL_TIM_Base_Init(&timer1);
    // 因为上断的时候会hal库会自动做一次软中断
    // 所以需要 清除 更新中断标志
    __HAL_TIM_CLEAR_FLAG(&timer1, TIM_FLAG_UPDATE);
    HAL_TIM_Base_Start_IT(&timer1);
  }

  void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM1) {
      // 使能定时器时钟
      __HAL_RCC_TIM1_CLK_ENABLE();
      // 设置定时器1的更新中断优先级为3
      HAL_NVIC_SetPriority(TIM1_UP_IRQn, 3, 0);
      // 使能定时器1的更新中断
      HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
    }
  }

  void HAL_TIM_BaseMspDeInit(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM1) {
      __HAL_RCC_TIM1_CLK_DISABLE();
      HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
    }
  }

  /*

    在HAL_TIM_IRQHandler函数中有一段代码

      if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
          __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
  #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->PeriodElapsedCallback(htim);
  #else
          HAL_TIM_PeriodElapsedCallback(htim);
  #endif
        }
      }

      表示当更新中断发生时 HAL_TIM_PeriodElapsedCallback会被调用。
      这个函数在 HAL 库中以 weak 方式声明的。所以我们需要自己实现这个函数。
      这样中断发生时就会进入我们自己的处理逻辑了。
   ,*/
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM1) {
      u1_printf("Timer1 alarmed... %d\n", counter++);
      if (counter >= 10) {
        HAL_TIM_Base_Stop(&timer1);
        HAL_TIM_Base_DeInit(&timer1);
        u1_printf("Timer1 stopped...");
      }
    }
  }

#+end_src

#+CAPTION: stm32f1xx_it.c
#+begin_src c :results silent :noweb yes
  #include "timer.h"
  void TIM1_UP_IRQHandler(void) {
    // 当中断发生时，该函数会被调用
    // HAL_TIM_IRQHandler函数会根据中断发生情况调用 TIM_HandleTypeDef 结构体中的回调函数
    HAL_TIM_IRQHandler(&timer1);
  }
#+end_src
* DMA
#+CAPTION: timer.c
#+begin_src c :results silent :noweb yes
  #include "stm32f1xx_hal.h"
  #include "timer.h"
  #include "uart.h"

  TIM_HandleTypeDef timer1;
  DMA_HandleTypeDef timer1_dmaup;
  uint16_t timer1_dmabuff[4] = {3999, 5999, 7999, 9999};
  uint32_t counter = 0;

  void Timer1_Init(uint16_t arr, uint16_t psc, uint8_t rep) {
    timer1.Instance = TIM1;
    timer1.Init.Prescaler = psc;
    timer1.Init.CounterMode = TIM_COUNTERMODE_UP;
    timer1.Init.Period = arr;
    timer1.Init.RepetitionCounter = rep;
    timer1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    HAL_TIM_Base_Init(&timer1);
    HAL_TIM_Base_Start_DMA(&timer1, (uint32_t *)timer1_dmabuff, 4);
  }

  void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM1) {
      __HAL_RCC_TIM1_CLK_ENABLE();
      __HAL_RCC_DMA1_CLK_ENABLE();

      timer1_dmaup.Instance = DMA1_Channel5;
      timer1_dmaup.Init.Direction = DMA_MEMORY_TO_PERIPH;
      timer1_dmaup.Init.PeriphInc = DMA_PINC_DISABLE;
      timer1_dmaup.Init.MemInc = DMA_MINC_ENABLE;
      timer1_dmaup.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
      timer1_dmaup.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
      timer1_dmaup.Init.Mode = DMA_NORMAL;
      timer1_dmaup.Init.Priority = DMA_PRIORITY_MEDIUM;
      __HAL_LINKDMA(&timer1, hdma[TIM_DMA_ID_UPDATE], timer1_dmaup);
      HAL_DMA_Init(&timer1_dmaup);

      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn,3,0);
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
    }
  }

  void HAL_TIM_BaseMspDeInit(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM1) {
      __HAL_RCC_TIM1_CLK_DISABLE();
      HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
    }
  }

  void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim) {
    // DMA 数组传输完成一半时此函数被调用
    if (htim->Instance == TIM1) {
      u1_printf("Hal cplt... %d\n", counter++);
    }
  }

  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    // DMA 传输完成时此函数被调用
    if (htim->Instance == TIM1) {
      u1_printf("Value of arr, %d\n", htim->Instance->ARR);
      if (htim->hdma[TIM_DMA_ID_UPDATE]->State == HAL_DMA_STATE_READY) {
        u1_printf("Timer1 alarmed by dma... %d\n", counter++);
        HAL_DMA_DeInit(htim->hdma[TIM_DMA_ID_UPDATE]);
      } else {
        u1_printf("Timer1 alarmed by it... %d\n", counter++);
      }
    }
  }
#+end_src

#+CAPTION: main.c
#+begin_src c :results silent :noweb yes
  #include "stm32f1xx_hal.h"
  #include "stm32f1xx_hal_tim.h"
  #include "rcc.h"
  #include "uart.h"
  #include "util.h"
  #include "timer.h"

  int main(void) {
    HAL_Init();
    RccClock_Init();
    U1_Init(921600);
    u1_printf("Program start: %d\n", 10);
    Timer1_Init(1999, 35999, 0);
    while (1) {}
  }

#+end_src

#+CAPTION: stm32f1xx_it.c
#+begin_src c :results silent :noweb yes
  void DMA1_Channel5_IRQHandler(void)
  {
    HAL_DMA_IRQHandler(&timer1_dmaup);
  }
#+end_src
