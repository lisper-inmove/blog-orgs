#+TITLE: esp-idf
#+DATE: 2025-01-21 21:36:33
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: Install esp-idf and light a led
#+KEYWORDS: esp32 idf
#+CATEGORIES: IoT

* 让vmware识别esp32s3开发板
1. 确保 虚拟机 -> 可移动设备 中有esp32开发板
2. 开机之后 使用 *lsusb* 查看是否能看到 Espressif Systems Espressif Device的信息
3. 使用 =ls /dev/tty*= 查看是否能看到 /dev/ttyACM0 或者 /dev/ttyUSB0

* install esp-idf in linux
#+begin_src shell
  # 克隆 ESP-IDF 仓库
  git clone --recursive https://github.com/espressif/esp-idf.git
  cd esp-idf
  ./install.sh
#+end_src

#+begin_src shell
  export IDF_PATH=Your esp-idf directory
#+end_src

Add current user to dialout and refresh groups.
#+begin_src shell
  sudo usermod -aG dialout $USER && newgrp dialout
#+end_src

* 新建LightLed的项目

#+begin_src shell
  source $IDF_PATH/export.sh
#+end_src

#+begin_src shell
  idf.py create-project LightLed
#+end_src

添加以下内容到 main/LightLed.c
#+begin_src c
  #include "driver/gpio.h"
  #include "esp_log.h"
  #include "esp_system.h"
  #include "freertos/FreeRTOS.h"
  #include "freertos/task.h"

  #define LED_GPIO_PIN GPIO_NUM_2  // LED connected to GPIO2
  static const char *TAG = "LED_APP";

  void app_main(void)
  {
      // Configure the LED GPIO as an output
      gpio_set_direction(LED_GPIO_PIN, GPIO_MODE_OUTPUT);

      ESP_LOGI(TAG, "LED Blinking Started");

      while (1) {
          // Turn on the LED
          gpio_set_level(LED_GPIO_PIN, 1);
          ESP_LOGI(TAG, "LED ON");
          vTaskDelay(1000 / portTICK_PERIOD_MS); // Delay for 1 second

          // Turn off the LED
          gpio_set_level(LED_GPIO_PIN, 0);
          ESP_LOGI(TAG, "LED OFF");
          vTaskDelay(1000 / portTICK_PERIOD_MS); // Delay for 1 second
      }
  }

#+end_src

set-target的时候根据你的芯片进行选择
#+begin_src shell
  cd LightLed
  idf.py set-target esp32s3
  idf.py build
  idf.py flash
#+end_src

监视输出。这个命令会hang住终端，用 =C-]= 可以结束监视
#+begin_src shell
  idf.py monitor
#+end_src
* 用pwm做呼吸灯
#+begin_src c
  #include "driver/ledc.h"
  #include "esp_log.h"
  #include "esp_system.h"
  #include "freertos/FreeRTOS.h"
  #include "freertos/task.h"

  #define LED_GPIO_PIN GPIO_NUM_2  // LED connected to GPIO2

  // LEDC configuration
  #define LEDC_CHANNEL    LEDC_CHANNEL_0
  #define LEDC_TIMER      LEDC_TIMER_0
  #define LEDC_MODE       LEDC_LOW_SPEED_MODE
  #define LEDC_DUTY       4000       // Duty cycle (0 to 8191 for 13-bit resolution)
  #define LEDC_FREQUENCY 5000       // Frequency in Hz (5 kHz)

  void app_main(void)
  {
      // Configure LEDC for PWM control
      ledc_channel_config_t ledc_channel = {
          .channel    = LEDC_CHANNEL,
          .duty       = LEDC_DUTY,
          .gpio_num   = LED_GPIO_PIN,
          .speed_mode = LEDC_MODE,
          .timer_sel  = LEDC_TIMER
      };

      // Set LEDC channel configuration
      ledc_channel_config(&ledc_channel);

      // Set LEDC timer configuration
      ledc_timer_config_t ledc_timer = {
          .duty_resolution = LEDC_TIMER_13_BIT, // 13-bit resolution
          .freq_hz         = LEDC_FREQUENCY,    // Frequency of PWM signal
          .speed_mode      = LEDC_MODE,
          .timer_num       = LEDC_TIMER
      };

      // Set LEDC timer configuration
      ledc_timer_config(&ledc_timer);

      while (1) {
          // Gradually increase the brightness
          for (int duty = 0; duty <= LEDC_DUTY; duty++) {
              ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, duty);
              ledc_update_duty(LEDC_MODE, LEDC_CHANNEL);
              vTaskDelay(10 / portTICK_PERIOD_MS); // 10 ms delay
          }

          // Gradually decrease the brightness
          for (int duty = LEDC_DUTY; duty >= 0; duty--) {
              ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, duty);
              ledc_update_duty(LEDC_MODE, LEDC_CHANNEL);
              vTaskDelay(10 / portTICK_PERIOD_MS); // 10 ms delay
          }
      }
  }
#+end_src
