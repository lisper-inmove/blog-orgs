#+TITLE: 33. 搜索旋转排序数组
#+DATE: 2023-10-01 20:59:03
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: BinarySearch
#+CATEGORIES: Leetcode
#+DIFFICULTY: Medium

* Solution

按题意来说，如果将数组拆成两部分。那么一定有一半是有序的，另一半是无序的。

#+begin_src python
  from typing import List

  class Solution:
      def search(self, nums: List[int], target: int) -> int:
          n = len(nums)
          l, r = 0, n - 1
          while l <= r:
              mid = l + ((r - l) >> 1)
              vl, vmid, vr = nums[l], nums[mid], nums[r]
              if vmid == target:
                  return mid
              if vmid < vr: # 后半段是有序的，就可以看target是不是在 后半段，根据结果来看是舍去后半段还是前半段
                  if vmid < target <= vr:
                      l = mid + 1
                  else:
                      r = mid - 1
              else:
                  if vl <= target < vmid:
                      r = mid - 1
                  else:
                      l = mid + 1
          return -1
#+end_src
