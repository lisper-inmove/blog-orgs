#+TITLE: 106. 从中序与后序遍历序列构造二叉树
#+DATE: 2023-10-01 00:29:20
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Leetcode BinaryTree
#+CATEGORIES: Leetcode
#+DIFFICULTY: Medium

* Solution
#+begin_src python
  from typing import List, Optional

  class TreeNode:
      def __init__(self, val=0, left=None, right=None):
          self.val = val
          self.left = left
          self.right = right

  class Solution:
      def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
          if not inorder or not postorder:
              return None

          # 取出后序遍历的最后一个元素，即为当前的根节点
          root_val = postorder.pop()
          root = TreeNode(root_val)

          # 在中序遍历中找到根节点的位置
          index = inorder.index(root_val)

          # 先构建右子树，再构建左子树
          root.right = self.buildTree(inorder[index+1:], postorder)
          root.left = self.buildTree(inorder[:index], postorder)

          return root
#+end_src
