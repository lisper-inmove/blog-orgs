#+TITLE: 123. 买卖股票最佳时机III
#+DATE: 2023-10-01 02:47:43
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Leetcode
#+CATEGORIES: Leetcode
#+DIFFICULTY: Hard

* Solution
#+begin_src python
  class Solution:


      def maxProfit(self, prices):
          return self.recusive(prices, 0, 4)

      def recusive(self, prices, index, j):
          # base case
          if index == len(prices):
              return 0

          if j == 0:
              return 0

          # 什么都不做
          p0 = self.recusive(prices, index + 1, j)

          if j % 2 != 0:
              # 1, 3 卖出
              p1 = self.recusive(prices, index + 1, j - 1) + prices[index]
          else:
              # 0, 2 买入
              p1 = self.recusive(prices, index + 1, j - 1) - prices[index]

          return max(p0, p1)

      def dp(self, prices, MT):
          # https://houbb.github.io/2020/01/23/algorithm-28-leetcode-123-best-time-to-buy-and-sell-stock-iii
          n = len(prices)
          if n == 0:
              return 0

          dp = [[0] * (MT + 1) for _ in range(n + 1)]
          for i in range(n, -1, -1):
              for j in range(0, MT + 1):
                  if (i == n or j == 0):
                      maxProfit = 0
                  else:
                      p0 = dp[i + 1][j]
                      if j % 2 != 0:
                          p1 = dp[i + 1][j - 1] + prices[i]
                      else:
                          p1 = dp[i + 1][j - 1] - prices[i]
                      maxProfit = max(p0, p1)
                  dp[i][j] = maxProfit
          return dp[0][MT]

      def dp1(self, prices, MT):

          # 可以解决188这道题 self.dp1(prices, k * 2)
          # https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/

          n = len(prices)
          if n == 0:
              return 0
          dp = [[0] * (MT + 1) for _ in range(2)]

          for i in range(n, -1, -1):
              for j in range(0, MT + 1):
                  if (i == n or j == 0):
                      maxProfit = 0
                  else:
                      # 从 j == 1, i == n - 1才会开始进入到这里
                      p0 = dp[(i + 1) % 2][j]
                      if j % 2 != 0:  # 1, 3 卖出
                          p1 = dp[(i + 1) % 2][j - 1] + prices[i]
                      else:  # 0, 2 买入
                          p1 = dp[(i + 1) % 2][j - 1] - prices[i]
                      maxProfit = max(p0, p1)
                  dp[i % 2][j] = maxProfit
          return dp[0][MT]

      def dp2(self, prices):
          n = len(prices)
          if n == 0:
              return 0

          # 最大的交易次数
          MAX_TRADE = 2

          # dp[i][j][k] 表示第i天，最多进行j次交易，当前是否持有股票(0表示不持有，1表示持有)的最大利润
          dp = [[[0] * 2 for _ in range(MAX_TRADE + 1)] for _ in range(n)]

          # 初始化第一天的状态
          for j in range(MAX_TRADE, -1, -1):
              dp[0][j][0] = 0
              dp[0][j][1] = -prices[0]

          # DynamicProgramming
          for i in range(1, n):
              for j in range(MAX_TRADE, 0, -1):
                  # 不持有股票的状态可以从前一天不持有或者前一天持有但今天卖出转移而来
                  dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])
                  # 持有股票的状态可以从前一天持有或者前一天不持有但今天买入转移而来
                  dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i])

          return dp[n-1][MAX_TRADE][0]

      def dp3(self, prices):
          if not prices:
              return 0

          dp = [[0] * 2 for _ in range(2)]
          dp[0][0], dp[1][0] = -prices[0], -prices[0]

          for i in range(1, len(prices)):
              # 第一次买入
              dp[0][0] = max(dp[0][0], -prices[i])
              # 第一次卖出
              dp[0][1] = max(dp[0][1], dp[0][0] + prices[i])
              # 第二次买入
              dp[1][0] = max(dp[1][0], dp[0][1] - prices[i])
              # 第二次卖出
              dp[1][1] = max(dp[1][1], dp[1][0] + prices[i])

          return dp[1][1]

      def dp4(self, prices):
          if not prices:
              return 0

          m0, m1, m2, m3 = -prices[0], 0, -prices[0], 0

          for i in range(1, len(prices)):
              # 第一次买入
              m0 = max(m0, -prices[i])
              # 第一次卖出
              m1 = max(m1, m0 + prices[i])
              # 第二次买入
              m2 = max(m2, m1 - prices[i])
              # 第二次卖出
              m3 = max(m3, m2 + prices[i])

          return m3
#+end_src
