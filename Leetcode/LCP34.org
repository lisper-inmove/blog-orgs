#+TITLE: 34. (LCP) 二叉树染色
#+DATE: 2023-10-01 00:36:49
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Leetcode BinaryTree
#+CATEGORIES: Leetcode
#+DIFFICULTY: Medium

* Solution

结点x与它的左右子结点 left, right
1. x染色 left连续染色数为i, 其中 0 <= i <= k - 1, 那么right染色数为 0 <= j <= k - i - 1。
2. x不染色 left连续染色数为k, right连续染色数为k。它的最大值便是这k个数的和，分别为k1, k2，通过x的最大值就是 max(k1, k2)

#+begin_src python
  class TreeNode:
      def __init__(self, x):
          self.val = x
          self.left = None
          self.right = None


  class Solution:
      def maxValue(self, root: TreeNode, k: int) -> int:
          def dfs(root):
              res = [0] * (k + 1)
              if root is None:
                  return res
              left = dfs(root.left)
              right = dfs(root.right)
              res[0] = max(left) + max(right)
              for i in range(0, k): # 左子树染0~k-1
                  for j in range(0, k - i): # 右子树染 0 ~ k - i - 1
                      if left[i] + right[j] + root.val > res[i + j + 1]:
                          res[i + j + 1] = left[i] + right[j] + root.val
              return res
          return max(dfs(root))
#+end_src
