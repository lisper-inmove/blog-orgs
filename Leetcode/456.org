#+TITLE: 456. 132模式
#+DATE: 2023-09-27 22:01:50
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Leetcode MonotonicStack
#+CATEGORIES: Leetcode
#+DIFFICULTY: Medium

* 132模式

https://leetcode.cn/problems/132-pattern/description/

#+begin_src python
  from typing import List

  class Solution:
      def find132pattern(self, nums: List[int]) -> bool:
          if len(nums) < 3:
              return False
          stack = [] # 单调增(Stack顶存放的是Stack中最小的数)
          kValue = float('-inf')
          for _i in range(len(nums) - 1, -1, -1):

              # 如果kValue的值是确定了的
              # 那么一定有个nums[j]是存在的:
              #     由下面的 while 语句确定了nums[j]与nums[k]的存在
              if nums[_i] < kValue:
                  return True

              # 如果我以 nums[_i] 做为 题目中的 nums[j]
              # 那么Stack中，从Stack中弹出所有比nums[_i]小的数
              # 因为单调递增，那么最后一个弹出的数就是小于nums[_i]且最接近 nums[_i] 的数
              # 也就是 nums[k] 与 nums[j] 是当前最接近的，也就给了nums[i]最大的空间
              while stack and stack[-1] < nums[_i]:
                  kValue = stack.pop()

              stack.append(nums[_i])
          return False
#+end_src
