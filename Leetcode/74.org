#+TITLE: 74. 搜索二维矩阵
#+DATE: 2023-10-01 21:18:05
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: BinarySearch
#+CATEGORIES: Leetcode
#+DIFFICULTY: Medium


* Solution

因为数组从左到右有序。第i行每个数又比上一行最大的数大，那么直接将这整个二维数组看成一个一维数组做二分就行了。
一维数组取值就是 0 ~ (rows * cols - 1)
对于数字n，如果一行有cols个数，那么 n // cols 就是行号，n % cols就是列号

#+begin_src python
  from typing import List

  class Solution:
      def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
          rows = len(matrix)
          if rows == 0:
              return False
          cols = len(matrix[0])
          if cols == 0:
              return False

          l, r = 0, rows * cols - 1
          while l <= r:
              mid = (l + r) // 2
              v = matrix[mid // cols][mid % cols]
              if v == target:
                  return True
              if v < target:
                  l = mid + 1
              else:
                  r = mid - 1
          return False
#+end_src
