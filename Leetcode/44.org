#+TITLE: 44. 通配符匹配
#+DATE: 2023-10-01 00:23:09
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Leetcode DP
#+CATEGORIES: Leetcode
#+DIFFICULTY: Hard

* Solution

p[i][j] 表示字符串 s 的前 i 个字符和模式 p 的前 j 个字符是否匹配

1. 当 p[j-1] 是一个普通字符或 ? 时，只需检查 s[i-1] 是否等于 p[j-1] 或 p[j-1] 是否为 ?。如果是，则 dp[i][j] = dp[i-1][j-1]。
2. 当 p[j-1] 是 * 时，* 可以匹配零个或多个字符。所以 dp[i][j] 可以是 dp[i][j-1] 或 dp[i-1][j]。
3. 当模式 p 的前 j 个字符都是 * 时，dp[0][j] 应该为 true。

#+begin_src python
  class Solution:
      def isMatch(self, s: str, p: str) -> bool:
          m, n = len(s), len(p)

          dp = [[False] * (n + 1) for _ in range(m + 1)]
          dp[0][0] = True

          # 处理模式 p 的前缀为 * 的情况
          for j in range(1, n + 1):
              if p[j-1] == '*':
                  dp[0][j] = dp[0][j-1]

          for i in range(1, m + 1):
              for j in range(1, n + 1):
                  if p[j-1] == s[i-1] or p[j-1] == '?':
                      dp[i][j] = dp[i-1][j-1]
                  elif p[j-1] == '*':
                      dp[i][j] = dp[i-1][j] or dp[i][j-1]

          return dp[m][n]
#+end_src
