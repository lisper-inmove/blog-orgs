#+TITLE: 61. 旋转LinkedList
#+DATE: 2023-10-01 00:24:51
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Leetcode LinkedList
#+CATEGORIES: Leetcode
#+DIFFICULTY: Medium

* Solution
#+begin_src python
  from typing import Optional

  class ListNode:
      def __init__(self, val=0, next=None):
          self.val = val
          self.next = next

  class Solution:
      def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
          if head is None:
              return None
          if head.next is None:
              return head
          if k == 0:
              return head

          # 计算LinkedList长度，避免可能的超时
          tmp = head
          length = 0
          while tmp:
              tmp = tmp.next
              length += 1
          k = k % length

          slower, faster = head, head
          for i in range(0, k):
              faster = faster.next
              if faster is None:
                  faster = head
          if faster == head:
              return head
          while faster.next:
              faster = faster.next
              slower = slower.next
          result = slower.next
          slower.next = None
          faster.next = head
          return result

#+end_src
